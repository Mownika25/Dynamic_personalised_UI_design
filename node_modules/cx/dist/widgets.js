import {
	Container,
	ContentPlaceholder,
	Culture,
	Cx,
	DataAdapter,
	FocusManager,
	Format,
	GroupAdapter,
	History,
	InstanceCache,
	Localization,
	PureContainer,
	RenderingContext,
	Repeater,
	ResizeManager,
	Selection,
	Text,
	Url,
	VDOM,
	Widget,
	ZIndexManager,
	batchUpdates,
	createComponentFactory,
	createFunctionalComponent,
	enableCultureSensitiveFormatting,
	exploreChildren,
	flattenProps,
	getContent,
	getContentArray,
	isComponentFactory,
	offFocusOut,
	oneFocusOut,
	preventFocus,
	preventFocusOnTouch,
	startAppLoop
} from "./ui";
import {
	Console,
	Format as Format$1,
	KeyCode,
	SubscriberList,
	closest,
	dateDiff,
	debounce,
	debug,
	deprecatedFlag,
	findFirst,
	findFirstChild,
	findScrollableParent,
	getFocusedElement,
	getScrollerBoundingClientRect,
	getSearchQueryPredicate,
	getVendorPrefix,
	hslToRgb,
	isArray,
	isDefined,
	isFocusable,
	isFocused,
	isFocusedDeep,
	isFunction,
	isNonEmptyArray,
	isNumber,
	isPromise,
	isSelfOrDescendant,
	isString,
	isTouchDevice,
	isTouchEvent,
	isUndefined,
	lowerBoundCheck,
	maxDate,
	menuFlag,
	minDate,
	monthStart,
	parseColor,
	parseStyle,
	preventDefault,
	rgbToHex,
	rgbToHsl,
	routeAppend,
	sameDate,
	scrollElementIntoView,
	shallowEquals,
	stopPropagation,
	tooltipsFlag,
	upperBoundCheck,
	zeroTime
} from "./util";
import {
	Binding,
	ExposedValueView,
	ReadOnlyDataView,
	StringTemplate,
	enableFatArrowExpansion,
	getSelector,
	isSelector
} from "./data";
import RouteMatcher from "route-parser";
import { DateTimeCulture } from "intl-io";

var impl = false;

function tooltipMouseMove(e, parentInstance, tooltip) {
	var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	return impl && impl.tooltipMouseMove.apply(impl, arguments);
}

function tooltipMouseLeave(e, parentInstance, tooltip, options) {
	return impl && impl.tooltipMouseLeave.apply(impl, arguments);
}

function tooltipParentDidMount(element, parentInstance, tooltip, options) {
	return impl && impl.tooltipParentDidMount.apply(impl, arguments);
}

function tooltipParentWillReceiveProps(element, parentInstance, tooltip, options) {
	return impl && impl.tooltipParentWillReceiveProps.apply(impl, arguments);
}

function tooltipParentWillUnmount(parentInstance) {
	return impl && impl.tooltipParentWillUnmount.apply(impl, arguments);
}

function wireTooltipOps(ops) {
	impl = ops;
}

var _typeof =
	typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
		? function(obj) {
				return typeof obj;
			}
		: function(obj) {
				return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype
					? "symbol"
					: typeof obj;
			};

var classCallCheck = function(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
};

var _extends =
	Object.assign ||
	function(target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];

			for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}

		return target;
	};

var inherits = function(subClass, superClass) {
	if (typeof superClass !== "function" && superClass !== null) {
		throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	}

	subClass.prototype = Object.create(superClass && superClass.prototype, {
		constructor: {
			value: subClass,
			enumerable: false,
			writable: true,
			configurable: true
		}
	});
	if (superClass)
		Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : (subClass.__proto__ = superClass);
};

var possibleConstructorReturn = function(self, call) {
	if (!self) {
		throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	}

	return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var isDataAttribute = function isDataAttribute(attr) {
	return attr.indexOf("data-") == 0 ? attr.substring(5) : false;
};

var urlAttributes = {
	"a.href": true,
	"img.src": true
};

var HtmlElement = (function(_Container) {
	inherits(HtmlElement, _Container);

	function HtmlElement(config) {
		classCallCheck(this, HtmlElement);

		var _this = possibleConstructorReturn(this, _Container.call(this, config));

		if (isUndefined(_this.jsxAttributes) && config)
			_this.jsxAttributes = Object.keys(config).filter(_this.isValidHtmlAttribute.bind(_this));
		return _this;
	}

	HtmlElement.prototype.declareData = function declareData() {
		var _this2 = this,
			_Container$prototype$;

		var data = {
			text: undefined,
			innerHtml: undefined,
			attrs: {
				structured: true
			},
			data: {
				structured: true
			}
		};

		var name;

		this.urlAttributes = [];

		if (this.jsxAttributes) {
			this.jsxAttributes.forEach(function(attr) {
				if (urlAttributes[_this2.tag + "." + attr]) _this2.urlAttributes.push(attr);

				if ((name = isDataAttribute(attr))) {
					if (!_this2.data) _this2.data = {};
					_this2.data[name] = _this2[attr];
				} else if ((name = _this2.isValidHtmlAttribute(attr)) && !data.hasOwnProperty(name)) {
					if (name.indexOf("on") == 0) {
						if (!_this2.events) _this2.events = {};
						_this2.events[name] = _this2[attr];
					} else {
						if (!_this2.attrs) _this2.attrs = {};
						_this2.attrs[name] = _this2[attr];
					}
				}
			});
		}

		if (this.urlAttributes.length == 0) delete this.urlAttributes;

		(_Container$prototype$ = _Container.prototype.declareData).call.apply(
			_Container$prototype$,
			[this].concat(Array.prototype.slice.call(arguments), [data])
		);
	};

	HtmlElement.prototype.isValidHtmlAttribute = function isValidHtmlAttribute(attrName) {
		switch (attrName) {
			case "tag":
			case "type":
			case "$type":
			case "$props":
			case "text":
			case "layout":
			case "class":
			case "className":
			case "style":
			case "controller":
			case "outerLayout":
			case "items":
			case "children":
			case "visible":
			case "if":
			case "mod":
			case "putInto":
			case "contentFor":
			case "trimWhitespace":
			case "preserveWhitespace":
			case "ws":
			case "plainText":
			case "vertical":
			case "memoize":
			case "onInit":
			case "onExplore":
			case "html":
			case "innerText":
			case "baseClass":
			case "CSS":
			case "tooltip":
			case "styles":
			case "jsxAttributes":
			case "instance":
				return false;

			default:
				if (isDataAttribute(attrName)) return false;

				break;
		}

		return attrName;
	};

	HtmlElement.prototype.init = function init() {
		if (this.html) this.innerHtml = this.html;

		if (this.innerText) this.text = this.innerText;

		_Container.prototype.init.call(this);
	};

	HtmlElement.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		if (this.urlAttributes && data.attrs) {
			data.attrs = _extends({}, data.attrs);
			this.urlAttributes.forEach(function(attr) {
				if (isString(data.attrs[attr])) data.attrs[attr] = Url.resolve(data.attrs[attr]);
			});
		}
		_Container.prototype.prepareData.call(this, context, instance);
	};

	HtmlElement.prototype.attachProps = function attachProps(context, instance, props) {
		Object.assign(props, this.extraProps);

		if (!isString(this.tag)) props.instance = instance;
	};

	HtmlElement.prototype.render = function render(context, instance, key) {
		//rebind events to pass instance
		if (this.events && !instance.events) {
			instance.events = {};

			var _loop = function _loop(eventName) {
				instance.events[eventName] = function(e) {
					return instance.invoke(eventName, e, instance);
				};
			};

			for (var eventName in this.events) {
				_loop(eventName);
			}
		}

		var data = instance.data,
			events = instance.events,
			shouldUpdate = instance.shouldUpdate;

		var props = Object.assign(
			{
				key: key
			},
			data.attrs,
			events
		);

		if (data.classNames) props.className = data.classNames;

		if (data.style) props.style = data.style;

		var children = void 0;
		if (isDefined(data.text)) children = data.text;
		else if (isString(data.innerHtml)) {
			props.dangerouslySetInnerHTML = { __html: data.innerHtml };
		} else {
			children = this.renderChildren(context, instance);
			if (children && isArray(children) && children.length == 0) children = undefined;
		}

		props.children = children;

		this.attachProps(context, instance, props);

		if (this.tooltip)
			return VDOM.createElement(
				ContainerComponent,
				{
					key: key,
					tag: this.tag,
					props: props,
					instance: instance,
					data: data,
					shouldUpdate: shouldUpdate
				},
				props.children
			);

		return VDOM.createElement(this.tag, props, props.children);
	};

	return HtmlElement;
})(Container);

HtmlElement.prototype.tag = "div";
HtmlElement.prototype.styled = true;

var ContainerComponent = (function(_VDOM$Component) {
	inherits(ContainerComponent, _VDOM$Component);

	function ContainerComponent() {
		classCallCheck(this, ContainerComponent);
		return possibleConstructorReturn(this, _VDOM$Component.apply(this, arguments));
	}

	ContainerComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(props) {
		return props.shouldUpdate;
	};

	ContainerComponent.prototype.render = function render() {
		var _this4 = this;

		var _props = this.props,
			tag = _props.tag,
			props = _props.props,
			children = _props.children,
			instance = _props.instance;

		if (instance.widget.tooltip) {
			props.ref = function(c) {
				_this4.el = c;
			};

			var onMouseLeave = props.onMouseLeave,
				onMouseMove = props.onMouseMove;

			props.onMouseLeave = function(e) {
				tooltipMouseLeave(e, instance, instance.widget.tooltip);
				if (onMouseLeave) onMouseLeave(e);
			};
			props.onMouseMove = function(e) {
				tooltipMouseMove(e, instance, instance.widget.tooltip);
				if (onMouseMove) onMouseMove(e);
			};
		}

		return VDOM.createElement(tag, props, children);
	};

	ContainerComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		tooltipParentWillUnmount(this.props.instance);
	};

	ContainerComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		tooltipParentWillReceiveProps(this.el, props.instance, this.props.instance.widget.tooltip);
	};

	ContainerComponent.prototype.componentDidMount = function componentDidMount() {
		tooltipParentDidMount(this.el, this.props.instance, this.props.instance.widget.tooltip);
	};

	return ContainerComponent;
})(VDOM.Component);

var originalWidgetFactory = Widget.factory;

//support for React components
Widget.factory = function(type, config, more) {
	var typeType = typeof type === "undefined" ? "undefined" : _typeof(type);

	if (typeType == "undefined") {
		debug("Creating a widget of unknown type.", config, more);
		return new HtmlElement(Object.assign({}, config, more));
	}

	if (typeType == "function") return HtmlElement.create(HtmlElement, { tag: type }, config);

	return originalWidgetFactory.call(Widget, type, config, more);
};

Widget.alias("html-element", HtmlElement);

var htmlFactoryCache = {};

function getHtmlElementFactory(tagName) {
	var factory = htmlFactoryCache[tagName];
	if (factory) return factory;
	return (htmlFactoryCache[tagName] = createComponentFactory(
		function(config) {
			return HtmlElement.create(HtmlElement, { tag: tagName }, flattenProps(config));
		},
		{ tag: tagName }
	));
}

function cx(typeName, props) {
	for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
		children[_key - 2] = arguments[_key];
	}

	if (isArray(typeName)) return typeName;

	if (isFunction(typeName) && isUndefined(props))
		return createFunctionalComponent(function(config) {
			return typeName(flattenProps(config));
		});

	if (typeName.type || typeName.$type) return typeName;

	if (children && children.length == 0) children = null;

	if (children && children.length == 1) children = children[0];

	if (typeName == "cx") return children;

	if (typeName == "react") return react(children);

	if (isString(typeName) && typeName[0] == typeName[0].toLowerCase()) typeName = getHtmlElementFactory(typeName);

	return {
		$type: typeName,
		$props: props,
		jsxAttributes: props && Object.keys(props),
		children: children
	};
}

function react(config) {
	if (!config || isString(config) || isNumber(config) || VDOM.isValidElement(config)) return config;

	if (isArray(config)) return config.map(react);

	var type = config.$type;

	if (isComponentFactory(type) && type.$meta && type.$meta.tag) type = type.$meta.tag;

	if (isArray(config.children))
		return VDOM.createElement.apply(VDOM, [type, config.$props].concat(config.children.map(react)));

	return VDOM.createElement(type, config.$props, react(config.children));
}

function getMessage(options) {
	debug(
		deprecatedFlag,
		"Call enableMsgBoxes() on startup to use Cx based message boxes. Message boxes are not auto enabled anymore to reduce the bundle size for apps that do not use them. "
	);
	if (!options) return null;
	if (isString(options)) return options;
	if (options && options.message) return options.message;
	return null;
}

var impl$1 = {
	yesNo: function yesNo(options) {
		var result = window.confirm(getMessage(options));
		return Promise.resolve(result ? "yes" : "no");
	},

	alert: function alert(options) {
		window.alert(getMessage(options));
		return Promise.resolve();
	}
};

function yesNo(options) {
	return impl$1.yesNo.apply(impl$1, arguments);
}

function registerAlertImpl(x) {
	impl$1 = x;
}

var icons = {};
var iconFactory = null;
var defaultIcons = {};

var unregisteredDefaultIcons = {};

function registerIcon(name, icon) {
	var defaultIcon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	if (!defaultIcon || !unregisteredDefaultIcons[name]) icons[name] = icon;

	if (!defaultIcon) unregisteredDefaultIcons[name] = true;
	else defaultIcons[name] = icon;

	return function(props) {
		return renderIcon(name, props);
	};
}

function unregisterIcon() {
	for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		args[_key] = arguments[_key];
	}

	args.forEach(function(name) {
		delete icons[name];
		unregisteredDefaultIcons[name] = true;
	});
}

function renderIcon(name, props) {
	if (isFunction(name)) return name(props);

	if (icons[name]) return icons[name](props);

	if (iconFactory) return iconFactory(name, props);

	return null;
}

function clearIcons() {
	icons = {};
}

function registerIconFactory(factory) {
	iconFactory = factory;
}

function restoreDefaultIcons() {
	icons = _extends({}, defaultIcons);
}

registerIcon(
	"calendar",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 32 32"
			}),
			VDOM.createElement("path", { d: "M4 3h6m10 0h6", fill: "none", stroke: "currentColor", strokeWidth: "2" }),
			VDOM.createElement("path", { d: "M19 21h4v4h-4z", fill: "currentColor" }),
			VDOM.createElement("path", {
				d: "M3 25h24M3 21h24M3 17h24M7 28V13m-4 0h24M11 28V13.2M15 28V13.27M19 28V13.03M23 28V13.5",
				fill: "none",
				stroke: "currentColor"
			}),
			VDOM.createElement("path", { fill: "currentColor", d: "M10 8h10v2H10z" }),
			VDOM.createElement("path", { fill: "none", stroke: "currentColor", strokeWidth: "2", d: "M3 5h24v24H3z" })
		);
	},
	true
);

var CheckIcon = registerIcon(
	"check",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 64 64"
			}),
			VDOM.createElement("path", {
				d: "M7.136 42.94l20.16 14.784 29.568-40.32-9.72-7.128-22.598 30.816-10.44-7.656z",
				fill: "currentColor"
			})
		);
	},
	true
);

var ClearIcon = registerIcon(
	"clear",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 32 32"
			}),
			VDOM.createElement("path", {
				fill: "currentColor",
				strokeWidth: "1",
				stroke: "currentColor",
				d:
					"M16.9 16l4.92-4.92c.24-.24.24-.6 0-.84s-.6-.24-.84 0l-4.92 4.92-5.04-4.98c-.24-.24-.6-.24-.84 0s-.24.6 0 .84L15.16 16l-4.98 4.98c-.24.24-.24.6 0 .84s.6.24.84 0L16 16.84l4.98 4.98c.24.24.6.24.84 0s.24-.6 0-.84L16.9 16z"
			})
		);
	},
	true
);

registerIcon(
	"close",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 32 32"
			}),
			VDOM.createElement("path", {
				fill: "currentColor",
				strokeWidth: "1",
				stroke: "currentColor",
				d:
					"M17.8 16l9.84-9.84c.48-.48.48-1.2 0-1.68s-1.2-.48-1.68 0l-9.84 9.84L6.04 4.36c-.48-.48-1.2-.48-1.68 0s-.48 1.2 0 1.68L14.32 16l-9.96 9.96c-.48.48-.48 1.2 0 1.68s1.2.48 1.68 0L16 17.68l9.96 9.96c.48.48 1.2.48 1.68 0s.48-1.2 0-1.68L17.8 16z"
			}),
			"/>"
		);
	},
	true
);

var DropdownIcon = registerIcon(
	"drop-down",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 20 20"
			}),
			VDOM.createElement("path", {
				fill: "currentColor",
				strokeWidth: "0",
				stroke: "currentColor",
				d: "M4.516 8.147L10.01 12.5l5.474-4.33-.473-.65-5 3.98-5-4z"
			})
		);
	},
	true
);

registerIcon(
	"folder",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 16 16"
			}),
			VDOM.createElement("path", { d: "M1 5h13v9H1zm1 0h6L7 3H3z", fill: "currentColor", stroke: "none" })
		);
	},
	true
);

registerIcon(
	"folder-open",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 16 16"
			}),
			VDOM.createElement("path", { d: "M0 5v7l2.5-6H13V5zm1 0h6L6 3H2z", fill: "currentColor", stroke: "none" }),
			VDOM.createElement("path", { d: "M3 7h13l-3 7H0z", fill: "currentColor", stroke: "none" })
		);
	},
	true
);

registerIcon(
	"menu",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 24 24"
			}),
			VDOM.createElement("path", {
				d: "M0 0h24v24H0z",
				fill: "none"
			}),
			VDOM.createElement("path", {
				d:
					"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z",
				fill: "currentColor"
			})
		);
	},
	true
);

registerIcon(
	"loading",
	function(props) {
		var style = {
			animation: "linear infinite 0.5s cx-rotate"
		};

		if (props && props.style) Object.assign(style, props.style);

		props = _extends({}, props, {
			style: style
		});

		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 50 50"
			}),
			VDOM.createElement("path", {
				fill: "currentColor",
				d:
					"M43.94 25.14c0-10.3-8.37-18.68-18.7-18.68-10.3 0-18.67 8.37-18.67 18.68h4.07c0-8.07 6.54-14.6 14.6-14.6 8.08 0 14.63 6.53 14.63 14.6h4.07z"
			})
		);
	},
	true
);

registerIcon(
	"search",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 32 32"
			}),
			VDOM.createElement("path", {
				fill: "currentColor",
				d:
					"M25.595 22.036l-5.26-5.075c.75-1.18 1.206-2.56 1.206-4.05 0-4.32-3.63-7.82-8.103-7.82-4.477 0-8.107 3.503-8.107 7.82 0 4.32 3.63 7.825 8.106 7.825 1.544 0 2.972-.44 4.198-1.162l5.26 5.074c.37.356.98.354 1.35 0l1.352-1.304c.37-.357.37-.947 0-1.304zm-12.16-3.91c-2.985 0-5.405-2.336-5.405-5.216 0-2.88 2.42-5.214 5.405-5.214 2.984 0 5.404 2.335 5.404 5.214 0 2.88-2.42 5.215-5.407 5.215z"
			})
		);
	},
	true
);



registerIcon(
	"file",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 16 16"
			}),
			VDOM.createElement("path", { d: "M2 2h5v5h5v7H2z", fill: "currentColor", stroke: "none" }),
			VDOM.createElement("path", { d: "M8 2v4h4z", fill: "currentColor", stroke: "none" })
		);
	},
	true
);

var Icon = (function(_Widget) {
	inherits(Icon, _Widget);

	function Icon() {
		classCallCheck(this, Icon);
		return possibleConstructorReturn(this, _Widget.apply(this, arguments));
	}

	Icon.prototype.declareData = function declareData() {
		var _Widget$prototype$dec;

		(_Widget$prototype$dec = _Widget.prototype.declareData).call.apply(
			_Widget$prototype$dec,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					name: undefined
				}
			])
		);
	};

	Icon.prototype.render = function render(context, instance, key) {
		var data = instance.data;

		return renderIcon(data.name, {
			key: key,
			className: data.classNames,
			style: data.style
		});
	};

	Icon.register = function register(name, icon) {
		var defaultIcon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

		return registerIcon(name, icon, defaultIcon);
	};

	Icon.unregister = function unregister() {
		return unregisterIcon.apply(undefined, arguments);
	};

	Icon.render = function render(name, props) {
		return renderIcon(name, props);
	};

	Icon.clear = function clear() {
		return clearIcons();
	};

	Icon.registerFactory = function registerFactory(factory) {
		return registerIconFactory(factory);
	};

	Icon.restoreDefaultIcons = function restoreDefaultIcons$$1() {
		restoreDefaultIcons();
	};

	return Icon;
})(Widget);

Icon.prototype.baseClass = "icon";
Icon.prototype.styled = true;

Widget.alias("icon", Icon);

var Button = (function(_HtmlElement) {
	inherits(Button, _HtmlElement);

	function Button() {
		classCallCheck(this, Button);
		return possibleConstructorReturn(this, _HtmlElement.apply(this, arguments));
	}

	Button.prototype.declareData = function declareData() {
		var _HtmlElement$prototyp;

		(_HtmlElement$prototyp = _HtmlElement.prototype.declareData).call.apply(
			_HtmlElement$prototyp,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					confirm: { structured: true },
					pressed: undefined,
					icon: undefined,
					disabled: undefined,
					enabled: undefined
				}
			])
		);
	};

	Button.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.stateMods = _extends({}, data.stateMods, {
			pressed: data.pressed
		});
		if (isDefined(data.enabled)) data.disabled = !data.enabled;

		_HtmlElement.prototype.prepareData.call(this, context, instance);
	};

	Button.prototype.explore = function explore(context, instance) {
		instance.data.parentDisabled = context.parentDisabled;
		if (instance.cache("parentDisabled", context.parentDisabled)) instance.markShouldUpdate(context);

		_HtmlElement.prototype.explore.call(this, context, instance);
	};

	Button.prototype.attachProps = function attachProps(context, instance, props) {
		var _this2 = this;

		_HtmlElement.prototype.attachProps.call(this, context, instance, props);

		if (!this.focusOnMouseDown) {
			props.onMouseDown = function(e) {
				if (_this2.onMouseDown) instance.invoke("onMouseDown", e, instance);
				preventFocus(e);
			};
		}

		if (this.dismiss) {
			props.onClick = function() {
				if (instance.parentOptions && isFunction(instance.parentOptions.dismiss)) instance.parentOptions.dismiss();
			};
		}

		if (this.tag === "button") props.type = this.submit ? "submit" : "button";

		delete props.confirm;
		delete props.dismiss;
		delete props.pressed;
		delete props.submit;
		delete props.focusOnMouseDown;
		delete props.icon;
		delete props.enabled;

		var oldOnClick = void 0,
			data = instance.data;

		props.disabled = data.disabled || data.parentDisabled;

		if (data.confirm) {
			oldOnClick = props.onClick;
			props.onClick = function() {
				yesNo(data.confirm).then(function(btn) {
					if (btn == "yes") oldOnClick.call(_this2, null);
				});
			};
		}

		var icon = void 0,
			children = void 0;

		if (data.icon) {
			icon = Icon.render(data.icon, {
				key: "icon",
				className: this.CSS.element(this.baseClass, "icon")
			});
			children = getContentArray(props.children);
			props.children = [icon].concat(children);
			props.className = this.CSS.expand(
				props.className,
				this.CSS.state("icon"),
				children.length == 0 && this.CSS.state("empty")
			);

			if (children.length == 0) {
				props.children.push(
					VDOM.createElement(
						"span",
						{ key: "baseline", className: this.CSS.element(this.baseClass, "baseline") },
						"\xA0"
					)
				);
			}
		}
	};

	return Button;
})(HtmlElement);

Button.prototype.tag = "button";
Button.prototype.baseClass = "button";
Button.prototype.icon = false;
Button.prototype.focusOnMouseDown = false;
Button.prototype.submit = false;

Widget.alias("button", Button);

var DocumentTitle = (function(_Widget) {
	inherits(DocumentTitle, _Widget);

	function DocumentTitle() {
		classCallCheck(this, DocumentTitle);
		return possibleConstructorReturn(this, _Widget.apply(this, arguments));
	}

	DocumentTitle.prototype.init = function init() {
		if (this.value) this.text = this.value;

		if (this.append) this.action = "append";

		_Widget.prototype.init.call(this);
	};

	DocumentTitle.prototype.declareData = function declareData() {
		var _Widget$prototype$dec;

		(_Widget$prototype$dec = _Widget.prototype.declareData).call.apply(
			_Widget$prototype$dec,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					value: undefined,
					text: undefined,
					action: undefined,
					separator: undefined
				}
			])
		);
	};

	DocumentTitle.prototype.explore = function explore(context, instance) {
		if (!context.documentTitle) {
			context.documentTitle = {
				activeInstance: instance,
				title: ""
			};
		}

		var data = instance.data;

		if (data.text) {
			switch (data.action) {
				case "append":
					if (context.documentTitle.title) context.documentTitle.title += data.separator;
					context.documentTitle.title += data.text;
					break;

				case "prepend":
					context.documentTitle.title = data.text + data.separator + context.documentTitle.title;
					break;

				default:
				case "replace":
					context.documentTitle.title = data.text;
					break;
			}
		}

		_Widget.prototype.explore.call(this, context, instance);
	};

	DocumentTitle.prototype.prepare = function prepare(context, instance) {
		if (context.documentTitle.activeInstance == instance) document.title = context.documentTitle.title;
	};

	DocumentTitle.prototype.render = function render() {
		return null;
	};

	return DocumentTitle;
})(Widget);

DocumentTitle.prototype.action = "append";
DocumentTitle.prototype.separator = "";

Widget.alias("document-title", DocumentTitle);

/*
 - renders list of items
 - focusable (keyboard navigation)
 - selection
 - fake focus - list appears focused and receives keyboard inputs redirected from other control (dropdown scenario)
 */

var List = (function(_Widget) {
	inherits(List, _Widget);

	function List() {
		classCallCheck(this, List);
		return possibleConstructorReturn(this, _Widget.apply(this, arguments));
	}

	List.prototype.init = function init() {
		if (this.recordAlias) this.recordName = this.recordAlias;

		if (this.indexAlias) this.indexName = this.indexAlias;

		this.adapter = GroupAdapter.create(this.adapter || GroupAdapter, {
			recordName: this.recordName,
			indexName: this.indexName,
			recordsBinding: this.records && this.records.bind && Binding.get(this.records.bind),
			keyField: this.keyField
		});

		this.child = Widget.create({
			type: PureContainer,
			layout: this.layout,
			items: this.items,
			children: this.children,
			styled: true,
			class: this.itemClass,
			className: this.itemClassName,
			style: this.itemStyle
		});

		delete this.children;

		this.selection = Selection.create(this.selection, {
			records: this.records
		});

		_Widget.prototype.init.call(this);

		if (this.grouping) {
			this.groupBy(this.grouping);
		}
	};

	List.prototype.declareData = function declareData() {
		var _Widget$prototype$dec;

		var selection = this.selection.configureWidget(this);

		(_Widget$prototype$dec = _Widget.prototype.declareData).call.apply(
			_Widget$prototype$dec,
			[
				this,
				selection,
				{
					records: undefined,
					sorters: undefined,
					sortField: undefined,
					sortDirection: undefined,
					filterParams: {
						structured: true
					},
					itemStyle: {
						structured: true
					},
					emptyText: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	List.prototype.prepareData = function prepareData(context, instance) {
		var _this2 = this;

		var data = instance.data;

		if (data.sortField)
			data.sorters = [
				{
					field: data.sortField,
					direction: data.sortDirection || "ASC"
				}
			];
		this.adapter.sort(data.sorters);

		var filter = null;
		if (this.onCreateFilter) filter = instance.invoke("onCreateFilter", data.filterParams, instance);
		else if (this.filter)
			filter = function filter(item) {
				return _this2.filter(item, data.filterParams);
			};
		this.adapter.setFilter(filter);
		instance.mappedRecords = this.adapter.getRecords(context, instance, data.records, instance.store);

		data.stateMods = Object.assign(data.stateMods || {}, {
			selectable: !this.selection.isDummy || this.onItemClick,
			empty: instance.mappedRecords.length == 0
		});

		_Widget.prototype.prepareData.call(this, context, instance);
	};

	List.prototype.explore = function explore(context, instance, data) {
		var _this3 = this;

		var instances = [];
		var isSelected = this.selection.getIsSelectedDelegate(instance.store);
		instance.mappedRecords.forEach(function(record) {
			if (record.type == "data") {
				var itemInstance = instance.getChild(context, _this3.child, record.key + ":", record.store);
				itemInstance.record = record;

				if (
					_this3.cached &&
					itemInstance.cached &&
					itemInstance.cached.record &&
					itemInstance.cached.record.data == record.data &&
					!itemInstance.childStateDirty
				) {
					instances.push(itemInstance);
					itemInstance.shouldUpdate = false;
				} else if (itemInstance.scheduleExploreIfVisible(context)) instances.push(itemInstance);

				var selected = isSelected(record.data, record.index);
				if (itemInstance.selected != selected) {
					itemInstance.selected = selected;
					//itemInstance.markShouldUpdate(context);
				}
			} else if (record.type == "group-header" && record.grouping.header) {
				var itemInstance = instance.getChild(context, record.grouping.header, record.key, record.store);
				itemInstance.record = record;
				if (itemInstance.scheduleExploreIfVisible(context)) instances.push(itemInstance);
			} else if (record.type == "group-footer" && record.grouping.footer) {
				var itemInstance = instance.getChild(context, record.grouping.footer, record.key, record.store);
				itemInstance.record = record;
				if (itemInstance.scheduleExploreIfVisible(context)) instances.push(itemInstance);
			}
		});
		instance.instances = instances;
	};

	List.prototype.render = function render(context, instance, key) {
		var items = instance.instances.map(function(x) {
			return {
				instance: x,
				key: x.record.key,
				type: x.record.type,
				content: getContent(x.render(context))
			};
		});
		return VDOM.createElement(ListComponent, {
			key: key,
			instance: instance,
			items: items,
			selectable: !this.selection.isDummy || this.onItemClick
		});
	};

	List.prototype.groupBy = function groupBy(grouping) {
		var _this4 = this;

		if (grouping) {
			if (!isArray(grouping)) {
				if (isString(grouping) || (typeof grouping === "undefined" ? "undefined" : _typeof(grouping)) == "object")
					return this.groupBy([grouping]);
				throw new Error("DynamicGrouping should be an array of grouping objects");
			}

			grouping = grouping.map(function(g, i) {
				if (isString(g)) {
					var _key;

					return {
						key: ((_key = {}),
						(_key[g] = {
							bind: _this4.recordName + "." + g
						}),
						_key)
					};
				}
				return g;
			});
		}

		grouping.forEach(function(g) {
			if (g.header) g.header = Widget.create(g.header);

			if (g.footer) g.footer = Widget.create(g.footer);
		});

		this.adapter.groupBy(grouping);
		this.update();
	};

	return List;
})(Widget);

List.prototype.recordName = "$record";
List.prototype.indexName = "$index";
List.prototype.baseClass = "list";
List.prototype.focusable = true;
List.prototype.focused = false;
List.prototype.itemPad = true;
List.prototype.cached = false;
List.prototype.styled = true;

Widget.alias("list", List);

var ListComponent = (function(_VDOM$Component) {
	inherits(ListComponent, _VDOM$Component);

	function ListComponent(props) {
		classCallCheck(this, ListComponent);

		var _this5 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		var focused = props.instance.widget.focused;

		_this5.state = {
			cursor: focused && props.selectable ? 0 : -1,
			focused: focused
		};
		return _this5;
	}

	ListComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
		return props.instance.shouldUpdate || state != this.state;
	};

	ListComponent.prototype.componentDidMount = function componentDidMount() {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.pipeKeyDown) instance.invoke("pipeKeyDown", this.handleKeyDown.bind(this), instance);
	};

	ListComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		this.setState({
			cursor: Math.max(Math.min(this.state.cursor, props.items.length - 1), this.state.focused ? 0 : -1)
		});
	};

	ListComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		var instance = this.props.instance;
		var widget = instance.widget;

		offFocusOut(this);
		if (widget.pipeKeyDown) instance.invoke("pipeKeyDown", null, instance);
	};

	ListComponent.prototype.render = function render() {
		var _this6 = this;

		var _props = this.props,
			instance = _props.instance,
			items = _props.items,
			selectable = _props.selectable;
		var data = instance.data,
			widget = instance.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var itemStyle = CSS.parseStyle(data.itemStyle);
		this.cursorChildIndex = [];
		var cursorIndex = 0;

		var children =
			items.length > 0 &&
			items.map(function(x, i) {
				var _x$instance = x.instance,
					data = _x$instance.data,
					selected = _x$instance.selected;

				var className = void 0;

				if (x.type == "data") {
					var ind = cursorIndex++,
						onDblClick = void 0;

					_this6.cursorChildIndex.push(i);
					className = CSS.element(baseClass, "item", {
						selected: selected,
						cursor: ind == _this6.state.cursor,
						pad: widget.itemPad
					});

					if (widget.onItemDoubleClick)
						onDblClick = function onDblClick(e) {
							instance.invoke("onItemDoubleClick", e, x.instance);
						};

					return VDOM.createElement(
						"li",
						{
							key: x.key,
							className: CSS.expand(className, data.classNames),
							style: itemStyle,
							onClick: function onClick(e) {
								return _this6.handleItemClick(e, x.instance);
							},
							onDoubleClick: onDblClick,
							onMouseEnter: function onMouseEnter(e) {
								_this6.moveCursor(ind);
							}
						},
						x.content
					);
				} else {
					return VDOM.createElement(
						"li",
						{
							key: x.key,
							className: CSS.element(baseClass, x.type)
						},
						x.content
					);
				}
			});

		if (!children && data.emptyText) {
			children = VDOM.createElement("li", { className: CSS.element(baseClass, "empty-text") }, data.emptyText);
		}

		return VDOM.createElement(
			"ul",
			{
				ref: function ref(el) {
					_this6.el = el;
				},
				className: CSS.expand(data.classNames, CSS.state({ focused: this.state.focused })),
				style: data.style,
				tabIndex: widget.focusable && selectable && items.length > 0 ? 0 : null,
				onMouseDown: function onMouseDown(e) {
					return preventFocusOnTouch(e);
				},
				onKeyDown: this.handleKeyDown.bind(this),
				onMouseLeave: this.handleMouseLeave.bind(this),
				onFocus: this.onFocus.bind(this),
				onBlur: this.onBlur.bind(this)
			},
			children
		);
	};

	ListComponent.prototype.moveCursor = function moveCursor(index, focused, scrollIntoView) {
		var _this7 = this;

		if (!this.props.selectable) return;

		if (focused != null && this.state.focused != focused)
			this.setState({
				focused: focused || this.props.instance.widget.focused
			});

		this.setState(
			{
				cursor: index
			},
			function() {
				if (scrollIntoView) {
					var item = _this7.el.children[_this7.cursorChildIndex[index]];
					scrollElementIntoView(item);
				}
			}
		);
	};

	ListComponent.prototype.showCursor = function showCursor(focused) {
		if (this.state.cursor == -1) {
			var firstSelected = this.props.items.findIndex(function(x) {
				return x.instance.selected;
			});
			this.moveCursor(firstSelected != -1 ? firstSelected : 0, focused);
		}
	};

	ListComponent.prototype.onFocus = function onFocus() {
		var _this8 = this;

		FocusManager.nudge();
		this.showCursor(true);

		var widget = this.props.instance.widget;

		if (!widget.focused)
			oneFocusOut(this, this.el, function() {
				_this8.moveCursor(-1, false);
			});

		this.setState({
			focused: true
		});
	};

	ListComponent.prototype.onBlur = function onBlur() {
		FocusManager.nudge();
	};

	ListComponent.prototype.handleMouseLeave = function handleMouseLeave() {
		if (!this.state.focused) this.moveCursor(-1);
	};

	ListComponent.prototype.handleItemClick = function handleItemClick(e, itemInstance) {
		e.stopPropagation();

		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onItemClick && instance.invoke("onItemClick", e, itemInstance) === false) return;

		if (!this.props.selectable) return;

		var store = itemInstance.store,
			record = itemInstance.record;
		var data = record.data,
			index = record.index;

		widget.selection.select(store, data, index, {
			toggle: e.ctrlKey
		});
	};

	ListComponent.prototype.handleKeyDown = function handleKeyDown(e) {
		var _props2 = this.props,
			instance = _props2.instance,
			items = _props2.items;

		if (this.onKeyDown && instance.invoke("onKeyDown", e, instance) === false) return;

		switch (e.keyCode) {
			case KeyCode.enter:
				var item = items[this.cursorChildIndex[this.state.cursor]];
				if (item) this.handleItemClick(e, item.instance);
				break;

			case KeyCode.down:
				if (this.state.cursor + 1 < this.cursorChildIndex.length) {
					this.moveCursor(this.state.cursor + 1, true, true);
					e.stopPropagation();
					e.preventDefault();
				}
				break;

			case KeyCode.up:
				if (this.state.cursor > 0) {
					this.moveCursor(this.state.cursor - 1, true, true);
					e.stopPropagation();
					e.preventDefault();
				}
				break;
		}
	};

	return ListComponent;
})(VDOM.Component);

var Sandbox = (function(_PureContainer) {
	inherits(Sandbox, _PureContainer);

	function Sandbox() {
		classCallCheck(this, Sandbox);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	Sandbox.prototype.init = function init() {
		if (this.recordAlias) this.recordName = this.recordAlias;

		if (this.accessKey) this.key = this.accessKey;

		this.storageBinding = Binding.get(this.storage.bind);
		_PureContainer.prototype.init.call(this);
	};

	Sandbox.prototype.initInstance = function initInstance(context, instance) {
		instance.store = new ExposedValueView({
			store: instance.store,
			containerBinding: this.storageBinding,
			key: null,
			recordName: this.recordName,
			immutable: this.immutable
		});
		instance.setStore = function(store) {
			instance.store.setStore(store);
		};
	};

	Sandbox.prototype.declareData = function declareData() {
		var _PureContainer$protot;

		(_PureContainer$protot = _PureContainer.prototype.declareData).call.apply(
			_PureContainer$protot,
			[
				this,
				{
					storage: undefined,
					key: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Sandbox.prototype.prepareData = function prepareData(context, instance) {
		var store = instance.store,
			data = instance.data;

		if (store.getKey() !== data.key) {
			instance.store = new ExposedValueView({
				store: store,
				containerBinding: this.storageBinding,
				key: data.key,
				recordName: this.recordName,
				immutable: this.immutable
			});

			//when navigating to a page using the same widget tree as the previous page
			//everything needs to be reinstantiated, e.g. user/1 => user/2
			instance.clearChildrenCache();
		}
		_PureContainer.prototype.prepareData.call(this, context, instance);
	};

	return Sandbox;
})(PureContainer);

Sandbox.prototype.recordName = "$page";
Sandbox.prototype.immutable = false;

Widget.alias("sandbox", Sandbox);

var CxCredit = (function(_HtmlElement) {
	inherits(CxCredit, _HtmlElement);

	function CxCredit() {
		classCallCheck(this, CxCredit);
		return possibleConstructorReturn(this, _HtmlElement.apply(this, arguments));
	}

	CxCredit.prototype.init = function init() {
		this.tooltip = {
			mouseTrap: true,
			title: "Credits",
			items: {
				$type: HtmlElement,
				tag: "div",
				ws: true,
				jsxAttributes: ["ws"],
				children: [
					"\n               User interface of this project is implemented using the CxJS framework.\n               For more information about CxJS, please visit\n               ",
					{
						$type: HtmlElement,
						tag: "a",
						href: "https://cxjs.io/",
						target: "_blank",
						jsxAttributes: ["href", "target"],
						children: ["the CxJS homepage"]
					},
					".\n            "
				]
			}
		};
		_HtmlElement.prototype.init.call(this);
	};

	CxCredit.prototype.attachProps = function attachProps(context, instance, props) {
		props.children = Icon.render("cx", {
			className: this.CSS.element(this.baseClass, "icon")
		});
	};

	return CxCredit;
})(HtmlElement);

CxCredit.prototype.baseClass = "cxcredit";
CxCredit.prototype.tag = "div";

Widget.alias("cx-credit", CxCredit);

var Heading = (function(_HtmlElement) {
	inherits(Heading, _HtmlElement);

	function Heading() {
		classCallCheck(this, Heading);
		return possibleConstructorReturn(this, _HtmlElement.apply(this, arguments));
	}

	Heading.prototype.init = function init() {
		this.tag = "h" + this.level;
		_HtmlElement.prototype.init.call(this);
	};

	Heading.prototype.prepareData = function prepareData(context, instance) {
		var _babelHelpers$extends;

		var data = instance.data;

		data.stateMods = _extends(
			{},
			data.stateMods,
			((_babelHelpers$extends = {}), (_babelHelpers$extends["level-" + this.level] = true), _babelHelpers$extends)
		);
		_HtmlElement.prototype.prepareData.call(this, context, instance);
	};

	Heading.prototype.isValidHtmlAttribute = function isValidHtmlAttribute(attrName) {
		switch (attrName) {
			case "level":
				return false;

			default:
				return _HtmlElement.prototype.isValidHtmlAttribute.call(this, attrName);
		}
	};

	return Heading;
})(HtmlElement);

Heading.prototype.level = 3;
Heading.prototype.baseClass = "heading";

var Section = (function(_PureContainer) {
	inherits(Section, _PureContainer);

	function Section() {
		classCallCheck(this, Section);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	Section.prototype.init = function init() {
		if (isString(this.headerStyle)) this.headerStyle = parseStyle(this.headerStyle);

		if (isString(this.footerStyle)) this.footerStyle = parseStyle(this.footerStyle);

		if (isString(this.bodyStyle)) this.bodyStyle = parseStyle(this.bodyStyle);

		_PureContainer.prototype.init.call(this);
	};

	Section.prototype.add = function add(item) {
		var _PureContainer$protot;

		if (item && item.putInto == "header")
			this.header = _extends({}, item, {
				putInto: null
			});
		else if (item && item.putInto == "footer")
			this.footer = _extends({}, item, {
				putInto: null
			});
		else
			(_PureContainer$protot = _PureContainer.prototype.add).call.apply(
				_PureContainer$protot,
				[this].concat(Array.prototype.slice.call(arguments))
			);
	};

	Section.prototype.declareData = function declareData() {
		return _PureContainer.prototype.declareData.call(this, {
			id: undefined,
			headerStyle: { structured: true },
			headerClass: { structured: true },
			bodyStyle: { structured: true },
			bodyClass: { structured: true },
			footerStyle: { structured: true },
			footerClass: { structured: true }
		});
	};

	Section.prototype.initComponents = function initComponents() {
		_PureContainer.prototype.initComponents.call(this, {
			header: this.getHeader(),
			footer: this.getFooter()
		});
	};

	Section.prototype.getHeader = function getHeader() {
		if (this.title)
			return Widget.create(Heading, {
				text: this.title,
				level: this.hLevel
			});

		if (this.header) return Heading.create(this.header);

		return null;
	};

	Section.prototype.getFooter = function getFooter() {
		if (this.footer) return Widget.create(this.footer);

		return null;
	};

	Section.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.stateMods = _extends({}, data.stateMods, {
			pad: this.pad
		});
		_PureContainer.prototype.prepareData.call(this, context, instance);
	};

	Section.prototype.initInstance = function initInstance(context, instance) {
		instance.eventHandlers = instance.getJsxEventProps();
		_PureContainer.prototype.initInstance.call(this, context, instance);
	};

	Section.prototype.render = function render(context, instance, key) {
		var data = instance.data,
			components = instance.components,
			eventHandlers = instance.eventHandlers;

		var header = void 0,
			footer = void 0;
		var CSS = this.CSS,
			baseClass = this.baseClass;

		if (components.header) {
			header = VDOM.createElement(
				"header",
				{
					className: CSS.expand(CSS.element(baseClass, "header"), data.headerClass),
					style: data.headerStyle
				},
				getContent(components.header.render(context))
			);
		}

		if (components.footer) {
			footer = VDOM.createElement(
				"footer",
				{
					className: CSS.expand(CSS.element(baseClass, "footer"), data.footerClass),
					style: data.footerStyle
				},
				getContent(components.footer.render(context))
			);
		}

		return VDOM.createElement(
			"section",
			_extends(
				{
					key: key,
					className: data.classNames,
					style: data.style,
					id: data.id
				},
				eventHandlers
			),
			header,
			VDOM.createElement(
				"div",
				{ className: CSS.expand(CSS.element(this.baseClass, "body"), data.bodyClass), style: data.bodyStyle },
				this.renderChildren(context, instance)
			),
			footer
		);
	};

	return Section;
})(PureContainer);

Section.prototype.styled = true;
Section.prototype.pad = true;
Section.prototype.baseClass = "section";
Section.prototype.hLevel = 3;

var FlexBox = (function(_PureContainer) {
	inherits(FlexBox, _PureContainer);

	function FlexBox() {
		classCallCheck(this, FlexBox);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	FlexBox.prototype.init = function init() {
		if (this.padding) this.pad = this.padding;

		if (this.hpadding) this.hpad = this.hpadding;

		if (this.vpadding) this.vpad = this.vpadding;

		this.hpad = isUndefined(this.hpad) ? this.pad : this.hpad;
		this.vpad = isUndefined(this.vpad) ? this.pad : this.hpad;

		if (this.hpad === true) this.hpad = "medium";

		if (this.vpad === true) this.vpad = "medium";

		this.hspacing = isUndefined(this.hspacing) ? this.spacing : this.hspacing;
		this.vspacing = isUndefined(this.vspacing) ? this.spacing : this.vspacing;

		if (this.hspacing === true) this.hspacing = "medium";

		if (this.vspacing === true) this.vspacing = "medium";

		_PureContainer.prototype.init.call(this);
	};

	FlexBox.prototype.initInstance = function initInstance(context, instance) {
		instance.eventHandlers = instance.getJsxEventProps();
		_PureContainer.prototype.initInstance.call(this, context, instance);
	};

	FlexBox.prototype.prepareCSS = function prepareCSS(context, instance) {
		var _babelHelpers$extends;

		var data = instance.data;

		data.stateMods = _extends(
			{},
			data.stateMods,
			((_babelHelpers$extends = {}),
			(_babelHelpers$extends[this.hpad + "-hpad"] = this.hpad),
			(_babelHelpers$extends[this.vpad + "-vpad"] = this.vpad),
			_babelHelpers$extends)
		);
		_PureContainer.prototype.prepareCSS.call(this, context, instance);
	};

	FlexBox.prototype.render = function render(context, instance, key) {
		var _flexboxMods;

		var data = instance.data,
			eventHandlers = instance.eventHandlers;
		var CSS = this.CSS,
			baseClass = this.baseClass;

		var flexboxMods = ((_flexboxMods = {}),
		(_flexboxMods[this.hspacing + "-hspacing"] = this.hspacing),
		(_flexboxMods[this.vspacing + "-vspacing"] = this.vspacing),
		(_flexboxMods["align-" + this.align] = this.align),
		(_flexboxMods["justify-" + this.justify] = this.justify),
		(_flexboxMods.wrap = this.wrap),
		(_flexboxMods["target-" + this.target] = true),
		(_flexboxMods[this.direction] = true),
		_flexboxMods);

		return VDOM.createElement(
			"div",
			_extends({ key: key, className: data.classNames, style: data.style }, eventHandlers),
			VDOM.createElement(
				"div",
				{ className: CSS.element(baseClass, "flexbox", flexboxMods) },
				this.renderChildren(context, instance)
			)
		);
	};

	return FlexBox;
})(PureContainer);

FlexBox.prototype.baseClass = "flexbox";
FlexBox.prototype.styled = true;
FlexBox.prototype.direction = "row";
FlexBox.prototype.spacing = false;
FlexBox.prototype.hspacing = undefined;
FlexBox.prototype.vspacing = undefined;
FlexBox.prototype.pad = false;
FlexBox.prototype.hpad = undefined;
FlexBox.prototype.vpad = undefined;
FlexBox.prototype.wrap = false;
FlexBox.prototype.align = false;
FlexBox.prototype.justify = false;
FlexBox.prototype.target = "any";

var FlexRow = (function(_FlexBox) {
	inherits(FlexRow, _FlexBox);

	function FlexRow() {
		classCallCheck(this, FlexRow);
		return possibleConstructorReturn(this, _FlexBox.apply(this, arguments));
	}

	return FlexRow;
})(FlexBox);

var FlexCol = (function(_FlexBox2) {
	inherits(FlexCol, _FlexBox2);

	function FlexCol() {
		classCallCheck(this, FlexCol);
		return possibleConstructorReturn(this, _FlexBox2.apply(this, arguments));
	}

	return FlexCol;
})(FlexBox);
FlexCol.prototype.direction = "column";

var ProgressBar = (function(_Widget) {
	inherits(ProgressBar, _Widget);

	function ProgressBar() {
		classCallCheck(this, ProgressBar);
		return possibleConstructorReturn(this, _Widget.apply(this, arguments));
	}

	ProgressBar.prototype.declareData = function declareData() {
		var _Widget$prototype$dec;

		return (_Widget$prototype$dec = _Widget.prototype.declareData).call.apply(
			_Widget$prototype$dec,
			[
				this,
				{
					disabled: undefined,
					text: undefined,
					value: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	ProgressBar.prototype.render = function render(context, instance, key) {
		var widget = instance.widget,
			data = instance.data;
		var text = data.text,
			value = data.value,
			disabled = data.disabled;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		if (!isNumber(value)) value = 0;

		return VDOM.createElement(
			"div",
			{
				key: key,
				className: CSS.expand(
					data.classNames,
					CSS.state({
						disabled: disabled
					})
				),
				style: data.style
			},
			VDOM.createElement("div", {
				className: CSS.element(this.baseClass, "indicator"),
				style: {
					width: (value > 1 ? 1 : value < 0 ? 0 : value) * 100 + "%"
				}
			}),
			VDOM.createElement("div", { className: CSS.element(this.baseClass, "label") }, text)
		);
	};

	return ProgressBar;
})(Widget);

ProgressBar.prototype.styled = true;
ProgressBar.prototype.disabled = false;
ProgressBar.prototype.baseClass = "progressbar";

function captureMouse(e, onMouseMove, onMouseUp, captureData, cursor) {
	var surface = document.createElement("div");
	surface.className = "cxb-mousecapture";
	if (cursor) surface.style.cursor = cursor;

	document.body.appendChild(surface);

	if (surface.setCapture) {
		e.preventDefault();
		surface.setCapture(true);
	}

	var move = function move(e) {
		batchUpdates(function() {
			if (onMouseMove) onMouseMove(e, captureData);
			e.stopPropagation();
			e.preventDefault(); //disable text selection
		});
	};

	var end = function end(e) {
		batchUpdates(function() {
			if (surface.releaseCapture) surface.releaseCapture();
			surface.style.display = "none";
			try {
				if (onMouseUp) onMouseUp(e, captureData);
			} finally {
				surface.removeEventListener("mousemove", move);
				surface.removeEventListener("mouseup", end);
				document.body.removeChild(surface);
			}
		});
	};

	surface.addEventListener("mousemove", move);
	surface.addEventListener("mouseup", end);

	e.stopPropagation();
}

function captureMouseOrTouch(e, onMouseMove, onMouseUp, captureData, cursor) {
	if (e.type.indexOf("touch") == 0) {
		var el = e.currentTarget;

		var move = function move(e) {
			batchUpdates(function() {
				if (onMouseMove) onMouseMove(e, captureData);
				e.preventDefault();
			});
		};

		var end = function end(e) {
			batchUpdates(function() {
				el.removeEventListener("touchmove", move);
				el.removeEventListener("touchend", end);

				if (onMouseUp) onMouseUp(e);

				e.preventDefault();
			});
		};

		el.addEventListener("touchmove", move);
		el.addEventListener("touchend", end);

		e.stopPropagation();
	} else captureMouse(e, onMouseMove, onMouseUp, captureData, cursor || e.target.style.cursor);
}

function getCursorPos(e) {
	var p = (e.touches && e.touches[0]) || e;
	return {
		clientX: p.clientX,
		clientY: p.clientY
	};
}

/*
 Features:
 - renders itself on top of other elements
 - provide resizing capabilities
 - adds positioning hook and ability to position itself in the center of the page
 - provides header, body, and footer elements and updates body's height on resize (move this to Window)
 - stop mouse events from bubbling to parents, but allow keystrokes
 */

var Overlay = (function(_PureContainer) {
	inherits(Overlay, _PureContainer);

	function Overlay() {
		classCallCheck(this, Overlay);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	Overlay.prototype.declareData = function declareData() {
		var _PureContainer$protot;

		return (_PureContainer$protot = _PureContainer.prototype.declareData).call.apply(
			_PureContainer$protot,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					shadowStyle: {
						structured: true
					},
					resizable: undefined,
					draggable: undefined
				}
			])
		);
	};

	Overlay.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.stateMods = _extends({}, data.stateMods, {
			inline: this.inline,
			modal: this.modal,
			pad: this.pad,
			resizable: data.resizable,
			draggable: data.draggable,
			animate: this.animate
		});

		_PureContainer.prototype.prepareData.call(this, context, instance);
	};

	Overlay.prototype.initInstance = function initInstance(context, instance) {
		if (this.visible && this.visible.bind) {
			instance.dismiss = function() {
				if (instance.onBeforeDismiss && instance.onBeforeDismiss() === false) return;
				instance.set("visible", false);
			};
		}
	};

	Overlay.prototype.explore = function explore(context, instance) {
		if (context.options.dismiss) instance.dismiss = context.options.dismiss;

		if (instance.dismiss) {
			context.push(
				"parentOptions",
				_extends({}, context.parentOptions, {
					dismiss: instance.dismiss
				})
			);
		}

		if (instance.cache("dismiss", instance.dismiss)) instance.markShouldUpdate(context);

		_PureContainer.prototype.explore.call(this, context, instance);
	};

	Overlay.prototype.exploreCleanup = function exploreCleanup(context, instance) {
		if (instance.dismiss) context.pop("parentOptions");
	};

	Overlay.prototype.render = function render(context, instance, key) {
		return VDOM.createElement(
			OverlayComponent,
			{
				key: key,
				instance: instance,
				subscribeToBeforeDismiss: context.options.subscribeToBeforeDismiss,
				parentEl: context.options.parentEl
			},
			this.renderContents(context, instance)
		);
	};

	Overlay.prototype.renderContents = function renderContents(context, instance) {
		return this.renderChildren(context, instance);
	};

	Overlay.prototype.overlayDidMount = function overlayDidMount(instance, component) {
		if (this.center) {
			var el = component.el;

			el.style.left = (window.innerWidth - el.offsetWidth) / 2 + "px";
			el.style.top = (window.innerHeight - el.offsetHeight) / 2 + "px";
		}
	};

	Overlay.prototype.overlayDidUpdate = function overlayDidUpdate(instance, component) {};

	Overlay.prototype.overlayWillUnmount = function overlayWillUnmount(instance, component) {};

	Overlay.prototype.handleFocusOut = function handleFocusOut(instance, component) {
		if (this.onFocusOut) instance.invoke("onFocusOut", instance, component);

		if (this.dismissOnFocusOut && instance.dismiss) instance.dismiss();
	};

	Overlay.prototype.handleKeyDown = function handleKeyDown(e, instance, component) {
		if (this.onKeyDown) instance.invoke("onKeyDown", e, instance, component);
	};

	Overlay.prototype.handleMouseLeave = function handleMouseLeave(instance, component) {
		if (this.onMouseLeave) instance.invoke("onMouseLeave", instance, component);
	};

	Overlay.prototype.handleMouseEnter = function handleMouseEnter(instance, component) {
		if (this.onMouseEnter) instance.invoke("onMouseEnter", instance, component);
	};

	Overlay.prototype.containerFactory = function containerFactory() {
		var el = document.createElement("div");
		document.body.appendChild(el);
		el.style.position = "absolute";
		if (this.containerStyle) Object.assign(el.style, parseStyle(this.containerStyle));
		return el;
	};

	Overlay.prototype.open = function open(storeOrInstance, options) {
		if (!this.initialized) this.init();

		var el = this.containerFactory();
		el.style.display = "hidden";

		var beforeDismiss = void 0,
			stop = void 0;

		options = _extends(
			{
				destroyDelay: this.destroyDelay,
				removeParentDOMElement: true
			},
			options,
			{
				parentEl: el,
				dismiss: function dismiss() {
					if (beforeDismiss && beforeDismiss() === false) return;
					stop();
					beforeDismiss = null;
				},
				subscribeToBeforeDismiss: function subscribeToBeforeDismiss(cb) {
					beforeDismiss = cb;
				}
			}
		);
		options.name = options.name || "overlay";
		stop = startAppLoop(el, storeOrInstance, this, options);
		return options.dismiss;
	};

	return Overlay;
})(PureContainer);

Overlay.prototype.styled = true;
Overlay.prototype.baseClass = "overlay";
Overlay.prototype.resizable = false;
Overlay.prototype.resizeWidth = 7;
Overlay.prototype.center = false;
Overlay.prototype.modal = false;
Overlay.prototype.backdrop = false;
Overlay.prototype.inline = false;
Overlay.prototype.autoFocus = false;
Overlay.prototype.autoFocusFirstChild = false;
Overlay.prototype.animate = false;
Overlay.prototype.draggable = false;
Overlay.prototype.destroyDelay = 0;
Overlay.prototype.dismissOnFocusOut = false;
Overlay.prototype.focusable = false;
Overlay.prototype.containerStyle = null;

Widget.alias("overlay", Overlay);

//TODO: all el related logic should be moved here

var OverlayContent = (function(_VDOM$Component) {
	inherits(OverlayContent, _VDOM$Component);

	function OverlayContent() {
		classCallCheck(this, OverlayContent);
		return possibleConstructorReturn(this, _VDOM$Component.apply(this, arguments));
	}

	OverlayContent.prototype.render = function render() {
		return VDOM.createElement(
			"div",
			{
				ref: this.props.onRef,
				className: this.props.className,
				style: this.props.style,
				tabIndex: this.props.tabIndex,
				onFocus: this.props.onFocus,
				onBlur: this.props.onBlur,
				onKeyDown: this.props.onKeyDown,
				onMouseMove: this.props.onMouseMove,
				onMouseUp: this.props.onMouseUp,
				onMouseDown: this.props.onMouseDown,
				onTouchStart: this.props.onTouchStart,
				onMouseEnter: this.props.onMouseEnter,
				onMouseLeave: this.props.onMouseLeave,
				onClick: this.props.onClick
			},
			this.props.children
		);
	};

	OverlayContent.prototype.componentDidUpdate = function componentDidUpdate() {
		this.props.onDidUpdate();
	};

	return OverlayContent;
})(VDOM.Component);

//TODO: This should be called OverlayPortal

var OverlayComponent = (function(_VDOM$Component2) {
	inherits(OverlayComponent, _VDOM$Component2);

	function OverlayComponent(props) {
		classCallCheck(this, OverlayComponent);

		var _this3 = possibleConstructorReturn(this, _VDOM$Component2.call(this, props));

		_this3.state = {};
		_this3.customStyle = {};
		return _this3;
	}

	OverlayComponent.prototype.render = function render() {
		var _props = this.props,
			instance = _props.instance,
			parentEl = _props.parentEl;
		var widget = instance.widget;

		if (widget.inline || parentEl) return this.renderOverlay();

		if (!this.containerEl) {
			this.ownedEl = widget.containerFactory();
			this.ownedEl.style.display = "hidden";
			this.containerEl = this.ownedEl;
		}

		if (VDOM.DOM.createPortal) return VDOM.DOM.createPortal(this.renderOverlay(), this.containerEl);

		//rendered in componentDidUpdate if portals are not supported
		return null;
	};

	OverlayComponent.prototype.renderOverlay = function renderOverlay() {
		var _this4 = this;

		var _props$instance = this.props.instance,
			widget = _props$instance.widget,
			data = _props$instance.data;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		if (!this.onOverlayRef)
			this.onOverlayRef = function(el) {
				_this4.el = el;
			};

		var content = VDOM.createElement(
			OverlayContent,
			{
				onRef: this.onOverlayRef,
				className: data.classNames,
				style: data.style,
				tabIndex: widget.focusable ? 0 : null,
				onFocus: this.onFocus.bind(this),
				onBlur: this.onBlur.bind(this),
				onKeyDown: this.onKeyDown.bind(this),
				onMouseMove: this.onMouseMove.bind(this),
				onMouseUp: this.onMouseUp.bind(this),
				onMouseDown: this.onMouseDown.bind(this),
				onTouchStart: this.onMouseDown.bind(this),
				onMouseEnter: this.onMouseEnter.bind(this),
				onMouseLeave: this.onMouseLeave.bind(this),
				onClick: this.onClick.bind(this),
				onDidUpdate: this.overlayDidUpdate.bind(this)
			},
			widget.modal ||
				(widget.backdrop &&
					VDOM.createElement("div", {
						key: "backdrop",
						className: CSS.element(baseClass, "modal-backdrop"),
						onClick: this.onBackdropClick.bind(this)
					})),
			this.renderOverlayBody()
		);

		var result = content;

		if (widget.modal || widget.backdrop) {
			result = VDOM.createElement(
				"div",
				{
					key: "shadow",
					ref: function ref(el) {
						_this4.shadowEl = el;
					},
					className: CSS.element(baseClass, "shadow", {
						animated: this.state.animated,
						"animate-enter": this.state.animated && !this.dismissed,
						animate: widget.animate
					}),
					style: parseStyle(data.shadowStyle)
				},
				content
			);
		}

		return result;
	};

	OverlayComponent.prototype.renderOverlayBody = function renderOverlayBody() {
		return this.props.children;
	};

	OverlayComponent.prototype.onFocus = function onFocus() {
		FocusManager.nudge();
		this.onFocusIn();
		if (this.el) oneFocusOut(this, this.el, this.onFocusOut.bind(this));
	};

	OverlayComponent.prototype.onBlur = function onBlur() {
		FocusManager.nudge();
	};

	OverlayComponent.prototype.onFocusIn = function onFocusIn() {};

	OverlayComponent.prototype.onFocusOut = function onFocusOut() {
		var widget = this.props.instance.widget;

		widget.handleFocusOut(this.props.instance, this);
	};

	OverlayComponent.prototype.onMouseEnter = function onMouseEnter(e) {
		var widget = this.props.instance.widget;

		widget.handleMouseEnter(this.props.instance, this);
	};

	OverlayComponent.prototype.onMouseLeave = function onMouseLeave(e) {
		var widget = this.props.instance.widget;

		widget.handleMouseLeave(this.props.instance, this);
	};

	OverlayComponent.prototype.onClick = function onClick(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onClick) instance.invoke("onClick", e, instance, this);
	};

	OverlayComponent.prototype.onKeyDown = function onKeyDown(e) {
		var widget = this.props.instance.widget;

		widget.handleKeyDown(e, this.props.instance, this);
	};

	OverlayComponent.prototype.getResizePrefix = function getResizePrefix(e) {
		var _props$instance2 = this.props.instance,
			widget = _props$instance2.widget,
			data = _props$instance2.data;

		if (!data.resizable) return "";
		var cursor = this.getCursorPos(e);
		var bounds = this.el.getBoundingClientRect();
		var leftMargin = cursor.clientX - bounds.left;
		var rightMargin = bounds.right - cursor.clientX;
		var topMargin = cursor.clientY - bounds.top;
		var bottomMargin = bounds.bottom - cursor.clientY;
		var prefix = "";

		if (topMargin >= 0 && topMargin < widget.resizeWidth) prefix += "n";
		else if (bottomMargin >= 0 && bottomMargin < widget.resizeWidth) prefix += "s";

		if (leftMargin >= 0 && leftMargin < widget.resizeWidth) prefix += "w";
		else if (rightMargin >= 0 && rightMargin < widget.resizeWidth) prefix += "e";
		return prefix;
	};

	OverlayComponent.prototype.onMouseDown = function onMouseDown(e) {
		var data = this.props.instance.data;

		var prefix = this.getResizePrefix(e);
		if (prefix) {
			//e.preventDefault();
			e.stopPropagation();
			var rect = this.el.getBoundingClientRect();
			var cursor = this.getCursorPos(e);
			var captureData = {
				prefix: prefix,
				dl: cursor.clientX - rect.left,
				dt: cursor.clientY - rect.top,
				dr: cursor.clientX - rect.right,
				db: cursor.clientY - rect.bottom,
				rect: rect
			};
			captureMouseOrTouch(e, this.onMouseMove.bind(this), null, captureData, prefix + "-resize");
		} else if (data.draggable) {
			this.startMoveOperation(e);
			e.stopPropagation();
		}

		e.stopPropagation();
	};

	OverlayComponent.prototype.onBackdropClick = function onBackdropClick(e) {
		e.stopPropagation();
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onBackdropClick) instance.invoke("onBackdropClick", e, instance);

		if (widget.backdrop) {
			if (instance.dismiss) instance.dismiss();
		}
	};

	OverlayComponent.prototype.onMouseUp = function onMouseUp(e) {
		e.stopPropagation();
	};

	OverlayComponent.prototype.onMouseMove = function onMouseMove(e, captureData) {
		if (captureData && captureData.prefix) {
			var prefix = captureData.prefix,
				rect = captureData.rect,
				dl = captureData.dl,
				dt = captureData.dt,
				dr = captureData.dr,
				db = captureData.db;

			var cursor = this.getCursorPos(e);

			if (prefix.indexOf("w") != -1)
				this.setCustomStyle({
					left: cursor.clientX - dl + "px",
					width: rect.right - cursor.clientX + dl + "px",
					right: "auto"
				});

			if (prefix.indexOf("n") != -1)
				this.setCustomStyle({
					top: cursor.clientY - dt + "px",
					height: rect.bottom - cursor.clientY + dt + "px",
					bottom: "auto"
				});

			if (prefix.indexOf("e") != -1)
				this.setCustomStyle({
					width: cursor.clientX - dr - rect.left + "px",
					left: rect.left + "px",
					right: "auto"
				});

			if (prefix.indexOf("s") != -1)
				this.setCustomStyle({
					height: cursor.clientY - db - rect.top + "px",
					top: rect.top + "px",
					bottom: "auto"
				});
		} else {
			var _prefix = this.getResizePrefix(e);
			this.setCustomStyle({
				cursor: _prefix ? _prefix + "-resize" : null
			});
		}
	};

	OverlayComponent.prototype.getCursorPos = function getCursorPos$$1(e) {
		var x = (e.touches && e.touches[0]) || e;
		return {
			clientX: x.clientX,
			clientY: x.clientY
		};
	};

	OverlayComponent.prototype.startMoveOperation = function startMoveOperation(e) {
		if (this.el && !this.getResizePrefix(e)) {
			e.stopPropagation();
			var rect = this.el.getBoundingClientRect();
			var cursor = this.getCursorPos(e);
			var data = {
				dx: cursor.clientX - rect.left,
				dy: cursor.clientY - rect.top
			};

			captureMouseOrTouch(e, this.onMove.bind(this), null, data, getComputedStyle(e.target).cursor);
		}
	};

	OverlayComponent.prototype.onMove = function onMove(e, data) {
		if (data) {
			var cursor = this.getCursorPos(e);
			e.preventDefault();
			this.setCustomStyle({
				left: cursor.clientX - data.dx + "px",
				top: cursor.clientY - data.dy + "px",
				right: "auto",
				bottom: "auto"
			});
		}
	};

	OverlayComponent.prototype.onBeforeDismiss = function onBeforeDismiss() {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.overlayWillDismiss && widget.overlayWillDismiss(instance, this) === false) return false;

		this.dismissed = true;

		//this.el might be null if visible is set to false
		if (this.el) {
			this.el.className = this.getOverlayCssClass();

			// if (widget.animate)
			//    this.setState({
			//       animated: false
			//    });
		}
		return true;
	};

	OverlayComponent.prototype.componentDidMount = function componentDidMount() {
		var _this5 = this;

		var _props2 = this.props,
			instance = _props2.instance,
			subscribeToBeforeDismiss = _props2.subscribeToBeforeDismiss,
			parentEl = _props2.parentEl;
		var widget = instance.widget;

		this.setZIndex(ZIndexManager.next());

		this.componentDidUpdate();
		widget.overlayDidMount(instance, this);

		if (this.containerEl) this.containerEl.style.display = null;
		else if (parentEl) parentEl.style.display = null;

		var childHasFocus = isSelfOrDescendant(this.el, document.activeElement);

		if (childHasFocus) oneFocusOut(this, this.el, this.onFocusOut.bind(this));
		else {
			if (!widget.autoFocusFirstChild || !FocusManager.focusFirstChild(this.el))
				if (widget.focusable && widget.autoFocus) FocusManager.focus(this.el);
		}

		instance.onBeforeDismiss = this.onBeforeDismiss.bind(this);

		if (subscribeToBeforeDismiss) {
			subscribeToBeforeDismiss(instance.onBeforeDismiss);
		}

		if (widget.animate) {
			setTimeout(function() {
				if (!_this5.unmounting)
					_this5.setState({
						animated: true
					});
			}, 0);
		}
	};

	OverlayComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		var _this6 = this;

		offFocusOut(this);
		this.unmounting = true;

		var widget = this.props.instance.widget;
		var baseClass = widget.baseClass,
			CSS = widget.CSS;

		// //we didn't have a chance to call onBeforeDismiss

		if (this.state.animated && this.el) {
			this.el.className = this.getOverlayCssClass();
			if (this.shadowEl)
				this.shadowEl.className = CSS.element(baseClass, "shadow", {
					animate: widget.animate,
					"animate-leave": true
				});
		}

		widget.overlayWillUnmount(this.props.instance, this);

		if (this.ownedEl) {
			setTimeout(function() {
				if (_this6.ownedEl.parentNode) _this6.ownedEl.parentNode.removeChild(_this6.ownedEl);
				_this6.ownedEl = null;
			}, widget.destroyDelay);
		}

		delete this.containerEl;
	};

	OverlayComponent.prototype.setZIndex = function setZIndex(zIndex) {
		if (this.shadowEl) this.shadowEl.style.zIndex = zIndex;
		this.setCustomStyle({
			zIndex: zIndex
		});
	};

	OverlayComponent.prototype.setCustomStyle = function setCustomStyle(style) {
		Object.assign(this.customStyle, style);
		if (this.el) Object.assign(this.el.style, this.customStyle);
	};

	OverlayComponent.prototype.getOverlayStyle = function getOverlayStyle() {
		var data = this.props.instance.data;

		return _extends({}, data.style, this.customStyle);
	};

	OverlayComponent.prototype.setCSSState = function setCSSState(mods) {
		var m = _extends({}, this.state.mods);
		var changed = false;
		for (var k in mods) {
			if (m[k] !== mods[k]) {
				m[k] = mods[k];
				changed = true;
			}
		}
		if (changed)
			this.setState({
				mods: mods
			});
	};

	OverlayComponent.prototype.getOverlayCssClass = function getOverlayCssClass() {
		var _props$instance3 = this.props.instance,
			data = _props$instance3.data,
			widget = _props$instance3.widget;
		var CSS = widget.CSS;

		return CSS.expand(
			data.classNames,
			CSS.state(
				_extends({}, this.state.mods, {
					animated: this.state.animated && !this.unmounting && !this.dismissed,
					"animate-enter": this.state.animated && !this.dismissed,
					"animate-leave": widget.animate && this.dismissed
				})
			)
		);
	};

	OverlayComponent.prototype.overlayDidUpdate = function overlayDidUpdate() {
		if (this.el && !this.dismissed) {
			var widget = this.props.instance.widget;

			widget.overlayDidUpdate(this.props.instance, this);
			this.el.className = this.getOverlayCssClass();
			Object.assign(this.el.style, this.getOverlayStyle());
		}
	};

	OverlayComponent.prototype.componentDidUpdate = function componentDidUpdate() {
		if (this.containerEl && !VDOM.DOM.createPortal) {
			VDOM.DOM.render(this.renderOverlay(), this.containerEl);
		}
		this.overlayDidUpdate();
	};

	return OverlayComponent;
})(VDOM.Component);

/*
 Dropdown specific features:
 - ability to position itself next to parent element
 - monitor scrollable parents and updates it's position
 */

var Dropdown = (function(_Overlay) {
	inherits(Dropdown, _Overlay);

	function Dropdown() {
		classCallCheck(this, Dropdown);
		return possibleConstructorReturn(this, _Overlay.apply(this, arguments));
	}

	Dropdown.prototype.declareData = function declareData() {
		var _Overlay$prototype$de;

		return (_Overlay$prototype$de = _Overlay.prototype.declareData).call.apply(
			_Overlay$prototype$de,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					placement: undefined
				}
			])
		);
	};

	Dropdown.prototype.initInstance = function initInstance(context, instance) {
		instance.positionChangeSubcribers = new SubscriberList();
		instance.mousePosition = this.mousePosition;
		_Overlay.prototype.initInstance.call(this, context, instance);
	};

	Dropdown.prototype.explore = function explore(context, instance) {
		var parentPositionChangeEvent = context.parentPositionChangeEvent;
		context.parentPositionChangeEvent = instance.positionChangeSubcribers;
		_Overlay.prototype.explore.call(this, context, instance);
		context.parentPositionChangeEvent = parentPositionChangeEvent;
	};

	Dropdown.prototype.overlayDidMount = function overlayDidMount(instance, component) {
		var _this2 = this;

		_Overlay.prototype.overlayDidMount.call(this, instance, component);
		var scrollableParents = (component.scrollableParents = [window]);
		component.updateDropdownPosition = function(e) {
			return _this2.updateDropdownPosition(instance, component);
		};

		var el = this.relatedElement.parentElement;
		while (el) {
			scrollableParents.push(el);
			el = el.parentElement;
		}
		scrollableParents.forEach(function(el) {
			el.addEventListener("scroll", component.updateDropdownPosition);
		});
		component.offResize = ResizeManager.subscribe(component.updateDropdownPosition);

		if (this.onDropdownDidMount) instance.invoke("onDropdownDidMount", instance, component);

		if (this.pipeValidateDropdownPosition)
			instance.invoke("pipeValidateDropdownPosition", component.updateDropdownPosition, instance);

		if (this.parentPositionChangeEvent)
			component.offParentPositionChange = this.parentPositionChangeEvent.subscribe(component.updateDropdownPosition);
	};

	Dropdown.prototype.overlayDidUpdate = function overlayDidUpdate(instance, component) {
		this.updateDropdownPosition(instance, component);
	};

	Dropdown.prototype.overlayWillUnmount = function overlayWillUnmount(instance, component) {
		var scrollableParents = component.scrollableParents;

		if (scrollableParents) {
			scrollableParents.forEach(function(el) {
				el.removeEventListener("scroll", component.updateDropdownPosition);
			});
			delete component.scrollableParents;
			delete component.updateDropdownPosition;
		}
		if (component.offResize) component.offResize();

		if (this.pipeValidateDropdownPosition) instance.invoke("pipeValidateDropdownPosition", null, instance);

		if (component.offParentPositionChange) component.offParentPositionChange();

		delete component.parentBounds;
	};

	Dropdown.prototype.updateDropdownPosition = function updateDropdownPosition(instance, component) {
		var el = component.el;
		var data = instance.data;

		var parentBounds = (component.parentBounds = this.relatedElement.getBoundingClientRect());

		if (this.trackMouse && instance.mousePosition) {
			parentBounds = {
				left: instance.mousePosition.x,
				right: instance.mousePosition.x,
				top: instance.mousePosition.y,
				bottom: instance.mousePosition.y
			};
		} else {
			var explode = this.pad && typeof this.elementExplode === "number" ? this.elementExplode : 0;
			parentBounds = {
				left: Math.round(parentBounds.left - explode),
				right: Math.round(parentBounds.right + explode),
				top: Math.round(parentBounds.top - explode),
				bottom: Math.round(parentBounds.bottom + explode)
			};
		}

		var style = {};
		if (this.matchWidth) style.minWidth = parentBounds.right - parentBounds.left + "px";

		var contentSize = this.measureNaturalDropdownSize(instance, component);

		var placement = this.findOptimalPlacement(contentSize, parentBounds, data.placement, component.lastPlacement);

		switch (this.positioning) {
			case "absolute":
				this.applyAbsolutePositioningPlacementStyles(style, placement, contentSize, parentBounds, el);
				break;

			case "auto":
				if (isTouchDevice())
					this.applyAbsolutePositioningPlacementStyles(style, placement, contentSize, parentBounds, el);
				else this.applyFixedPositioningPlacementStyles(style, placement, contentSize, parentBounds, el);
				break;

			default:
				this.applyFixedPositioningPlacementStyles(style, placement, contentSize, parentBounds, el);
				break;
		}

		component.setCustomStyle(style);
		this.setDirectionClass(component, placement);

		if (this.onDropdownPositionDidUpdate) instance.invoke("onDropdownPositionDidUpdate", instance, component);

		instance.positionChangeSubcribers.notify();
	};

	Dropdown.prototype.applyFixedPositioningPlacementStyles = function applyFixedPositioningPlacementStyles(
		style,
		placement,
		contentSize,
		rel,
		el
	) {
		var viewport = getViewportRect(this.screenPadding);
		var pad = this.screenPadding + "px";

		style.position = "fixed";

		switch (placement) {
			case "down":
			case "down-center":
				style.top = (this.cover ? rel.top : rel.bottom) + this.offset + "px";
				style.right = "auto";
				style.bottom = this.constrain && rel.bottom + this.offset + contentSize.height > viewport.bottom ? pad : "auto";
				style.left = Math.round((rel.left + rel.right - el.offsetWidth) / 2) + "px";
				break;

			case "down-right":
				style.top = (this.cover ? rel.top : rel.bottom) + this.offset + "px";
				style.right = "auto";
				style.left = rel.left + "px";
				style.bottom = this.constrain && rel.bottom + this.offset + contentSize.height > viewport.bottom ? pad : "auto";
				break;

			case "down-left":
				style.top = (this.cover ? rel.top : rel.bottom) + this.offset + "px";
				style.right = document.documentElement.offsetWidth - rel.right + "px";
				style.bottom = this.constrain && rel.bottom + this.offset + contentSize.height > viewport.bottom ? pad : "auto";
				style.left = "auto";
				break;

			case "up":
			case "up-center":
				style.top = this.constrain && rel.top - this.offset - contentSize.height < viewport.top ? pad : "auto";
				style.right = "auto";
				style.bottom = document.documentElement.offsetHeight - (this.cover ? rel.bottom : rel.top) + this.offset + "px";
				style.left = Math.round((rel.left + rel.right - el.offsetWidth) / 2) + "px";
				break;

			case "up-right":
				style.top = this.constrain && rel.top - this.offset - contentSize.height < viewport.top ? pad : "auto";
				style.right = "auto";
				style.bottom = document.documentElement.offsetHeight - (this.cover ? rel.bottom : rel.top) + this.offset + "px";
				style.left = rel.left + "px";
				break;

			case "up-left":
				style.top = this.constrain && rel.top - this.offset - contentSize.height < viewport.top ? pad : "auto";
				style.right = document.documentElement.offsetWidth - rel.right + "px";
				style.bottom = document.documentElement.offsetHeight - (this.cover ? rel.bottom : rel.top) + this.offset + "px";
				style.left = "auto";
				break;

			case "right":
			case "right-center":
				style.top = Math.round((rel.top + rel.bottom - el.offsetHeight) / 2) + "px";
				style.right = "auto";
				style.bottom = "auto";
				style.left = rel.right + this.offset + "px";
				break;

			case "right-down":
				style.top = rel.top + "px";
				style.right = "auto";
				style.bottom = "auto";
				style.left = rel.right + this.offset + "px";
				break;

			case "right-up":
				style.top = "auto";
				style.right = "auto";
				style.bottom = document.documentElement.offsetHeight - rel.bottom + "px";
				style.left = rel.right + this.offset + "px";
				break;

			case "left":
			case "left-center":
				style.top = Math.round((rel.top + rel.bottom - el.offsetHeight) / 2) + "px";
				style.right = document.documentElement.offsetWidth - rel.left + this.offset + "px";
				style.bottom = "auto";
				style.left = "auto";
				break;

			case "left-down":
				style.top = rel.top + "px";
				style.right = document.documentElement.offsetWidth - rel.left + this.offset + "px";
				style.bottom = "auto";
				style.left = "auto";
				break;

			case "left-up":
				style.top = "auto";
				style.right = document.documentElement.offsetWidth - rel.left + this.offset + "px";
				style.bottom = document.documentElement.offsetHeight - rel.bottom + "px";
				style.left = "auto";
				break;

			case "screen-center":
				var w = Math.min(contentSize.width, document.documentElement.offsetWidth - 2 * this.screenPadding);
				var h = Math.min(contentSize.height, document.documentElement.offsetHeight - 2 * this.screenPadding);
				style.top = Math.round((document.documentElement.offsetHeight - h) / 2) + "px";
				style.right = Math.round((document.documentElement.offsetWidth - w) / 2) + "px";
				style.bottom = Math.round((document.documentElement.offsetHeight - h) / 2) + "px";
				style.left = Math.round((document.documentElement.offsetWidth - w) / 2) + "px";
				break;
		}
	};

	Dropdown.prototype.applyAbsolutePositioningPlacementStyles = function applyAbsolutePositioningPlacementStyles(
		style,
		placement,
		contentSize,
		rel,
		el
	) {
		var viewport = getViewportRect(this.screenPadding);

		style.position = "absolute";

		switch (placement) {
			case "down":
			case "down-center":
				style.top = rel.bottom - rel.top + this.offset + "px";
				style.right = "auto";
				style.bottom =
					this.constrain && rel.bottom + this.offset + contentSize.height > viewport.bottom
						? rel.bottom + this.offset - viewport.bottom + "px"
						: "auto";
				style.left = Math.round((rel.right - rel.left - el.offsetWidth) / 2) + "px";
				break;

			case "down-right":
				style.top = rel.bottom - rel.top + this.offset + "px";
				style.right = "auto";
				style.left = "0";
				style.bottom =
					this.constrain && rel.bottom + this.offset + contentSize.height > viewport.bottom
						? rel.bottom + this.offset - viewport.bottom + "px"
						: "auto";
				break;

			case "down-left":
				style.top = rel.bottom - rel.top + this.offset + "px";
				style.right = "0";
				style.bottom =
					this.constrain && rel.bottom + this.offset + contentSize.height > viewport.bottom
						? rel.bottom + this.offset - viewport.bottom + "px"
						: "auto";
				style.left = "auto";
				break;

			case "up":
			case "up-center":
				style.top =
					this.constrain && rel.top - this.offset - contentSize.height < viewport.top
						? this.offset - rel.top + viewport.top + "px"
						: "auto";
				style.right = "auto";
				style.bottom = rel.bottom - rel.top - this.offset + "px";
				style.left = Math.round((rel.right - rel.left - el.offsetWidth) / 2) + "px";
				break;

			case "up-right":
				style.top =
					this.constrain && rel.top - this.offset - contentSize.height < viewport.top
						? this.offset - rel.top + viewport.top + "px"
						: "auto";
				style.right = "auto";
				style.bottom = rel.bottom - rel.top - this.offset + "px";
				style.left = "0";
				break;

			case "up-left":
				style.top =
					this.constrain && rel.top - this.offset - contentSize.height < viewport.top
						? this.offset - rel.top + viewport.top + "px"
						: "auto";
				style.right = "0";
				style.bottom = rel.bottom - rel.top - this.offset + "px";
				style.left = "auto";
				break;

			case "right":
			case "right-center":
				style.top = Math.round((rel.bottom - rel.top - el.offsetHeight) / 2) + "px";
				style.right = "auto";
				style.bottom = "auto";
				style.left = rel.right - rel.left + this.offset + "px";
				break;

			case "right-down":
				style.top = "0";
				style.right = "auto";
				style.bottom = "auto";
				style.left = rel.right - rel.left + this.offset + "px";
				break;

			case "right-up":
				style.top = "auto";
				style.right = "auto";
				style.bottom = "0";
				style.left = rel.right - rel.left + this.offset + "px";
				break;

			case "left":
			case "left-center":
				style.top = Math.round((rel.bottom - rel.top - el.offsetHeight) / 2) + "px";
				style.right = rel.right - rel.left + this.offset + "px";
				style.bottom = "auto";
				style.left = "auto";
				break;

			case "left-down":
				style.top = "0";
				style.right = rel.right - rel.left + this.offset + "px";
				style.bottom = "auto";
				style.left = "auto";
				break;

			case "left-up":
				style.top = "auto";
				style.right = rel.right - rel.left + this.offset + "px";
				style.bottom = "0";
				style.left = "auto";
				break;
		}
	};

	Dropdown.prototype.setDirectionClass = function setDirectionClass(component, placement) {
		var _babelHelpers$extends;

		var state = {
			"place-left": false,
			"place-right": false,
			"place-up": false,
			"place-down": false
		};

		component.lastPlacement = placement;

		component.setCSSState(
			_extends(
				{},
				state,
				((_babelHelpers$extends = {}), (_babelHelpers$extends["place-" + placement] = true), _babelHelpers$extends)
			)
		);
	};

	Dropdown.prototype.measureNaturalDropdownSize = function measureNaturalDropdownSize(instance, component) {
		var el = component.el;

		var size = {
			width: el.offsetWidth,
			height: el.offsetHeight
		};

		if (this.firstChildDefinesHeight && el.firstChild) {
			size.height = el.firstChild.offsetHeight;
		}

		if (this.firstChildDefinesWidth && el.firstChild) {
			size.width = el.firstChild.offsetWidth;
		}

		if (this.onMeasureDropdownNaturalSize) {
			var more = instance.invoke("onMeasureDropdownNaturalSize", instance, component);
			Object.assign(size, more);
		}
		return size;
	};

	Dropdown.prototype.findOptimalPlacement = function findOptimalPlacement(
		contentSize,
		target,
		placement,
		lastPlacement
	) {
		var placementOrder = this.placementOrder.split(" ");
		var best = lastPlacement || placement;
		var first;

		var score = {};
		var viewport = getViewportRect();

		for (var i = 0; i < placementOrder.length; i++) {
			var p = placementOrder[i];
			if (!first) first = p;
			var parts = p.split("-");

			var primary = parts[0];
			var secondary = parts[1] || "center";

			score[p] = 0;
			var vertical = true;

			switch (primary) {
				case "down":
					score[p] += 3 * Math.min(1, (viewport.bottom - target.bottom - this.offset) / contentSize.height);
					break;

				case "up":
					score[p] += 3 * Math.min(1, (target.top - viewport.top - this.offset) / contentSize.height);
					break;

				case "right":
					score[p] += target.right + contentSize.width + this.offset < viewport.right ? 3 : 0;
					vertical = false;
					break;

				case "left":
					score[p] += target.left - contentSize.width - this.offset >= viewport.left ? 3 : 0;
					vertical = false;
					break;
			}

			switch (secondary) {
				case "center":
					if (vertical) {
						score[p] += (target.right + target.left - contentSize.width) / 2 >= viewport.left ? 1 : 0;
						score[p] += (target.right + target.left + contentSize.width) / 2 < viewport.right ? 1 : 0;
					} else {
						score[p] += (target.bottom + target.top - contentSize.height) / 2 >= viewport.top ? 1 : 0;
						score[p] += (target.bottom + target.top + contentSize.height) / 2 < viewport.bottom ? 1 : 0;
					}
					break;

				case "right":
					score[p] += target.left + contentSize.width < viewport.right ? 2 : 0;
					break;

				case "left":
					score[p] += target.right - contentSize.width >= viewport.left ? 2 : 0;
					break;

				case "up":
					score[p] += target.bottom - contentSize.height >= viewport.top ? 2 : 0;
					break;

				case "down":
					score[p] += target.top + contentSize.height < viewport.bottom ? 2 : 0;
					break;
			}
		}

		if (!(best in score)) best = first;

		for (var k in score) {
			if (score[k] > score[best]) best = k;
		}
		if (this.touchFriendly && isTouchDevice() && score[best] < 5) return "screen-center";

		return best;
	};

	Dropdown.prototype.handleKeyDown = function handleKeyDown(e, instance) {
		switch (e.keyCode) {
			case 27:
				//esc
				var focusable = findFirst(this.relatedElement, isFocusable);
				if (focusable) focusable.focus();
				e.stopPropagation();
				e.preventDefault();
				break;
		}

		if (this.onKeyDown) instance.invoke("onKeyDown", e, instance);
	};

	Dropdown.prototype.renderContents = function renderContents(context, instance) {
		var CSS = this.CSS,
			baseClass = this.baseClass;

		if (!this.arrow) return _Overlay.prototype.renderContents.call(this, context, instance);

		var result = [].concat(_Overlay.prototype.renderContents.call(this, context, instance));
		result.push(
			VDOM.createElement("div", { key: "arrow-border", className: CSS.element(baseClass, "arrow-border") }),
			VDOM.createElement("div", { key: "arrow-back", className: CSS.element(baseClass, "arrow-fill") })
		);
		return result;
	};

	return Dropdown;
})(Overlay);

Dropdown.prototype.offset = 0;
Dropdown.prototype.baseClass = "dropdown";
Dropdown.prototype.matchWidth = true;
Dropdown.prototype.placementOrder = "up down right left";
Dropdown.prototype.placement = null; //default placement
Dropdown.prototype.constrain = false;
Dropdown.prototype.positioning = "fixed";
Dropdown.prototype.touchFriendly = false;
Dropdown.prototype.arrow = false;
Dropdown.prototype.pad = false;
Dropdown.prototype.elementExplode = 0;
Dropdown.prototype.screenPadding = 5;
Dropdown.prototype.firstChildDefinesHeight = false;
Dropdown.prototype.firstChildDefinesWidth = false;
Dropdown.prototype.cover = false;

Widget.alias("dropdown", Dropdown);
Localization.registerPrototype("cx/widgets/Dropdown", Dropdown);

function getViewportRect() {
	var padding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	return {
		left: padding,
		top: padding,
		right: document.documentElement.offsetWidth - padding,
		bottom: document.documentElement.offsetHeight - padding
	};
}

var Tooltip = (function(_Dropdown) {
	inherits(Tooltip, _Dropdown);

	function Tooltip() {
		classCallCheck(this, Tooltip);
		return possibleConstructorReturn(this, _Dropdown.apply(this, arguments));
	}

	Tooltip.prototype.declareData = function declareData() {
		var _Dropdown$prototype$d;

		(_Dropdown$prototype$d = _Dropdown.prototype.declareData).call.apply(
			_Dropdown$prototype$d,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					text: undefined,
					title: undefined,
					alwaysVisible: undefined
				}
			])
		);
	};

	Tooltip.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.stateMods = _extends({}, data.stateMods, {
			"mouse-trap": this.mouseTrap
		});
		_Dropdown.prototype.prepareData.call(this, context, instance);
	};

	Tooltip.prototype.renderContents = function renderContents(context, instance) {
		var data = instance.data;
		var CSS = this.CSS,
			baseClass = this.baseClass;

		return [
			data.title && VDOM.createElement("div", { key: "title", className: CSS.element(baseClass, "title") }, data.title),
			data.text
		].concat(_Dropdown.prototype.renderContents.call(this, context, instance));
	};

	Tooltip.prototype.initInstance = function initInstance(context, instance) {
		var _this2 = this;

		_Dropdown.prototype.initInstance.call(this, context, instance);

		if (this.trackMouse) {
			instance.trackMouse = function(e) {
				instance.mousePosition = {
					x: e.clientX,
					y: e.clientY
				};
				if (instance.tooltipComponent) _this2.updateDropdownPosition(instance, instance.tooltipComponent);
			};
		}
	};

	Tooltip.prototype.overlayDidMount = function overlayDidMount(instance, component) {
		var _this3 = this;

		instance.tooltipComponent = component;

		_Dropdown.prototype.overlayDidMount.call(this, instance, component);

		instance.parentValidityCheckTimer = setInterval(function() {
			if (!document.body.contains(_this3.relatedElement)) {
				if (instance.dismissTooltip) {
					instance.dismissTooltip();
					instance.dismissTooltip = null;
				}
			} else {
				if (instance.tooltipComponent) _this3.updateDropdownPosition(instance, instance.tooltipComponent);
			}
		}, 500);
	};

	Tooltip.prototype.overlayWillUnmount = function overlayWillUnmount(instance, component) {
		clearInterval(instance.parentValidityCheckTimer);
		_Dropdown.prototype.overlayWillUnmount.call(this, instance, component);
		instance.tooltipComponent = null;
	};

	Tooltip.prototype.handleMouseEnter = function handleMouseEnter(instance, component) {
		instance.mouseOverTooltip = true;
		_Dropdown.prototype.handleMouseEnter.call(this, instance, component);
	};

	Tooltip.prototype.handleMouseLeave = function handleMouseLeave(instance, component) {
		instance.mouseOverTooltip = false;
		if (this.mouseTrap) this.handleMouseLeavesParent(instance);
		_Dropdown.prototype.handleMouseLeave.call(this, instance, component);
	};

	Tooltip.prototype.handleMouseLeavesParent = function handleMouseLeavesParent(instance) {
		var _this4 = this;

		var timeout = this.mouseTrap ? 200 : 0;
		setTimeout(function() {
			if (!instance.mouseOverTarget && !(_this4.mouseTrap && instance.mouseOverTooltip))
				_this4.dismissTooltip(instance);
		}, timeout);
	};

	Tooltip.prototype.dismissTooltip = function dismissTooltip(instance) {
		if (instance && instance.dismissTooltip) {
			if (instance.data && instance.data.alwaysVisible && document.body.contains(this.relatedElement)) return;
			instance.dismissTooltip();
			instance.dismissTooltip = null;
		}
	};

	return Tooltip;
})(Dropdown);

Widget.alias("tooltip", Tooltip);

Tooltip.prototype.baseClass = "tooltip";
Tooltip.prototype.offset = 8;
Tooltip.prototype.placementOrder =
	"right up down left up-right up-left right-up right-down down-right down-left left-up left-down";
Tooltip.prototype.animate = true;
Tooltip.prototype.destroyDelay = 300;
Tooltip.prototype.createDelay = 200;
Tooltip.prototype.matchWidth = false;
Tooltip.prototype.trackMouse = false;
Tooltip.prototype.touchFriendly = false; //rename to positioningMode
Tooltip.prototype.touchBehavior = "toggle";
Tooltip.prototype.arrow = true;
Tooltip.prototype.alwaysVisible = false;

function getTooltipInstance(e, parentInstance, tooltip) {
	var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	var target = options.target || (e && e.currentTarget) || e;

	debug(tooltipsFlag, "mouse-move", target, parentInstance);

	var name = options.tooltipName || "tooltip";

	if (!parentInstance.tooltips) parentInstance.tooltips = {};

	var tooltipInstance = parentInstance.tooltips[name];

	if (tooltipInstance && (tooltipInstance.widget.relatedElement != target || tooltipInstance.config != tooltip)) {
		if (tooltipInstance.dismissTooltip) tooltipInstance.dismissTooltip();
		delete parentInstance.tooltips[name];
		tooltipInstance = null;
	}

	if (!tooltip || !target) return;

	if (!tooltipInstance) {
		var config = tooltip;
		if (isSelector(tooltip)) {
			config = {
				text: tooltip
			};
		}
		var tooltipWidget = Tooltip.create({ relatedElement: target }, config);
		var store = new ReadOnlyDataView({
			store: parentInstance.store
		});
		tooltipInstance = parentInstance.tooltips[name] = parentInstance.getChild(null, tooltipWidget, null, store);
		tooltipInstance.config = tooltip;

		if (tooltip.alwaysVisible || tooltip.trackMouse) {
			tooltipInstance.init();
			tooltipInstance.data = tooltipInstance.dataSelector(store);
		}
	}

	return tooltipInstance;
}

function tooltipMouseMove$1(e, parentInstance, tooltip) {
	var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	var instance = getTooltipInstance(e, parentInstance, tooltip, options);
	if (!instance) return;

	if (isTouchEvent() && instance.widget.touchBehavior == "ignore") return false;

	var dirty = !shallowEquals(options.data, instance.store.data);

	instance.store.setData(options.data);
	instance.mouseOverTarget = true;

	if (!instance.dismissTooltip) {
		if (!instance.pending) {
			instance.pending = true;
			setTimeout(function() {
				instance.pending = false;
				if (instance.mouseOverTarget && document.body.contains(instance.widget.relatedElement)) {
					instance.dismissTooltip = instance.widget.open(instance, {
						onPipeUpdate: function onPipeUpdate(cb) {
							instance.update = cb;
						}
					});
				}
			}, instance.widget.createDelay);
		}
	} else {
		if (isTouchEvent() && instance.widget.touchBehavior == "toggle") {
			instance.dismissTooltip();
			instance.dismissTooltip = null;
		} else if (dirty && instance.update) instance.update();
	}

	if (instance.trackMouse && e && e.target) instance.trackMouse(e);
}

function tooltipMouseLeave$1(e, parentInstance, tooltip, options) {
	var instance = getTooltipInstance(e, parentInstance, tooltip, options);
	if (instance) {
		instance.mouseOverTarget = false;
		instance.widget.handleMouseLeavesParent(instance);
	}
}

function tooltipParentDidMount$1(element, parentInstance, tooltip, options) {
	if (tooltip && tooltip.alwaysVisible) {
		var instance = getTooltipInstance(element, parentInstance, tooltip, options);
		if (instance.data.alwaysVisible) tooltipMouseMove$1(element, parentInstance, tooltip, options);
	}
}

function tooltipParentWillReceiveProps$1(element, parentInstance, tooltip, options) {
	var instance = getTooltipInstance(element, parentInstance, tooltip, options);
	if (instance && options) {
		instance.store.setData(options.data);
		if (instance.update) instance.update();
		if (instance.mouseOverTarget || (instance.data && instance.data.alwaysVisible))
			tooltipMouseMove$1(element, parentInstance, tooltip, options);
	}
}

function tooltipParentWillUnmount$1(parentInstance) {
	if (parentInstance.tooltips) {
		for (var name in parentInstance.tooltips) {
			var instance = parentInstance.tooltips[name];
			instance.mouseOverTarget = false;
			if (instance.dismissTooltip) parentInstance.tooltips[name].dismissTooltip();
		}
	}
}

function enableTooltips() {
	wireTooltipOps({
		tooltipMouseMove: tooltipMouseMove$1,
		tooltipMouseLeave: tooltipMouseLeave$1,
		tooltipParentDidMount: tooltipParentDidMount$1,
		tooltipParentWillReceiveProps: tooltipParentWillReceiveProps$1,
		tooltipParentWillUnmount: tooltipParentWillUnmount$1
	});
}

var Window = (function(_Overlay) {
	inherits(Window, _Overlay);

	function Window() {
		classCallCheck(this, Window);
		return possibleConstructorReturn(this, _Overlay.apply(this, arguments));
	}

	Window.prototype.init = function init() {
		if (typeof this.headerStyle === "string") this.headerStyle = parseStyle(this.headerStyle);

		if (typeof this.footerStyle === "string") this.footerStyle = parseStyle(this.footerStyle);

		if (typeof this.bodyStyle === "string") this.bodyStyle = parseStyle(this.bodyStyle);

		_Overlay.prototype.init.call(this);
	};

	Window.prototype.declareData = function declareData() {
		var _Overlay$prototype$de;

		return (_Overlay$prototype$de = _Overlay.prototype.declareData).call.apply(
			_Overlay$prototype$de,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					title: undefined,
					closable: undefined,
					bodyStyle: { structured: true },
					headerStyle: { structured: true },
					footerStyle: { structured: true }
				}
			])
		);
	};

	Window.prototype.initHelpers = function initHelpers() {
		var _Overlay$prototype$in;

		return (_Overlay$prototype$in = _Overlay.prototype.initHelpers).call.apply(
			_Overlay$prototype$in,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					header: Widget.create(this.header || { type: ContentPlaceholder, name: "header", scoped: true }),
					footer: Widget.create(this.footer || { type: ContentPlaceholder, name: "footer", scoped: true }),
					close:
						this.closable &&
						Button.create({
							mod: "hollow",
							dismiss: true,
							icon: "close",
							style: "margin-left: auto",
							onTouchStart: stopPropagation,
							onMouseDown: stopPropagation
						})
				}
			])
		);
	};

	Window.prototype.exploreCleanup = function exploreCleanup(context, instance) {
		_Overlay.prototype.exploreCleanup.call(this, context, instance);

		var helpers = instance.helpers;

		var unregisterHeader = helpers.header && helpers.header.unregisterContentPlaceholder;
		if (unregisterHeader) unregisterHeader();

		var unregisterFooter = helpers.footer && helpers.footer.unregisterContentPlaceholder;
		if (unregisterFooter) unregisterFooter();
	};

	Window.prototype.renderHeader = function renderHeader(context, instance, key) {
		var data = instance.data;

		var result = [];
		if (data.title) result.push(data.title);
		if (instance.helpers) {
			var header = getContent(instance.helpers.header && instance.helpers.header.render(context, key));
			if (header) result.push(header);
			if (data.closable && instance.helpers.close) result.push(getContent(instance.helpers.close.render(context)));
		}
		return result;
	};

	Window.prototype.renderFooter = function renderFooter(context, instance, key) {
		return getContent(instance.helpers && instance.helpers.footer && instance.helpers.footer.render(context, key));
	};

	Window.prototype.render = function render(context, instance, key) {
		var header = this.renderHeader(context, instance, "header");
		var footer = this.renderFooter(context, instance, "footer");
		return VDOM.createElement(
			WindowComponent,
			{ key: key, instance: instance, header: header, footer: footer },
			this.renderContents(context, instance)
		);
	};

	return Window;
})(Overlay);

Window.prototype.baseClass = "window";
Window.prototype.closable = true;
Window.prototype.resizable = false;
Window.prototype.autoFocus = true;
Window.prototype.focusable = true;

Widget.alias("window", Window);
Localization.registerPrototype("cx/widgets/Window", Window);

var WindowComponent = (function(_OverlayComponent) {
	inherits(WindowComponent, _OverlayComponent);

	function WindowComponent() {
		classCallCheck(this, WindowComponent);
		return possibleConstructorReturn(this, _OverlayComponent.apply(this, arguments));
	}

	WindowComponent.prototype.renderOverlayBody = function renderOverlayBody() {
		var _this3 = this;

		var _props$instance = this.props.instance,
			widget = _props$instance.widget,
			data = _props$instance.data;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var header = void 0,
			footer = void 0;

		if (this.props.header.length > 0) {
			header = VDOM.createElement(
				"header",
				{
					key: "header",
					ref: function ref(c) {
						_this3.headerEl = c;
					},
					className: CSS.element(baseClass, "header"),
					style: data.headerStyle,
					onMouseDown: this.onHeaderMouseDown.bind(this),
					onTouchStart: this.onHeaderMouseDown.bind(this)
				},
				this.props.header
			);
		}

		if (this.props.footer) {
			footer = VDOM.createElement(
				"footer",
				{
					key: "footer",
					ref: function ref(c) {
						_this3.footerEl = c;
					},
					className: CSS.element(baseClass, "footer"),
					style: data.footerStyle
				},
				this.props.footer
			);
		}

		var bodyStyle = data.bodyStyle;

		var body = VDOM.createElement(
			"div",
			{
				key: "body",
				ref: function ref(c) {
					_this3.bodyEl = c;
				},
				className: CSS.element(widget.baseClass, "body"),
				style: bodyStyle
			},
			this.props.children
		);

		return [header, body, footer];
	};

	WindowComponent.prototype.getOverlayCssClass = function getOverlayCssClass() {
		var cls = _OverlayComponent.prototype.getOverlayCssClass.call(this);
		if (this.state.active) cls += " cxs-active";
		return cls;
	};

	WindowComponent.prototype.onFocusIn = function onFocusIn() {
		var _this4 = this;

		_OverlayComponent.prototype.onFocusIn.call(this);
		if (!this.state.active) {
			this.setState(
				{
					active: true
				},
				function() {
					_this4.setZIndex(ZIndexManager.next());
				}
			);
		}
	};

	WindowComponent.prototype.onFocusOut = function onFocusOut() {
		_OverlayComponent.prototype.onFocusOut.call(this);
		if (this.state.active) {
			this.setState({
				active: false
			});
		}
	};

	WindowComponent.prototype.onHeaderMouseDown = function onHeaderMouseDown(e) {
		this.startMoveOperation(e);
		e.stopPropagation();
	};

	return WindowComponent;
})(OverlayComponent);

WindowComponent.prototype.focusable = true;

var MsgBox = (function() {
	function MsgBox() {
		classCallCheck(this, MsgBox);
	}

	MsgBox.alert = function alert$$1(options) {
		if (isString(options))
			options = {
				message: options
			};

		return new Promise(function(resolve) {
			var callback = function callback(e, instance) {
				if (options.callback && options.callback() === false) return;
				instance.parentOptions.dismiss();
				resolve();
			};

			var w = Widget.create({
				$type: Window,
				title: options.title,
				header: options.header,
				mod: "alert",
				modal: true,
				center: true,
				resizable: false,
				closable: false,
				style: options.style || "max-width: 90vw",
				jsxAttributes: ["title", "header", "mod", "modal", "center", "resizable", "closable", "style"],
				children: [
					"\n               ",
					options.message || options.items || options.children,
					"\n               ",
					{
						$type: FlexRow,
						putInto: "footer",
						direction: MsgBox.prototype.footerDirection,
						justify: MsgBox.prototype.footerJustify,
						jsxAttributes: ["putInto", "direction", "justify"],
						children: [
							"\n                  ",
							{
								$type: Button,
								mod: MsgBox.prototype.buttonMod,
								onClick: callback,
								jsxAttributes: ["mod", "onClick"],
								children: ["OK"]
							},
							"\n               "
						]
					},
					"\n            "
				]
			});

			w.open(options.store);
		});
	};

	MsgBox.yesNo = function yesNo$$1(options) {
		if (isString(options))
			options = {
				message: options
			};

		return new Promise(function(resolve, reject) {
			var callback = function callback(option) {
				return function(e, instance) {
					if (options.callback && options.callback(option) === false) return;
					instance.parentOptions.dismiss();
					if (option == "yes") resolve(option);
					else resolve(option);
				};
			};
			var w = Widget.create({
				$type: Window,
				title: options.title,
				header: options.header,
				mod: "alert",
				modal: true,
				center: true,
				resizable: false,
				closable: false,
				style: options.style || "max-width: 90vw",
				jsxAttributes: ["title", "header", "mod", "modal", "center", "resizable", "closable", "style"],
				children: [
					"\n               ",
					options.message || options.items || options.children,
					"\n               ",
					{
						$type: FlexRow,
						putInto: "footer",
						direction: MsgBox.prototype.footerDirection,
						justify: MsgBox.prototype.footerJustify,
						hspacing: "small",
						jsxAttributes: ["putInto", "direction", "justify", "hspacing"],
						children: [
							"\n                  ",
							{
								$type: Button,
								mod: MsgBox.prototype.buttonMod,
								onClick: callback("yes"),
								jsxAttributes: ["mod", "onClick"],
								children: ["Yes"]
							},
							"\n                  ",
							{
								$type: Button,
								mod: MsgBox.prototype.buttonMod,
								onClick: callback("no"),
								jsxAttributes: ["mod", "onClick"],
								children: ["No"]
							},
							"\n               "
						]
					},
					"\n            "
				]
			});

			w.open(options.store);
		});
	};

	return MsgBox;
})();

MsgBox.prototype.buttonMod = null;
MsgBox.prototype.footerDirection = "row";
MsgBox.prototype.footerJustify = "center";
Localization.registerPrototype("cx/widgets/MsgBox", MsgBox);

function enableMsgBoxAlerts() {
	registerAlertImpl({
		yesNo: MsgBox.yesNo.bind(MsgBox),
		alert: MsgBox.alert.bind(MsgBox)
	});
}

var Toast = (function(_Overlay) {
	inherits(Toast, _Overlay);

	function Toast() {
		classCallCheck(this, Toast);
		return possibleConstructorReturn(this, _Overlay.apply(this, arguments));
	}

	Toast.prototype.init = function init() {
		if (this.message)
			this.items = {
				type: Text,
				value: this.message
			};
		_Overlay.prototype.init.call(this);
	};

	Toast.prototype.declareData = function declareData() {
		var _Overlay$prototype$de;

		return (_Overlay$prototype$de = _Overlay.prototype.declareData).call.apply(
			_Overlay$prototype$de,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					timeout: undefined
				}
			])
		);
	};

	Toast.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.stateMods = _extends({}, data.stateMods, {
			pad: this.pad
		});
		_Overlay.prototype.prepareData.call(this, context, instance);
	};

	Toast.prototype.overlayDidUpdate = function overlayDidUpdate(instance, component) {
		var el = component.containerEl || component.props.parentEl;
		if (component.state.animated) {
			el.style.height = component.el.offsetHeight + "px";
			el.classList.add(this.CSS.state("live"));
		}
	};

	Toast.prototype.overlayDidMount = function overlayDidMount(instance, component) {
		var data = instance.data;

		if (data.timeout > 0) {
			component.timeoutTimer = setTimeout(function() {
				instance.dismiss();
			}, data.timeout);
		}
	};

	Toast.prototype.overlayWillDismiss = function overlayWillDismiss(instance, component) {
		var el = component.containerEl || component.props.parentEl;
		el.style.height = 0;
		el.classList.remove(this.CSS.state("live"));
	};

	Toast.prototype.overlayWillUnmount = function overlayWillUnmount(instance, component) {
		var el = component.containerEl || component.props.parentEl;
		el.style.height = 0;
		el.classList.remove(this.CSS.state("live"));
		if (component.timeoutTimer) clearTimeout(component.timeoutTimer);
	};

	Toast.prototype.containerFactory = function containerFactory() {
		var _CSS$block;

		var el = document.createElement("div");
		el.className = this.CSS.element("toaster", "item");
		var placement = this.placement || "top";
		var toaster = getToaster(placement);
		toaster.el.className = this.CSS.block(
			"toaster",
			null,
			((_CSS$block = {}), (_CSS$block["placement-" + placement] = true), _CSS$block)
		);
		toaster.el.insertBefore(el, toaster.el.firstChild);
		return el;
	};

	return Toast;
})(Overlay);

var toasters = {};

function getToaster(placement) {
	var t = toasters[placement];
	if (!t) {
		var el = document.createElement("div");
		document.body.appendChild(el);
		t = toasters[placement] = {
			el: el
		};
	}
	return t;
}

Toast.prototype.styled = true;
Toast.prototype.pad = true;
Toast.prototype.animate = true;
Toast.prototype.baseClass = "toast";
Toast.prototype.placement = "top";
Toast.prototype.destroyDelay = 300;

var ContextMenu = (function(_Dropdown) {
	inherits(ContextMenu, _Dropdown);

	function ContextMenu() {
		classCallCheck(this, ContextMenu);
		return possibleConstructorReturn(this, _Dropdown.apply(this, arguments));
	}

	return ContextMenu;
})(Dropdown);
ContextMenu.prototype.trackMouse = true;
ContextMenu.prototype.dismissOnFocusOut = true;
ContextMenu.prototype.firstChildDefinesWidth = true;
ContextMenu.prototype.matchWidth = false;
ContextMenu.prototype.placementOrder = "down-right right up-right down-left left up-left";
ContextMenu.prototype.offset = 0;
ContextMenu.prototype.autoFocus = true;
ContextMenu.prototype.autoFocusFirstChild = true;
ContextMenu.prototype.focusable = true;

var openContextMenu = function openContextMenu(e, content, store, options) {
	e.preventDefault();
	e.stopPropagation();
	var menu = ContextMenu.create({
		relatedElement: e.currentTarget,
		mousePosition: {
			x: e.clientX,
			y: e.clientY
		},
		items: content
	});
	menu.open(store, options);
};

var Route = (function(_PureContainer) {
	inherits(Route, _PureContainer);

	function Route() {
		classCallCheck(this, Route);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	Route.prototype.init = function init() {
		if (this.path) this.route = this.path;

		_PureContainer.prototype.init.call(this);

		if (this.route && this.route[0] !== "+")
			this.matcher = new RouteMatcher(this.route + (this.prefix ? "(*remainder)" : ""));
	};

	Route.prototype.initInstance = function initInstance(context, instance) {
		_PureContainer.prototype.initInstance.call(this, context, instance);
		instance.store = new ReadOnlyDataView({
			store: instance.store
		});
		instance.setStore = function(store) {
			instance.store.setStore(store);
		};
	};

	Route.prototype.declareData = function declareData() {
		var _PureContainer$protot;

		(_PureContainer$protot = _PureContainer.prototype.declareData).call.apply(
			_PureContainer$protot,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					url: undefined
				}
			])
		);
	};

	Route.prototype.checkVisible = function checkVisible(context, instance, data) {
		if (!data.visible) return false;

		if (data.url !== instance.cached.url) {
			instance.cached.url = data.url;
			var matcher = this.matcher;
			var route = this.route;
			if (this.route[0] === "+") {
				route = routeAppend(context.lastRoute.route, this.route.substring(1));
				if (!instance.cached.matcher || instance.cached.route !== route)
					instance.cached.matcher = new RouteMatcher(route + (this.prefix ? "(*remainder)" : ""));
				matcher = instance.cached.matcher;
			}
			instance.cached.result = matcher.match(data.url);
			instance.cached.matcher = matcher;
			instance.cached.route = data.route = route;
		}
		if (!instance.cached.result) return false;

		return _PureContainer.prototype.checkVisible.call(this, context, instance, data);
	};

	Route.prototype.prepareData = function prepareData(context, _ref) {
		var _PureContainer$protot2, _store$setData;

		var data = _ref.data,
			store = _ref.store,
			cached = _ref.cached;

		(_PureContainer$protot2 = _PureContainer.prototype.prepareData).call.apply(
			_PureContainer$protot2,
			[this].concat(Array.prototype.slice.call(arguments))
		);

		store.setData(((_store$setData = {}), (_store$setData[this.recordName] = cached.result), _store$setData));

		//TODO: Replace comparison with deepEquals
		if (this.params && this.params.bind) {
			var params = store.get(this.params.bind);
			if (JSON.stringify(params) != JSON.stringify(cached.result)) {
				store.set(this.params.bind, cached.result);
			}
		}

		if (this.map) {
			for (var key in result) {
				var binding = this.map[key];
				if (binding) store.set(binding, result[key]);
			}
		}
	};

	Route.prototype.explore = function explore(context, instance) {
		context.push("lastRoute", {
			route: instance.cached.route,
			result: instance.cached.result,
			reverse: function reverse(data) {
				return instance.cached.matcher.reverse(
					_extends(
						{},
						instance.cached.result,
						{
							remainder: ""
						},
						data
					)
				);
			}
		});
		_PureContainer.prototype.explore.call(this, context, instance);
	};

	Route.prototype.exploreCleanup = function exploreCleanup(context, instance) {
		context.pop("lastRoute");
	};

	return Route;
})(PureContainer);

Route.prototype.recordName = "$route";
Route.prototype.prefix = false;

Widget.alias("route", Route);

var RedirectRoute = (function(_Route) {
	inherits(RedirectRoute, _Route);

	function RedirectRoute() {
		classCallCheck(this, RedirectRoute);
		return possibleConstructorReturn(this, _Route.apply(this, arguments));
	}

	RedirectRoute.prototype.checkVisible = function checkVisible(context, instance, data) {
		if (!data.visible) return false;

		if (!data.url && !data.route) return true;

		return _Route.prototype.checkVisible.call(this, context, instance, data);
	};

	RedirectRoute.prototype.declareData = function declareData() {
		var _Route$prototype$decl;

		(_Route$prototype$decl = _Route.prototype.declareData).call.apply(
			_Route$prototype$decl,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					redirect: undefined
				}
			])
		);
	};

	RedirectRoute.prototype.prepareData = function prepareData(context, instance) {
		var _Route$prototype$prep;

		(_Route$prototype$prep = _Route.prototype.prepareData).call.apply(
			_Route$prototype$prep,
			[this].concat(Array.prototype.slice.call(arguments))
		);

		var data = instance.data;

		if (data.redirect && data.redirect[0] === "+")
			data.redirect = routeAppend(context.lastRoute.reverse(), data.redirect.substring(1));

		if (data.redirect && History.store) History.replaceState({}, null, Url.resolve(data.redirect));
		else instance.set("url", data.redirect);
	};

	return RedirectRoute;
})(Route);

Widget.alias("redirect-route", RedirectRoute);

var Tab = (function(_HtmlElement) {
	inherits(Tab, _HtmlElement);

	function Tab() {
		classCallCheck(this, Tab);
		return possibleConstructorReturn(this, _HtmlElement.apply(this, arguments));
	}

	Tab.prototype.declareData = function declareData() {
		var _HtmlElement$prototyp;

		(_HtmlElement$prototyp = _HtmlElement.prototype.declareData).call.apply(
			_HtmlElement$prototyp,
			[
				this,
				{
					tab: undefined,
					value: undefined,
					disabled: undefined,
					text: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Tab.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.stateMods = {
			active: data.tab == data.value,
			disabled: data.disabled,
			shape: this.shape
		};
		if (this.default && isUndefined(data.value)) instance.set("value", data.tab);
		_HtmlElement.prototype.prepareData.call(this, context, instance);
	};

	Tab.prototype.isValidHtmlAttribute = function isValidHtmlAttribute(attrName) {
		switch (attrName) {
			case "value":
			case "tab":
			case "text":
			case "disabled":
			case "default":
				return false;

			default:
				return _HtmlElement.prototype.isValidHtmlAttribute.call(this, attrName);
		}
	};

	Tab.prototype.attachProps = function attachProps(context, instance, props) {
		var _this2 = this;

		_HtmlElement.prototype.attachProps.call(this, context, instance, props);

		var data = instance.data;

		if (!data.disabled) {
			props.href = "#";
			delete props.value;

			props.onMouseDown = function(e) {
				if (_this2.onMouseDown) instance.invoke("onMouseDown", e, instance);
				preventFocusOnTouch(e);
			};

			props.onClick = function(e) {
				return _this2.handleClick(e, instance);
			};
		}
	};

	Tab.prototype.handleClick = function handleClick(e, instance) {
		if (this.onClick) instance.invoke("onClick", e, instance);

		e.preventDefault();
		e.stopPropagation();

		var data = instance.data;

		if (data.disabled) return;

		instance.set("value", data.tab);
	};

	return Tab;
})(HtmlElement);

Tab.prototype.baseClass = "tab";
Tab.prototype.tag = "a";
Tab.prototype.focusOnMouseDown = false;
Tab.prototype.default = false;

Widget.alias("tab", Tab);

var LinkButton = (function(_Button) {
	inherits(LinkButton, _Button);

	function LinkButton() {
		classCallCheck(this, LinkButton);
		return possibleConstructorReturn(this, _Button.apply(this, arguments));
	}

	LinkButton.prototype.declareData = function declareData() {
		var _Button$prototype$dec;

		(_Button$prototype$dec = _Button.prototype.declareData).call.apply(
			_Button$prototype$dec,
			[
				this,
				{
					href: undefined,
					url: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	LinkButton.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.unresolvedHref = data.href;

		if (typeof data.href === "string") {
			if (data.unresolvedHref[0] === "+")
				data.unresolvedHref = routeAppend(context.lastRoute.reverse(), data.href.substring(1));

			data.href = Url.resolve(data.unresolvedHref);
		}

		data.stateMods = {
			disabled: data.disabled,
			active: this.isActive(data)
		};

		_Button.prototype.prepareData.call(this, context, instance);
	};

	LinkButton.prototype.isActive = function isActive(data) {
		switch (this.match) {
			default:
			case "equal":
				return data.url === data.unresolvedHref;

			case "prefix":
				return data.url && data.unresolvedHref && data.url.indexOf(data.unresolvedHref) === 0;
		}
	};

	LinkButton.prototype.attachProps = function attachProps(context, instance, props) {
		var _this2 = this;

		props.onClick = function(ev) {
			_this2.handleClick(ev, instance);
		};
		_Button.prototype.attachProps.call(this, context, instance, props);
		props.href = instance.data.href;
	};

	LinkButton.prototype.isValidHtmlAttribute = function isValidHtmlAttribute(attr) {
		if (attr === "url" || attr === "match") return false;
		return _Button.prototype.isValidHtmlAttribute.call(this, attr);
	};

	LinkButton.prototype.handleClick = function handleClick(e, instance) {
		var data = instance.data;

		if (data.disabled) {
			e.preventDefault();
			return;
		}

		if (this.onClick && instance.invoke("onClick", e, instance) === false) return;

		if (data.href && Url.isLocal(data.href)) {
			e.preventDefault();
			History.pushState({}, null, data.href);
		}
	};

	return LinkButton;
})(Button);

LinkButton.prototype.match = "equal";
LinkButton.prototype.tag = "a";

Widget.alias("link-button", LinkButton);

var Link = (function(_LinkButton) {
	inherits(Link, _LinkButton);

	function Link() {
		classCallCheck(this, Link);
		return possibleConstructorReturn(this, _LinkButton.apply(this, arguments));
	}

	return Link;
})(LinkButton);

Link.prototype.baseClass = "link";

Widget.alias("link", Link);

/*
 Functionality:
 - renders dropdown when focused
 - tracks focus and closes if focusElement goes outside the dropdown
 - switches focus to the dropdown when right key pressed
 - listens to dropdown's key events and captures focus back when needed
 - automatically opens the dropdown if mouse is hold over for a period of time
 */

var MenuItem = (function(_HtmlElement) {
	inherits(MenuItem, _HtmlElement);

	function MenuItem() {
		classCallCheck(this, MenuItem);
		return possibleConstructorReturn(this, _HtmlElement.apply(this, arguments));
	}

	MenuItem.prototype.init = function init() {
		if (this.hideCursor) this.showCursor = false;
		_HtmlElement.prototype.init.call(this);
	};

	MenuItem.prototype.declareData = function declareData() {
		var _HtmlElement$prototyp;

		(_HtmlElement$prototyp = _HtmlElement.prototype.declareData).call.apply(
			_HtmlElement$prototyp,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					icon: undefined,
					disabled: undefined,
					checked: false
				}
			])
		);
	};

	MenuItem.prototype.explore = function explore(context, instance) {
		instance.horizontal = this.horizontal;
		var lastMenu = context.lastMenu;

		if (lastMenu) {
			instance.horizontal = lastMenu.horizontal;
			instance.padding = lastMenu.itemPadding;
			instance.icons = lastMenu.icons;
		}

		instance.parentPositionChangeEvent = context.parentPositionChangeEvent;

		if (!instance.padding && this.pad == true) instance.padding = "medium";

		if (this.padding) instance.padding = this.padding;

		context.push("lastMenuItem", this);
		_HtmlElement.prototype.explore.call(this, context, instance);
	};

	MenuItem.prototype.exploreCleanup = function exploreCleanup(context, instance) {
		context.pop("lastMenuItem");
	};

	MenuItem.prototype.render = function render(context, instance, key) {
		return VDOM.createElement(
			MenuItemComponent$1,
			{
				key: key,
				instance: instance,
				data: instance.data,
				shouldUpdate: instance.shouldUpdate
			},
			instance.data.text ? VDOM.createElement("span", null, instance.data.text) : this.renderChildren(context, instance)
		);
	};

	MenuItem.prototype.add = function add(element) {
		var _HtmlElement$prototyp2;

		if (
			element &&
			(typeof element === "undefined" ? "undefined" : _typeof(element)) == "object" &&
			element.putInto == "dropdown"
		) {
			this.dropdown = _extends({}, element);
			delete this.dropdown.putInto;
		} else
			(_HtmlElement$prototyp2 = _HtmlElement.prototype.add).call.apply(
				_HtmlElement$prototyp2,
				[this].concat(Array.prototype.slice.call(arguments))
			);
	};

	MenuItem.prototype.addText = function addText(text) {
		this.add({
			type: HtmlElement,
			tag: "span",
			text: text
		});
	};

	return MenuItem;
})(HtmlElement);

MenuItem.prototype.baseClass = "menuitem";
MenuItem.prototype.hoverFocusTimeout = 500;
MenuItem.prototype.hoverToOpen = false;
MenuItem.prototype.clickToOpen = false;
MenuItem.prototype.horizontal = true;
MenuItem.prototype.memoize = false;
MenuItem.prototype.arrow = false;
MenuItem.prototype.dropdownOptions = null;
MenuItem.prototype.showCursor = true;
MenuItem.prototype.pad = true;
MenuItem.prototype.placement = null; //default dropdown placement
MenuItem.prototype.autoClose = false;
MenuItem.prototype.checkedIcon = "check";
MenuItem.prototype.uncheckedIcon = "dummy";

Widget.alias("submenu", MenuItem);
Localization.registerPrototype("cx/widgets/MenuItem", MenuItem);

var MenuItemComponent$1 = (function(_VDOM$Component) {
	inherits(MenuItemComponent, _VDOM$Component);

	function MenuItemComponent(props) {
		classCallCheck(this, MenuItemComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.state = {
			dropdownOpen: false
		};
		return _this2;
	}

	MenuItemComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
		return props.shouldUpdate || state != this.state || state.dropdownOpen; //always render if dropdown is open as we don't know if dropdown contents has changed
	};

	MenuItemComponent.prototype.getDropdown = function getDropdown() {
		var _this3 = this;

		var _props$instance = this.props.instance,
			horizontal = _props$instance.horizontal,
			controller = _props$instance.controller,
			widget = _props$instance.widget,
			parentPositionChangeEvent = _props$instance.parentPositionChangeEvent;

		if (!this.dropdown && widget.dropdown) {
			this.dropdown = Widget.create(
				Dropdown,
				_extends(
					{
						matchWidth: false,
						placementOrder: horizontal
							? "down-right down down-left up-right up up-left"
							: "right-down right right-up left-down left left-up",
						trackScroll: true,
						inline: true
					},
					widget.dropdownOptions,
					{
						relatedElement: this.el.parentElement,
						placement: widget.placement,
						controller: controller,
						onKeyDown: this.onDropdownKeyDown.bind(this),
						items: widget.dropdown,
						parentPositionChangeEvent: parentPositionChangeEvent,
						pipeValidateDropdownPosition: function pipeValidateDropdownPosition(cb) {
							_this3.validateDropdownPosition = cb;
						}
					}
				)
			);
		}
		return this.dropdown;
	};

	MenuItemComponent.prototype.render = function render() {
		var _this4 = this,
			_CSS$state;

		var _props = this.props,
			instance = _props.instance,
			data = _props.data;
		var store = instance.store,
			widget = instance.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var dropdown =
			this.state.dropdownOpen &&
			VDOM.createElement(Cx, { widget: this.getDropdown(), store: store, options: { name: "submenu" } });

		var arrow = widget.arrow && VDOM.createElement(DropdownIcon, { className: CSS.element(baseClass, "arrow") });

		var icon = null;

		var checkbox = widget.checked != null;

		if (checkbox) {
			data.icon = data.checked ? widget.checkedIcon : widget.uncheckedIcon;
		}

		if (data.icon) {
			icon = VDOM.createElement(
				"div",
				{
					className: CSS.element(baseClass, "button"),
					onClick: function onClick(e) {
						e.preventDefault();
						if (!instance.set("checked", !data.checked)) _this4.onClick(e);
					},
					onMouseDown: function onMouseDown(e) {
						if (checkbox) e.stopPropagation();
					}
				},
				Icon.render(data.icon, { className: CSS.element(baseClass, "icon") })
			);
		}

		var classNames = CSS.expand(
			data.classNames,
			CSS.state(
				((_CSS$state = {
					open: this.state.dropdownOpen,
					horizontal: instance.horizontal,
					vertical: !instance.horizontal,
					arrow: widget.arrow,
					cursor: widget.showCursor
				}),
				(_CSS$state[instance.padding + "-padding"] = instance.padding),
				(_CSS$state.icon = !!icon || instance.icons),
				(_CSS$state.disabled = data.disabled),
				_CSS$state)
			)
		);

		return VDOM.createElement(
			"div",
			{
				className: classNames,
				style: data.style,
				tabIndex: !data.disabled && (widget.dropdown || widget.onClick || widget.checked) ? 0 : null,
				ref: function ref(el) {
					_this4.el = el;
				},
				onKeyDown: this.onKeyDown.bind(this),
				onMouseDown: this.onMouseDown.bind(this),
				onMouseEnter: this.onMouseEnter.bind(this),
				onMouseLeave: this.onMouseLeave.bind(this),
				onFocus: this.onFocus.bind(this),
				onClick: this.onClick.bind(this),
				onBlur: this.onBlur.bind(this)
			},
			this.props.children,
			icon,
			arrow,
			dropdown
		);
	};

	MenuItemComponent.prototype.componentDidUpdate = function componentDidUpdate() {
		if (this.state.dropdownOpen && this.validateDropdownPosition) {
			this.validateDropdownPosition();
		}
	};

	MenuItemComponent.prototype.onDropdownKeyDown = function onDropdownKeyDown(e) {
		debug(menuFlag, "MenuItem", "dropdownKeyDown");
		var horizontal = this.props.instance.horizontal;

		if (e.keyCode == KeyCode.esc || (horizontal ? e.keyCode == KeyCode.up : e.keyCode == KeyCode.left)) {
			FocusManager.focus(this.el);
			e.preventDefault();
			e.stopPropagation();
		}
	};

	MenuItemComponent.prototype.clearAutoFocusTimer = function clearAutoFocusTimer() {
		if (this.autoFocusTimerId) {
			debug(menuFlag, "MenuItem", "autoFocusCancel");
			clearTimeout(this.autoFocusTimerId);
			delete this.autoFocusTimerId;
		}
	};

	MenuItemComponent.prototype.onMouseEnter = function onMouseEnter(e) {
		var _this5 = this;

		debug(menuFlag, "MenuItem", "mouseEnter", this.el);
		var widget = this.props.instance.widget;

		if (widget.dropdown && !this.state.dropdownOpen) {
			this.clearAutoFocusTimer();

			if (widget.hoverToOpen) FocusManager.focus(this.el);
			else if (!widget.clickToOpen) {
				// Automatically open the dropdown only if parent menu is focused
				var commonParentMenu = closest(this.el, function(el) {
					return el.tagName == "UL" && el.contains(document.activeElement);
				});
				if (commonParentMenu)
					this.autoFocusTimerId = setTimeout(function() {
						delete _this5.autoFocusTimerId;
						if (!_this5.state.dropdownOpen) {
							debug(menuFlag, "MenuItem", "hoverFocusTimeout:before", _this5.el);
							FocusManager.focus(_this5.el);
							debug(menuFlag, "MenuItem", "hoverFocusTimeout:after", _this5.el, document.activeElement);
						}
					}, widget.hoverFocusTimeout);
			}

			e.stopPropagation();
			e.preventDefault();
		}
	};

	MenuItemComponent.prototype.onMouseLeave = function onMouseLeave(e) {
		var widget = this.props.instance.widget;

		if (widget.dropdown) {
			debug(menuFlag, "MenuItem", "mouseLeave", this.el);
			this.clearAutoFocusTimer();

			if (widget.hoverToOpen && document.activeElement == this.el) this.el.blur();
		}
	};

	MenuItemComponent.prototype.onKeyDown = function onKeyDown(e) {
		var _this6 = this;

		debug(menuFlag, "MenuItem", "keyDown", this.el);
		var _props$instance2 = this.props.instance,
			horizontal = _props$instance2.horizontal,
			widget = _props$instance2.widget;

		if (widget.dropdown) {
			if (
				e.target == this.el &&
				(e.keyCode == KeyCode.enter || (horizontal ? e.keyCode == KeyCode.down : e.keyCode == KeyCode.right))
			) {
				this.openDropdown(function() {
					var focusableChild = findFirstChild(_this6.el, isFocusable);
					if (focusableChild) FocusManager.focus(focusableChild);
				});
				e.preventDefault();
				e.stopPropagation();
			}

			if (e.keyCode == KeyCode.esc) {
				if (!isFocused(this.el)) {
					FocusManager.focus(this.el);
					e.preventDefault();
					e.stopPropagation();
				}
				this.closeDropdown();
			}
		}
	};

	MenuItemComponent.prototype.onMouseDown = function onMouseDown(e) {
		var widget = this.props.instance.widget;

		if (widget.dropdown) {
			e.stopPropagation();
			if (this.state.dropdownOpen && !widget.hoverToOpen) this.closeDropdown();
			else {
				//IE sometimes does not focus parent on child click
				if (!isFocusedDeep(this.el)) FocusManager.focus(this.el);
				this.openDropdown();
			}
		}
	};

	MenuItemComponent.prototype.openDropdown = function openDropdown(callback) {
		var widget = this.props.instance.widget;

		if (widget.dropdown) {
			if (!this.state.dropdownOpen)
				this.setState(
					{
						dropdownOpen: true
					},
					callback
				);
			else if (callback) callback(this.state);
		}
	};

	MenuItemComponent.prototype.onClick = function onClick(e) {
		e.stopPropagation();

		var instance = this.props.instance;

		if (instance.data.disabled) {
			e.preventDefault();
			return;
		}

		var widget = instance.widget;

		if (widget.dropdown) e.preventDefault();
		else {
			//prevent navigation
			instance.set("checked", !instance.data.checked);

			if (widget.onClick) instance.invoke("onClick", e, instance);
		}

		if (widget.autoClose) document.activeElement.blur();
	};

	MenuItemComponent.prototype.onFocus = function onFocus() {
		var widget = this.props.instance.widget;

		if (widget.dropdown) {
			oneFocusOut(this, this.el, this.onFocusOut.bind(this));
			debug(menuFlag, "MenuItem", "focus", this.el, document.activeElement);
			this.clearAutoFocusTimer();
			this.openDropdown();
		}
	};

	MenuItemComponent.prototype.onBlur = function onBlur() {
		FocusManager.nudge();
	};

	MenuItemComponent.prototype.closeDropdown = function closeDropdown() {
		this.setState({
			dropdownOpen: false
		});
	};

	MenuItemComponent.prototype.onFocusOut = function onFocusOut(focusedElement) {
		debug(menuFlag, "MenuItem", "focusout", this.el, focusedElement);
		this.clearAutoFocusTimer();
		if (!isSelfOrDescendant(this.el, focusedElement)) {
			debug(menuFlag, "MenuItem", "closing dropdown", this.el, focusedElement);
			this.closeDropdown();
		}
	};

	MenuItemComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		this.clearAutoFocusTimer();
		offFocusOut(this);

		if (this.offParentPositionChange) this.offParentPositionChange();
	};

	return MenuItemComponent;
})(VDOM.Component);

/*
 Functionality:
 - renders a list of items in a form of horizontal or vertical menu
 - provides cursor with mouse and keyboard nav
 - changes focusElement to the first focusable child when cursor is moved using keyboard
 */

var Menu = (function(_HtmlElement) {
	inherits(Menu, _HtmlElement);

	function Menu() {
		classCallCheck(this, Menu);
		return possibleConstructorReturn(this, _HtmlElement.apply(this, arguments));
	}

	Menu.prototype.init = function init() {
		if (this.itemPadding === true) this.itemPadding = "medium";

		if (this.horizontal && isUndefined(this.itemPadding)) this.itemPadding = this.defaultHorizontalItemPadding;

		if (!this.horizontal && isUndefined(this.itemPadding)) this.itemPadding = this.defaultVerticalItemPadding;

		_HtmlElement.prototype.init.call(this);
	};

	Menu.prototype.prepareData = function prepareData(context, instance) {
		var _babelHelpers$extends;

		var data = instance.data;

		data.stateMods = _extends(
			{},
			data.stateMods,
			((_babelHelpers$extends = {
				horizontal: this.horizontal,
				vertical: !this.horizontal
			}),
			(_babelHelpers$extends[this.itemPadding + "-item-padding"] = this.itemPadding),
			_babelHelpers$extends)
		);
		_HtmlElement.prototype.prepareData.call(this, context, instance);
	};

	Menu.prototype.explore = function explore(context, instance) {
		context.push("lastMenu", this);
		_HtmlElement.prototype.explore.call(this, context, instance);
	};

	Menu.prototype.exploreCleanup = function exploreCleanup(context, instance) {
		context.pop("lastMenu");
	};

	Menu.prototype.render = function render(context, instance, key) {
		return VDOM.createElement(MenuComponent, { key: key, instance: instance }, this.renderChildren(context, instance));
	};

	Menu.prototype.add = function add(item) {
		var _HtmlElement$prototyp;

		if (item && item.tag == "a") {
			this.add({
				type: MenuItem,
				items: item,
				autoClose: true
			});
		} else
			(_HtmlElement$prototyp = _HtmlElement.prototype.add).call.apply(
				_HtmlElement$prototyp,
				[this].concat(Array.prototype.slice.call(arguments))
			);
	};

	return Menu;
})(HtmlElement);

Menu.prototype.horizontal = false;
Menu.prototype.defaultVerticalItemPadding = "medium";
Menu.prototype.defaultHorizontalItemPadding = "small";
Menu.prototype.icons = false;
Menu.Item = MenuItem;

var MenuComponent = (function(_VDOM$Component) {
	inherits(MenuComponent, _VDOM$Component);

	function MenuComponent(props) {
		classCallCheck(this, MenuComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.state = {
			cursor: null
		};
		return _this2;
	}

	MenuComponent.prototype.render = function render() {
		var _this3 = this;

		var _props = this.props,
			instance = _props.instance,
			children = _props.children;
		var data = instance.data;

		this.itemInfo = Array.from({ length: children.length });
		var ref = function ref(el) {
			_this3.el = el;
		};
		return VDOM.createElement(
			"ul",
			{
				ref: ref,
				className: data.classNames,
				style: data.style,
				onFocus: this.onFocus.bind(this),
				onBlur: FocusManager.nudge(),
				onKeyDown: this.onKeyDown.bind(this)
			},
			children.map(function(c, i) {
				var key = i;

				if (c && (typeof c === "undefined" ? "undefined" : _typeof(c)) == "object" && c.key) key = c.key;

				return VDOM.createElement(
					MenuItemComponent,
					{
						key: key,
						cursor: key === _this3.state.cursor,
						instance: instance,
						itemInfo: _this3.itemInfo,
						itemKey: key,
						itemIndex: i,
						moveCursor: _this3.moveCursor.bind(_this3)
					},
					c
				);
			})
		);
	};

	MenuComponent.prototype.moveCursor = function moveCursor(itemKey) {
		if (itemKey != this.state.cursor) {
			debug(menuFlag, "Menu", "moveCursor", itemKey);
			this.setState({ cursor: itemKey });
		}
	};

	MenuComponent.prototype.onKeyDown = function onKeyDown(e) {
		var _this4 = this;

		var instance = this.props.instance;
		var widget = instance.widget;

		var keyCode = e.keyCode;
		debug(menuFlag, "Menu", "keyDown", this.el, keyCode);
		var horizontal = widget.horizontal;

		if (keyCode == KeyCode.tab) {
			if (horizontal) keyCode = e.shiftKey ? KeyCode.left : KeyCode.up;
			else keyCode = e.shiftKey ? KeyCode.right : KeyCode.down;
		}

		if (this.state.cursor != null) {
			var cursorIndex = this.itemInfo.findIndex(function(a) {
				return a.key == _this4.state.cursor;
			});

			if (horizontal ? keyCode == KeyCode.left : keyCode == KeyCode.up) {
				for (var c = cursorIndex - 1; c >= 0; c--) {
					if (this.itemInfo[c].focusable) {
						FocusManager.focusFirst(this.itemInfo[c].el);
						e.stopPropagation();
						e.preventDefault();
						return;
					}
				}
			}

			if (horizontal ? keyCode == KeyCode.right : keyCode == KeyCode.down) {
				for (var c = cursorIndex + 1; c < this.itemInfo.length; c++) {
					if (this.itemInfo[c].focusable) {
						FocusManager.focusFirst(this.itemInfo[c].el);
						e.stopPropagation();
						e.preventDefault();
						return;
					}
				}
			}
		}

		switch (keyCode) {
			case KeyCode.home:
				if (this.itemInfo[0].focusable) {
					FocusManager.focusFirst(this.itemInfo[0].el);
					e.stopPropagation();
					e.preventDefault();
				}
				break;

			case KeyCode.end:
				if (this.itemInfo[this.itemInfo.length - 1].focusable) {
					FocusManager.focusFirst(this.itemInfo[this.itemInfo.length - 1].el);
					e.stopPropagation();
					e.preventDefault();
				}
				break;
		}
	};

	MenuComponent.prototype.onFocusOut = function onFocusOut(elementReceivingFocus) {
		debug(menuFlag, "Menu", "focusout", this.el, elementReceivingFocus);
		if (!isSelfOrDescendant(this.el, elementReceivingFocus)) this.moveCursor(null);
	};

	MenuComponent.prototype.componentDidMount = function componentDidMount() {
		var widget = this.props.instance.widget;

		if (widget.autoFocus && this.itemInfo.length > 0) FocusManager.focusFirst(this.itemInfo[0].el);
	};

	MenuComponent.prototype.onFocus = function onFocus() {
		oneFocusOut(this, this.el, this.onFocusOut.bind(this));
	};

	MenuComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		offFocusOut(this);
	};

	return MenuComponent;
})(VDOM.Component);

Menu.prototype.baseClass = "menu";
Menu.prototype.tag = "ul";

Widget.alias("menu", Menu);

var MenuItemComponent = (function(_VDOM$Component2) {
	inherits(MenuItemComponent, _VDOM$Component2);

	function MenuItemComponent(props) {
		classCallCheck(this, MenuItemComponent);

		var _this5 = possibleConstructorReturn(this, _VDOM$Component2.call(this, props));

		_this5.state = { focusable: true };
		return _this5;
	}

	MenuItemComponent.prototype.render = function render() {
		var _this6 = this;

		var _props2 = this.props,
			itemInfo = _props2.itemInfo,
			itemIndex = _props2.itemIndex,
			itemKey = _props2.itemKey,
			instance = _props2.instance,
			cursor = _props2.cursor;
		var widget = instance.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var mods = {
			cursor: cursor,
			focusable: this.state.focusable
		};

		return VDOM.createElement(
			"li",
			{
				ref: function ref(c) {
					_this6.el = c;
					itemInfo[itemIndex] = {
						el: c,
						focusable: _this6.state.focusable,
						key: itemKey
					};
				},
				className: CSS.element(baseClass, "item", mods),
				onFocus: this.onFocus.bind(this),
				onMouseDown: this.onMouseDown.bind(this),
				onKeyDown: this.onKeyDown.bind(this)
			},
			this.props.children
		);
	};

	MenuItemComponent.prototype.onFocus = function onFocus(e) {
		FocusManager.nudge();
		debug(menuFlag, "MenuItem", "focus", this.el, e.target);
		this.props.moveCursor(this.props.itemKey);
	};

	MenuItemComponent.prototype.onKeyDown = function onKeyDown(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onKeyDown) instance.invoke("onKeyDown", e, instance);
	};

	MenuItemComponent.prototype.onMouseDown = function onMouseDown(e) {
		e.stopPropagation();
		e.preventDefault();
		debug(menuFlag, "MenuItem", "mouseDown", this.el);
		if (this.state.focusable) {
			var _props3 = this.props,
				itemInfo = _props3.itemInfo,
				itemIndex = _props3.itemIndex;

			var el = itemInfo[itemIndex].el;
			var focusedEl = getFocusedElement();
			var focusedChild = FocusManager.focusFirst(el);
			if (focusedChild !== focusedEl) {
				debug(menuFlag, "MenuItem", "focusChild", focusedChild, focusedEl);
			}
		}
	};

	MenuItemComponent.prototype.componentDidMount = function componentDidMount() {
		this.componentDidUpdate();
	};

	MenuItemComponent.prototype.componentDidUpdate = function componentDidUpdate() {
		var _props4 = this.props,
			itemInfo = _props4.itemInfo,
			itemIndex = _props4.itemIndex;

		var focusable = !!findFirst(this.el, isFocusable);
		if (focusable !== this.state.focusable) {
			itemInfo[itemIndex].focusable = focusable;
			this.setState({ focusable: focusable });
		}
	};

	return MenuItemComponent;
})(VDOM.Component);

var Submenu = (function(_MenuItem) {
	inherits(Submenu, _MenuItem);

	function Submenu() {
		classCallCheck(this, Submenu);
		return possibleConstructorReturn(this, _MenuItem.apply(this, arguments));
	}

	return Submenu;
})(MenuItem);

var HScroller = (function(_PureContainer) {
	inherits(HScroller, _PureContainer);

	function HScroller() {
		classCallCheck(this, HScroller);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	HScroller.prototype.render = function render(context, instance, key) {
		return VDOM.createElement(
			HScrollerComponent,
			{ key: key, widget: this, data: instance.data },
			this.renderChildren(context, instance)
		);
	};

	return HScroller;
})(PureContainer);

HScroller.prototype.styled = true;
HScroller.prototype.baseClass = "hscroller";

var HScrollerComponent = (function(_VDOM$Component) {
	inherits(HScrollerComponent, _VDOM$Component);

	function HScrollerComponent(props) {
		classCallCheck(this, HScrollerComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.stopScrolling = function() {
			delete _this2.doScroll;
		};
		_this2.scrollLeft = _this2.scrollLeft.bind(_this2);
		_this2.scrollRight = _this2.scrollRight.bind(_this2);
		_this2.state = { scrollable: false };
		return _this2;
	}

	HScrollerComponent.prototype.render = function render() {
		var _this3 = this;

		var _props = this.props,
			data = _props.data,
			children = _props.children,
			widget = _props.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(data.classNames, CSS.state({ scrollable: this.state.scrollable })),
				style: data.style
			},
			VDOM.createElement(
				"div",
				{
					className: CSS.element(baseClass, "left-arrow"),
					onMouseDown: this.scrollLeft,
					onTouchStart: this.scrollLeft,
					onMouseUp: this.stopScrolling,
					onTouchEnd: this.stopScrolling
				},
				Icon.render("drop-down", { className: CSS.element(baseClass, "icon") })
			),
			VDOM.createElement(
				"div",
				{
					className: CSS.element(baseClass, "right-arrow"),
					onMouseDown: this.scrollRight,
					onTouchStart: this.scrollRight,
					onMouseUp: this.stopScrolling,
					onTouchEnd: this.stopScrolling
				},
				Icon.render("drop-down", { className: CSS.element(baseClass, "icon") })
			),
			VDOM.createElement(
				"div",
				{
					className: CSS.element(baseClass, "clip"),
					ref: function ref(el) {
						_this3.clip = el;
					}
				},
				VDOM.createElement(
					"div",
					{
						className: CSS.element(baseClass, "scroller"),
						ref: function ref(el) {
							_this3.scroller = el;
						}
					},
					VDOM.createElement(
						"div",
						{
							className: CSS.element(baseClass, "content"),
							ref: function ref(el) {
								_this3.content = el;
							}
						},
						children
					)
				)
			)
		);
	};

	HScrollerComponent.prototype.componentDidMount = function componentDidMount() {
		this.unsubscribeResize = ResizeManager.subscribe(this.componentDidUpdate.bind(this));
		this.componentDidUpdate();
	};

	HScrollerComponent.prototype.componentDidUpdate = function componentDidUpdate() {
		this.scroller.style.height = this.content.clientHeight + 100 + "px";
		this.clip.style.height = this.content.clientHeight + "px";
		var scrollable = this.content.scrollWidth > this.clip.clientWidth;
		if (scrollable != this.state.scrollable) this.setState({ scrollable: scrollable });
	};

	HScrollerComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		this.unsubscribeResize();
	};

	HScrollerComponent.prototype.scrollLeft = function scrollLeft() {
		this.scroll("left");
	};

	HScrollerComponent.prototype.scrollRight = function scrollRight() {
		this.scroll("right");
	};

	HScrollerComponent.prototype.scroll = function scroll(direction) {
		var _this4 = this;

		this.doScroll = function() {
			if (!_this4.scroller) return;
			_this4.scroller.scrollLeft += direction == "left" ? -10 : 10;
			if (_this4.doScroll) requestAnimationFrame(_this4.doScroll);
		};
		this.doScroll();
	};

	return HScrollerComponent;
})(VDOM.Component);

var ValidationError = (function(_Widget) {
	inherits(ValidationError, _Widget);

	function ValidationError() {
		classCallCheck(this, ValidationError);
		return possibleConstructorReturn(this, _Widget.apply(this, arguments));
	}

	ValidationError.prototype.checkVisible = function checkVisible(context, instance, data) {
		if (
			data.visible &&
			context.lastFieldId &&
			context.validation &&
			context.validation.errors &&
			context.validation.errors.length > 0
		) {
			var lastError = (instance.lastError = context.validation.errors[context.validation.errors.length - 1]);
			return lastError.fieldId == context.lastFieldId && lastError.visited;
		}

		return false;
	};

	ValidationError.prototype.explore = function explore(context, instance) {
		var data = instance.data,
			lastError = instance.lastError;

		data.errorMessage = lastError.message;
		data.fieldId = lastError.fieldId;
		_Widget.prototype.explore.call(this, context, instance);
	};

	ValidationError.prototype.render = function render(context, instance, key) {
		var data = instance.data;

		return VDOM.createElement(
			"label",
			{ key: key, className: data.classNames, htmlFor: data.fieldId },
			data.errorMessage
		);
	};

	return ValidationError;
})(Widget);

ValidationError.prototype.baseClass = "validationerror";
ValidationError.prototype.styled = true;
//ValidationError.prototype.memoize = false;

Widget.alias("validation-error", ValidationError);

var HelpText = (function(_HtmlElement) {
	inherits(HelpText, _HtmlElement);

	function HelpText() {
		classCallCheck(this, HelpText);
		return possibleConstructorReturn(this, _HtmlElement.apply(this, arguments));
	}

	return HelpText;
})(HtmlElement);

HelpText.prototype.tag = "span";
HelpText.prototype.baseClass = "helptext";

Widget.alias("help-text", HelpText);

var Label = (function(_HtmlElement) {
	inherits(Label, _HtmlElement);

	function Label() {
		classCallCheck(this, Label);
		return possibleConstructorReturn(this, _HtmlElement.apply(this, arguments));
	}

	Label.prototype.declareData = function declareData() {
		var _HtmlElement$prototyp;

		(_HtmlElement$prototyp = _HtmlElement.prototype.declareData).call.apply(
			_HtmlElement$prototyp,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					required: undefined,
					disabled: undefined,
					htmlFor: undefined
				}
			])
		);
	};

	Label.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.stateMods = _extends({}, data.stateMods, {
			disabled: data.disabled
		});
		_HtmlElement.prototype.prepareData.call(this, context, instance);
	};

	Label.prototype.explore = function explore(context, instance) {
		if (!instance.data.htmlFor) instance.data.htmlFor = context.lastFieldId;
		_HtmlElement.prototype.explore.call(this, context, instance);
	};

	Label.prototype.isValidHtmlAttribute = function isValidHtmlAttribute(attrName) {
		if (attrName == "asterisk") return false;
		return _HtmlElement.prototype.isValidHtmlAttribute.call(this, attrName);
	};

	Label.prototype.attachProps = function attachProps(context, instance, props) {
		_HtmlElement.prototype.attachProps.call(this, context, instance, props);
		props.htmlFor = instance.data.htmlFor;

		if (!props.onClick && instance.data.htmlFor)
			props.onClick = function() {
				//additional focus for LookupFields which are not input based
				var el = document.getElementById(instance.data.htmlFor);
				if (el) FocusManager.focusFirst(el);
			};

		var data = instance.data;

		if (this.asterisk && data.required) {
			if (!isArray(props.children)) props.children = [props.children];
			props.children.push(" ");
			props.children.push(
				VDOM.createElement("span", { key: "asterisk", className: this.CSS.element(this.baseClass, "asterisk") }, "*")
			);
		}
	};

	return Label;
})(HtmlElement);

Label.prototype.baseClass = "label";
Label.prototype.tag = "label";
Label.prototype.asterisk = false;

var Field = (function(_PureContainer) {
	inherits(Field, _PureContainer);

	function Field() {
		classCallCheck(this, Field);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	Field.prototype.declareData = function declareData() {
		var _PureContainer$protot;

		(_PureContainer$protot = _PureContainer.prototype.declareData).call.apply(
			_PureContainer$protot,
			[
				this,
				{
					label: undefined,
					labelWidth: undefined,
					mode: undefined,
					viewMode: undefined,
					id: undefined,
					error: undefined,
					inputStyle: { structured: true },
					inputAttrs: { structured: true },
					emptyText: undefined,
					visited: undefined,
					autoFocus: undefined,
					tabOnEnterKey: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Field.prototype.init = function init() {
		switch (this.validationMode) {
			case "tooltip":
				this.errorTooltip = _extends(
					{
						text: { bind: "$error" },
						mod: "error"
					},
					this.errorTooltip
				);
				break;

			case "help":
			case "help-inline":
				this.help = ValidationError;
				break;

			case "help-block":
				this.help = {
					type: ValidationError,
					mod: "block"
				};
				break;
		}

		if (this.help != null) {
			var helpConfig = {};

			if (this.help.isComponentType) helpConfig = this.help;
			else if (isSelector(this.help)) helpConfig.text = this.help;
			else Object.assign(helpConfig, this.help);

			this.help = HelpText.create(helpConfig);
		}

		if (this.label != null) {
			var labelConfig = {
				mod: this.mod,
				disabled: this.disabled,
				required: this.required,
				asterisk: this.asterisk
			};

			if (this.label.isComponentType) labelConfig = this.label;
			else if (isSelector(this.label)) labelConfig.text = this.label;
			else Object.assign(labelConfig, this.label);

			this.label = Label.create(labelConfig);
		}

		this.inputStyle = parseStyle(this.inputStyle);

		_PureContainer.prototype.init.call(this);
	};

	Field.prototype.initComponents = function initComponents(context, instance) {
		var _PureContainer$protot2;

		return (_PureContainer$protot2 = _PureContainer.prototype.initComponents).call.apply(
			_PureContainer$protot2,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					label: this.label,
					help: this.help
				}
			])
		);
	};

	Field.prototype.initState = function initState(context, instance) {
		instance.state = {
			inputError: false,
			visited: this.visited === true
		};
	};

	Field.prototype.prepareData = function prepareData(context, instance) {
		var _PureContainer$protot3;

		var data = instance.data,
			state = instance.state;

		if (!data.id) data.id = "fld-" + instance.id;

		data._disabled = data.disabled;
		data._readOnly = data.readOnly;
		data._viewMode = data.viewMode || data.mode === "view";
		data._tabOnEnterKey = data.tabOnEnterKey;
		instance.parentDisabled = context.parentDisabled;
		instance.parentReadOnly = context.parentReadOnly;
		instance.parentViewMode = context.parentViewMode;
		instance.parentTabOnEnterKey = context.parentTabOnEnterKey;

		if (typeof data.enabled !== "undefined") data._disabled = !data.enabled;

		this.disableOrValidate(context, instance);

		data.inputStyle = parseStyle(data.inputStyle);

		if (this.labelPlacement && this.label) data.mod = [data.mod, "label-placement-" + this.labelPlacement];

		if (this.helpPlacement && this.help) data.mod = [data.mod, "help-placement-" + this.helpPlacement];

		data.empty = this.isEmpty(data);

		if (data.visited && !state.visited) {
			//feels hacky but it should be ok since we're in the middle of a new render cycle
			state.visited = true;
		}

		(_PureContainer$protot3 = _PureContainer.prototype.prepareData).call.apply(
			_PureContainer$protot3,
			[this].concat(Array.prototype.slice.call(arguments))
		);
	};

	Field.prototype.disableOrValidate = function disableOrValidate(context, instance) {
		var data = instance.data;

		data.disabled = data._disabled || context.parentDisabled;
		data.readOnly = data._readOnly || context.parentReadOnly;
		data.viewMode = data._viewMode || context.parentViewMode;
		data.tabOnEnterKey = data._tabOnEnterKey || context.parentTabOnEnterKey;

		if (!data.error && !data.disabled && !data.viewMode) this.validate(context, instance);

		data.stateMods = _extends({}, data.stateMods, {
			disabled: data.disabled,
			"edit-mode": !data.viewMode,
			"view-mode": data.viewMode
		});
	};

	Field.prototype.explore = function explore(context, instance) {
		var data = instance.data,
			state = instance.state;

		instance.parentDisabled = context.parentDisabled;
		instance.parentReadOnly = context.parentReadOnly;
		instance.parentViewMode = context.parentViewMode;
		instance.parentTabOnEnterKey = context.parentTabOnEnterKey;

		if (
			instance.cache("parentDisabled", context.parentDisabled) ||
			instance.cache("parentReadOnly", context.parentReadOnly) ||
			instance.cache("parentViewMode", context.parentViewMode) ||
			instance.cache("parentTabOnEnterKey", context.parentTabOnEnterKey)
		) {
			instance.markShouldUpdate(context);
			this.disableOrValidate(context, instance);
			this.prepareCSS(context, instance);
		}

		if (!context.validation)
			context.validation = {
				errors: []
			};

		if (data.error) {
			context.validation.errors.push({
				fieldId: data.id,
				message: data.error,
				visited: state.visited,
				type: "error"
			});
		}

		context.push("lastFieldId", data.id);
		_PureContainer.prototype.explore.call(this, context, instance);
	};

	Field.prototype.exploreCleanup = function exploreCleanup(context, instance) {
		context.pop("lastFieldId");
	};

	Field.prototype.isEmpty = function isEmpty(data) {
		return data.value == null;
	};

	Field.prototype.validateRequired = function validateRequired(context, instance) {
		var data = instance.data;

		if (this.isEmpty(data)) return this.requiredText;
	};

	Field.prototype.validate = function validate(context, instance) {
		var _this2 = this;

		var data = instance.data,
			state = instance.state;

		state = state || {};

		if (!data.error) {
			if (state.validating) data.error = this.validatingText;
			else if (data.required) {
				var required = this.validateRequired(context, instance);
				if (required) data.error = state.inputError || required;
			}
		}

		if (
			!data.error &&
			data.value != null &&
			this.onValidate &&
			!state.validating &&
			data.value != state.lastValidatedValue
		) {
			var result = instance.invoke("onValidate", data.value, instance);
			if (isPromise(result)) {
				data.error = this.validatingText;
				instance.setState({
					validating: true,
					lastValidatedValue: data.value
				});
				result
					.then(function(r) {
						instance.setState({
							validating: false,
							inputError: r
						});
					})
					.catch(function(e) {
						instance.setState({
							validating: false,
							inputError: _this2.validationExceptionText
						});
						if (_this2.onValidationException) instance.invoke("onValidationException", e, instance);
						else {
							Console.warn("Unhandled validation exception:", e);
						}
					});
			} else {
				data.error = result;
			}
		}

		if (!data.error && state.inputError) data.error = state.inputError;
	};

	Field.prototype.renderLabel = function renderLabel(context, instance, key) {
		if (instance.components.label) return getContent(instance.components.label.vdom);
	};

	Field.prototype.renderInput = function renderInput(context, instance, key) {
		throw new Error("Not implemented.");
	};

	Field.prototype.renderHelp = function renderHelp(context, instance, key) {
		if (instance.components.help) return getContent(instance.components.help.render(context, key));
	};

	Field.prototype.formatValue = function formatValue(context, _ref) {
		var data = _ref.data;

		return data.text || data.value;
	};

	Field.prototype.renderValue = function renderValue(context, instance, key) {
		var text = this.formatValue(context, instance);
		if (text) {
			return VDOM.createElement("span", null, text);
		}
	};

	Field.prototype.renderContent = function renderContent(context, instance, key) {
		var content = this.renderValue.apply(this, arguments) || this.renderEmptyText.apply(this, arguments);
		return this.renderWrap(context, instance, key, content);
	};

	Field.prototype.renderWrap = function renderWrap(context, instance, key, content) {
		var data = instance.data;

		return VDOM.createElement(
			"div",
			{
				key: key,
				className: data.classNames,
				style: data.style,
				onMouseDown: stopPropagation,
				onTouchStart: stopPropagation
			},
			content,
			this.labelPlacement && this.renderLabel(context, instance, "label")
		);
	};

	Field.prototype.renderEmptyText = function renderEmptyText(context, _ref2, key) {
		var data = _ref2.data;

		return VDOM.createElement(
			"span",
			{ key: key, className: this.CSS.element(this.baseClass, "empty-text") },
			data.emptyText || VDOM.createElement("span", null, "\xA0")
		);
	};

	Field.prototype.render = function render(context, instance, key) {
		var data = instance.data;

		var content = !data.viewMode
			? this.renderInput(context, instance, key)
			: this.renderContent(context, instance, key);

		return {
			label: !this.labelPlacement && this.renderLabel(context, instance, key),
			content: content,
			helpSpacer: this.helpSpacer && instance.components.help ? " " : null,
			help: !this.helpPlacement && this.renderHelp(context, instance, key)
		};
	};

	Field.prototype.handleKeyDown = function handleKeyDown(e, instance) {
		if (this.onKeyDown && instance.invoke("onKeyDown", e, instance) === false) return false;

		if (instance.data.tabOnEnterKey && e.keyCode === 13) {
			var target = e.target;
			setTimeout(function() {
				if (!instance.state.inputError) FocusManager.focusNext(target);
			}, 10);
		}
	};

	return Field;
})(PureContainer);

Field.prototype.validationMode = "tooltip";
Field.prototype.visited = false;
Field.prototype.suppressErrorsUntilVisited = false;
Field.prototype.requiredText = "This field is required.";
Field.prototype.autoFocus = false;
Field.prototype.asterisk = false;
Field.prototype.validatingText = "Validation is in progress...";
Field.prototype.validationExceptionText = "Something went wrong during input validation. Check log for more details.";
Field.prototype.helpSpacer = true;
Field.prototype.trackFocus = false; //add cxs-focus on parent element
Field.prototype.labelPlacement = false;
Field.prototype.helpPlacement = false;
Field.prototype.styled = true;

Localization.registerPrototype("cx/widgets/Field", Field);

function getFieldTooltip(instance) {
	var widget = instance.widget,
		data = instance.data,
		state = instance.state;

	if (widget.errorTooltip && data.error && (!state || state.visited || !widget.suppressErrorsUntilVisited))
		return [
			instance,
			widget.errorTooltip,
			{
				data: {
					$error: data.error
				}
			}
		];
	return [instance, widget.tooltip];
}

function autoFocus(el, component) {
	var data = component.props.data || component.props.instance.data;
	if (el && el !== component.autoFocusEl && data.autoFocus && !isTouchEvent()) FocusManager.focus(el);

	component.autoFocusEl = el;
}

var TextField = (function(_Field) {
	inherits(TextField, _Field);

	function TextField() {
		classCallCheck(this, TextField);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	TextField.prototype.init = function init() {
		if (typeof this.hideClear !== "undefined") this.showClear = !this.hideClear;

		if (this.alwaysShowClear) this.showClear = true;

		_Field.prototype.init.call(this);
	};

	TextField.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					value: null,
					disabled: undefined,
					readOnly: undefined,
					enabled: undefined,
					placeholder: undefined,
					required: undefined,
					minLength: undefined,
					maxLength: undefined,
					icon: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	TextField.prototype.renderInput = function renderInput(context, instance, key) {
		return VDOM.createElement(Input, {
			key: key,
			instance: instance,
			data: instance.data,
			shouldUpdate: instance.shouldUpdate,
			label: this.labelPlacement && getContent(this.renderLabel(context, instance, "label")),
			help: this.helpPlacement && getContent(this.renderHelp(context, instance, "help"))
		});
	};

	TextField.prototype.validate = function validate(context, instance) {
		_Field.prototype.validate.call(this, context, instance);

		var data = instance.data;

		if (!data.error && this.validationRegExp)
			if (!this.validationRegExp.test(data.value)) data.error = this.validationErrorText;

		if (!data.error && data.value) {
			if (typeof data.value === "string" && data.minLength != null && data.value.length < data.minLength)
				data.error = StringTemplate.format(this.minLengthValidationErrorText, data.minLength, data.value.length);
			else if (typeof data.value === "string" && data.maxLength != null && data.value.length > data.maxLength)
				data.error = StringTemplate.format(this.maxLengthValidationErrorText, data.maxLength, data.value.length);
		}
	};

	return TextField;
})(Field);

TextField.prototype.baseClass = "textfield";
TextField.prototype.reactOn = "change input blur";
TextField.prototype.inputType = "text";
TextField.prototype.validationErrorText = "The entered value is not valid.";
TextField.prototype.minLengthValidationErrorText = "Enter {[{0}-{1}]} more character(s).";
TextField.prototype.maxLengthValidationErrorText = "Use {0} characters or fewer.";
TextField.prototype.suppressErrorsUntilVisited = true;
TextField.prototype.icon = null;
TextField.prototype.showClear = false;
TextField.prototype.alwaysShowClear = false;
TextField.prototype.trackBrowserAutofill = false;

Localization.registerPrototype("cx/widgets/TextField", TextField);

var Input = (function(_VDOM$Component) {
	inherits(Input, _VDOM$Component);

	function Input(props) {
		classCallCheck(this, Input);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.state = {
			focus: false
		};
		return _this2;
	}

	Input.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
		return props.shouldUpdate || state !== this.state;
	};

	Input.prototype.render = function render() {
		var _this3 = this;

		var _props = this.props,
			instance = _props.instance,
			data = _props.data,
			label = _props.label,
			help = _props.help;
		var widget = instance.widget,
			state = instance.state;
		var CSS = widget.CSS,
			baseClass = widget.baseClass,
			suppressErrorsUntilVisited = widget.suppressErrorsUntilVisited;

		var icon =
			data.icon &&
			VDOM.createElement(
				"div",
				{
					className: CSS.element(baseClass, "left-icon"),
					onMouseDown: preventDefault,
					onClick: function onClick(e) {
						return _this3.onChange(e, "enter");
					}
				},
				Icon.render(data.icon, { className: CSS.element(baseClass, "icon") })
			);

		var insideButton = void 0;
		if (!data.readOnly && !data.disabled) {
			if (widget.showClear && (widget.alwaysShowClear || !data.required) && data.value != null)
				insideButton = VDOM.createElement(
					"div",
					{
						className: CSS.element(baseClass, "clear"),
						onMouseDown: function onMouseDown(e) {
							return e.preventDefault();
						},
						onClick: function onClick(e) {
							return _this3.onClearClick(e);
						}
					},
					VDOM.createElement(ClearIcon, { className: CSS.element(baseClass, "icon") })
				);
		}

		var empty = this.input ? !this.input.value : data.empty;

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(
					data.classNames,
					CSS.state({
						visited: state.visited,
						focus: this.state.focus,
						icon: !!icon,
						clear: insideButton != null,
						empty: empty && !data.placeholder,
						error: data.error && (state.visited || !suppressErrorsUntilVisited || !empty)
					})
				),
				style: data.style,
				onMouseDown: stopPropagation,
				onTouchStart: stopPropagation
			},
			VDOM.createElement(
				"input",
				_extends(
					{
						ref: function ref(el) {
							_this3.input = el;
						},
						className: CSS.element(baseClass, "input"),
						defaultValue: data.value,
						id: data.id,
						style: data.inputStyle,
						type: widget.inputType,
						disabled: data.disabled,
						readOnly: data.readOnly,
						placeholder: data.placeholder
					},
					data.inputAttrs,
					{
						onMouseMove: this.onMouseMove.bind(this),
						onMouseLeave: this.onMouseLeave.bind(this),
						onInput: function onInput(e) {
							return _this3.onChange(e, "input");
						},
						onChange: function onChange(e) {
							return _this3.onChange(e, "change");
						},
						onKeyDown: this.onKeyDown.bind(this),
						onFocus: this.onFocus.bind(this),
						onBlur: this.onBlur.bind(this),
						onClick: stopPropagation
					}
				)
			),
			insideButton,
			icon,
			label,
			help
		);
	};

	Input.prototype.onFocus = function onFocus() {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.trackFocus) {
			this.setState({
				focus: true
			});
		}
	};

	Input.prototype.onBlur = function onBlur(e) {
		if (this.state.focus)
			this.setState({
				focus: false
			});
		this.onChange(e, "blur");
	};

	Input.prototype.onClearClick = function onClearClick(e) {
		this.props.instance.set("value", null);
	};

	Input.prototype.onMouseMove = function onMouseMove(e) {
		tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(this.props.instance)));
	};

	Input.prototype.onMouseLeave = function onMouseLeave(e) {
		tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(this.props.instance)));
	};

	Input.prototype.componentDidMount = function componentDidMount() {
		var _this4 = this;

		tooltipParentDidMount.apply(undefined, [this.input].concat(getFieldTooltip(this.props.instance)));
		autoFocus(this.input, this);
		if (this.props.instance.widget.trackBrowserAutofill)
			this.autoFillTimer = setInterval(function() {
				if (_this4.props.data.value != _this4.input.value && document.activeElement !== _this4.input)
					_this4.props.instance.set("value", _this4.input.value || null);
			}, 300);
	};

	Input.prototype.componentDidUpdate = function componentDidUpdate() {
		autoFocus(this.input, this);
	};

	Input.prototype.componentWillUnmount = function componentWillUnmount() {
		tooltipParentWillUnmount(this.props.instance);
		if (this.autoFillTimer) clearInterval(this.autoFillTimer);
	};

	Input.prototype.onKeyDown = function onKeyDown(e) {
		var instance = this.props.instance;

		if (instance.widget.handleKeyDown(e, instance) === false) return;

		switch (e.keyCode) {
			case KeyCode.enter:
				this.onChange(e, "enter");
				break;

			case KeyCode.left:
			case KeyCode.right:
				e.stopPropagation();
				break;
		}
	};

	Input.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		var data = props.instance.data;

		if (data.value != this.input.value) this.input.value = data.value || "";
		tooltipParentWillReceiveProps.apply(undefined, [this.input].concat(getFieldTooltip(props.instance)));
	};

	Input.prototype.onChange = function onChange(e, change) {
		var instance = this.props.instance;

		if (change == "blur" || change == "enter") {
			instance.setState({ visited: true });
		}

		var widget = instance.widget,
			data = instance.data;

		if (widget.reactOn.indexOf(change) != -1) {
			var value = e.target.value;
			if (data.maxLength != null && value.length > data.maxLength) {
				value = value.substring(0, data.maxLength);
				this.input.value = value;
			}
			instance.set("value", value || null);
		}
	};

	return Input;
})(VDOM.Component);

Widget.alias("textfield", TextField);

var SquareIcon = registerIcon(
	"square",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 64 64"
			}),
			VDOM.createElement("rect", {
				x: "12",
				y: "12",
				width: "40",
				height: "40",
				fill: "currentColor"
			})
		);
	},
	true
);

var Checkbox = (function(_Field) {
	inherits(Checkbox, _Field);

	function Checkbox() {
		classCallCheck(this, Checkbox);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	Checkbox.prototype.init = function init() {
		if (this.checked) this.value = this.checked;

		_Field.prototype.init.call(this);
	};

	Checkbox.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					value: !this.indeterminate ? false : undefined,
					text: undefined,
					readOnly: undefined,
					disabled: undefined,
					required: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Checkbox.prototype.renderWrap = function renderWrap(context, instance, key, content) {
		var _this2 = this;

		var data = instance.data;

		return VDOM.createElement(
			"label",
			{
				key: key,
				className: data.classNames,
				onMouseDown: stopPropagation,
				onMouseMove: function onMouseMove(e) {
					return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(instance)));
				},
				onMouseLeave: function onMouseLeave(e) {
					return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(instance)));
				},
				onClick: function onClick(e) {
					_this2.handleClick(e, instance);
				},
				style: data.style
			},
			content,
			this.labelPlacement && getContent(this.renderLabel(context, instance, "label"))
		);
	};

	Checkbox.prototype.validateRequired = function validateRequired(context, instance) {
		var data = instance.data;

		if (!data.value) return this.requiredText;
	};

	Checkbox.prototype.renderNativeCheck = function renderNativeCheck(context, instance) {
		var _this3 = this;

		var CSS = this.CSS,
			baseClass = this.baseClass;
		var data = instance.data;

		return VDOM.createElement(
			"input",
			_extends(
				{
					key: "input",
					className: CSS.element(baseClass, "checkbox"),
					id: data.id,
					type: "checkbox",
					checked: data.value || false,
					disabled: data.disabled
				},
				data.inputAttrs,
				{
					onClick: stopPropagation,
					onChange: function onChange(e) {
						_this3.handleChange(e, instance);
					}
				}
			)
		);
	};

	Checkbox.prototype.renderCheck = function renderCheck(context, instance) {
		return VDOM.createElement(CheckboxCmp, {
			key: "check",
			instance: instance,
			data: instance.data,
			shouldUpdate: instance.shouldUpdate
		});
	};

	Checkbox.prototype.renderInput = function renderInput(context, instance, key) {
		var data = instance.data;

		var text = data.text || getContent(this.renderChildren(context, instance));
		var CSS = this.CSS,
			baseClass = this.baseClass;

		return this.renderWrap(context, instance, key, [
			this.native ? this.renderNativeCheck(context, instance) : this.renderCheck(context, instance),
			text
				? VDOM.createElement("div", { key: "text", className: CSS.element(baseClass, "text") }, text)
				: VDOM.createElement("span", { key: "baseline", className: CSS.element(baseClass, "baseline") }, "\xA0")
		]);
	};

	Checkbox.prototype.formatValue = function formatValue(context, instance) {
		var data = instance.data;

		return data.value && (data.text || this.renderChildren(context, instance));
	};

	Checkbox.prototype.handleClick = function handleClick(e, instance) {
		if (this.native) e.stopPropagation();
		else {
			var el = document.getElementById(instance.data.id);
			if (el) el.focus();
			if (!instance.data.viewMode) {
				e.preventDefault();
				e.stopPropagation();
				this.handleChange(e, instance, !instance.data.value);
			}
		}
	};

	Checkbox.prototype.handleChange = function handleChange(e, instance, checked) {
		var data = instance.data;

		if (data.readOnly || data.disabled || data.viewMode) return;

		instance.set("value", checked != null ? checked : e.target.checked);
	};

	return Checkbox;
})(Field);

Checkbox.prototype.baseClass = "checkbox";
Checkbox.prototype.native = false;
Checkbox.prototype.indeterminate = false;
Checkbox.prototype.unfocusable = false;

Widget.alias("checkbox", Checkbox);

var CheckboxCmp = (function(_VDOM$Component) {
	inherits(CheckboxCmp, _VDOM$Component);

	function CheckboxCmp(props) {
		classCallCheck(this, CheckboxCmp);

		var _this4 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this4.state = {
			value: props.data.value
		};
		return _this4;
	}

	CheckboxCmp.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		this.setState({
			value: props.data.value
		});
	};

	CheckboxCmp.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
		return props.shouldUpdate || state != this.state;
	};

	CheckboxCmp.prototype.render = function render() {
		var _props = this.props,
			instance = _props.instance,
			data = _props.data;
		var widget = instance.widget;
		var baseClass = widget.baseClass,
			CSS = widget.CSS;

		var check = false;

		if (this.state.value == null && widget.indeterminate) check = "indeterminate";
		else if (this.state.value) check = "check";

		return VDOM.createElement(
			"span",
			{
				key: "check",
				tabIndex: widget.unfocusable || data.disabled ? null : 0,
				className: CSS.element(baseClass, "input", {
					checked: check
				}),
				style: CSS.parseStyle(data.inputStyle),
				id: data.id,
				onClick: this.onClick.bind(this),
				onKeyDown: this.onKeyDown.bind(this)
			},
			check == "check" && VDOM.createElement(CheckIcon, { className: CSS.element(baseClass, "input-check") }),
			check == "indeterminate" && VDOM.createElement(SquareIcon, { className: CSS.element(baseClass, "input-check") })
		);
	};

	CheckboxCmp.prototype.onClick = function onClick(e) {
		var _props2 = this.props,
			instance = _props2.instance,
			data = _props2.data;
		var widget = instance.widget;

		if (!data.disabled && !data.readOnly) {
			e.stopPropagation();
			e.preventDefault();
			this.setState({ value: !this.state.value });
			widget.handleChange(e, instance, !this.state.value);
		}
	};

	CheckboxCmp.prototype.onKeyDown = function onKeyDown(e) {
		var instance = this.props.instance;

		if (instance.widget.handleKeyDown(e, instance) === false) return;

		switch (e.keyCode) {
			case KeyCode.space:
				this.onClick(e);
				break;
		}
	};

	return CheckboxCmp;
})(VDOM.Component);

var Radio = (function(_Field) {
	inherits(Radio, _Field);

	function Radio() {
		classCallCheck(this, Radio);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	Radio.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					value: undefined,
					selection: undefined,
					option: undefined,
					disabled: undefined,
					readOnly: undefined,
					required: undefined,
					text: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Radio.prototype.init = function init() {
		if (this.selection) this.value = this.selection;

		_Field.prototype.init.call(this);
	};

	Radio.prototype.formatValue = function formatValue(context, _ref) {
		var data = _ref.data;

		return data.text;
	};

	Radio.prototype.prepareData = function prepareData(context, _ref2) {
		var _Field$prototype$prep;

		var data = _ref2.data;

		(_Field$prototype$prep = _Field.prototype.prepareData).call.apply(
			_Field$prototype$prep,
			[this].concat(Array.prototype.slice.call(arguments))
		);
		data.checked = data.value === data.option;
	};

	Radio.prototype.renderValue = function renderValue(context, _ref3) {
		var _Field$prototype$rend;

		var data = _ref3.data;

		if (data.value === data.option)
			return (_Field$prototype$rend = _Field.prototype.renderValue).call.apply(
				_Field$prototype$rend,
				[this].concat(Array.prototype.slice.call(arguments))
			);
		return null;
	};

	Radio.prototype.renderWrap = function renderWrap(context, instance, key, content) {
		var _this2 = this;

		var data = instance.data;

		return VDOM.createElement(
			"label",
			{
				key: key,
				className: data.classNames,
				style: data.style,
				onMouseDown: stopPropagation,
				onTouchStart: stopPropagation,
				onMouseMove: function onMouseMove(e) {
					return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(instance)));
				},
				onMouseLeave: function onMouseLeave(e) {
					return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(instance)));
				},
				onClick: function onClick(e) {
					_this2.handleClick(e, instance);
				},
				htmlFor: data.id
			},
			content,
			this.labelPlacement && getContent(this.renderLabel(context, instance, "label"))
		);
	};

	Radio.prototype.renderNativeCheck = function renderNativeCheck(context, instance) {
		var _this3 = this;

		var CSS = this.CSS,
			baseClass = this.baseClass;
		var data = instance.data;

		return VDOM.createElement(
			"input",
			_extends(
				{
					key: "input",
					className: CSS.element(baseClass, "radio"),
					id: data.id,
					type: "radio",
					checked: data.checked,
					disabled: data.disabled
				},
				data.inputAttrs,
				{
					onClick: stopPropagation,
					onChange: function onChange(e) {
						_this3.handleChange(e, instance);
					}
				}
			)
		);
	};

	Radio.prototype.renderCheck = function renderCheck(context, instance) {
		return VDOM.createElement(RadioCmp, {
			key: "check",
			instance: instance,
			data: instance.data,
			shouldUpdate: instance.shouldUpdate
		});
	};

	Radio.prototype.renderInput = function renderInput(context, instance, key) {
		var data = instance.data;

		var text = data.text || getContent(this.renderChildren(context, instance));
		var CSS = this.CSS,
			baseClass = this.baseClass;

		return this.renderWrap(context, instance, key, [
			this.native ? this.renderNativeCheck(context, instance) : this.renderCheck(context, instance),
			text
				? VDOM.createElement("div", { key: "text", className: CSS.element(baseClass, "text") }, text)
				: VDOM.createElement("span", { key: "baseline", className: CSS.element(baseClass, "baseline") }, "\xA0")
		]);
	};

	Radio.prototype.handleClick = function handleClick(e, instance) {
		if (this.native) e.stopPropagation();
		else {
			var el = document.getElementById(instance.data.id);
			if (el) el.focus();
			e.preventDefault();
			this.handleChange(e, instance);
		}
	};

	Radio.prototype.handleChange = function handleChange(e, instance) {
		var data = instance.data;

		if (data.disabled || data.readOnly || data.viewMode) return;
		instance.set("value", data.option);
	};

	return Radio;
})(Field);

Radio.prototype.baseClass = "radio";
Radio.prototype.native = false;

Widget.alias("radio", Radio);

var RadioCmp = (function(_VDOM$Component) {
	inherits(RadioCmp, _VDOM$Component);

	function RadioCmp(props) {
		classCallCheck(this, RadioCmp);

		var _this4 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this4.state = {
			value: props.data.checked
		};
		return _this4;
	}

	RadioCmp.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		this.setState({
			value: props.data.checked
		});
	};

	RadioCmp.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
		return props.shouldUpdate || state != this.state;
	};

	RadioCmp.prototype.render = function render() {
		var _props = this.props,
			instance = _props.instance,
			data = _props.data;
		var widget = instance.widget;
		var baseClass = widget.baseClass,
			CSS = widget.CSS;

		return VDOM.createElement("span", {
			key: "check",
			tabIndex: data.disabled ? null : 0,
			className: CSS.element(baseClass, "input", {
				checked: this.state.value
			}),
			style: CSS.parseStyle(data.inputStyle),
			id: data.id,
			onClick: this.onClick.bind(this),
			onKeyDown: this.onKeyDown.bind(this)
		});
	};

	RadioCmp.prototype.onClick = function onClick(e) {
		var _props2 = this.props,
			instance = _props2.instance,
			data = _props2.data;
		var widget = instance.widget;

		if (!data.disabled && !data.readOnly) {
			e.stopPropagation();
			e.preventDefault();
			widget.handleChange(e, instance);
		}
	};

	RadioCmp.prototype.onKeyDown = function onKeyDown(e) {
		var instance = this.props.instance;

		if (instance.widget.handleKeyDown(e, instance) === false) return;

		switch (e.keyCode) {
			case KeyCode.space:
				this.onClick(e);
				break;
		}
	};

	return RadioCmp;
})(VDOM.Component);

var Select = (function(_Field) {
	inherits(Select, _Field);

	function Select() {
		classCallCheck(this, Select);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	Select.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					value: undefined,
					disabled: undefined,
					enabled: undefined,
					required: undefined,
					placeholder: undefined,
					icon: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Select.prototype.init = function init() {
		if (isDefined(this.hideClear)) this.showClear = !this.hideClear;

		_Field.prototype.init.call(this);
	};

	Select.prototype.renderInput = function renderInput(context, instance, key) {
		var _this2 = this;

		return VDOM.createElement(
			SelectComponent,
			{
				key: key,
				instance: instance,
				multiple: this.multiple,
				select: function select(v) {
					return _this2.select(v, instance);
				},
				label: this.labelPlacement && getContent(this.renderLabel(context, instance, "label")),
				help: this.helpPlacement && getContent(this.renderHelp(context, instance, "help"))
			},
			this.renderChildren(context, instance)
		);
	};

	Select.prototype.convert = function convert(value) {
		if (value == this.nullString) return null;
		if (value == "true") return true;
		if (value == "false") return false;
		if (value.match(/^\d+(\.\d+)?$/)) return Number(value);
		return value;
	};

	Select.prototype.select = function select(value, instance) {
		if (this.convertValues && value != null) value = this.convert(value);
		instance.set("value", value);
	};

	Select.prototype.add = function add(item) {
		if (isString(item)) return;
		_Field.prototype.add.call(this, item);
	};

	return Select;
})(Field);

Select.prototype.baseClass = "select";
Select.prototype.multiple = false;
Select.prototype.convertValues = true;
Select.prototype.nullString = "";
Select.prototype.suppressErrorsUntilVisited = true;
Select.prototype.showClear = true;
Select.prototype.alwaysShowClear = false;
Select.prototype.icon = null;

Widget.alias("select", Select);
Localization.registerPrototype("cx/widgets/Select", Select);

var SelectComponent = (function(_VDOM$Component) {
	inherits(SelectComponent, _VDOM$Component);

	function SelectComponent(props) {
		classCallCheck(this, SelectComponent);

		var _this3 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this3.state = {
			visited: false,
			focus: false
		};
		return _this3;
	}

	SelectComponent.prototype.render = function render() {
		var _this4 = this;

		var _props = this.props,
			multiple = _props.multiple,
			select = _props.select,
			instance = _props.instance,
			label = _props.label,
			help = _props.help;
		var data = instance.data,
			widget = instance.widget,
			state = instance.state;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var icon =
			data.icon &&
			VDOM.createElement(
				"div",
				{ className: CSS.element(baseClass, "left-icon") },
				Icon.render(data.icon, { className: CSS.element(baseClass, "icon") })
			);

		var insideButton = void 0,
			readOnly = data.disabled || data.readOnly;

		if (
			widget.showClear &&
			!readOnly &&
			!this.props.multiple &&
			(widget.alwaysShowClear || !data.required) &&
			data.placeholder &&
			data.value != null
		) {
			insideButton = VDOM.createElement(
				"div",
				{
					onMouseDown: preventDefault,
					onClick: function onClick(e) {
						return _this4.onClearClick(e);
					},
					className: CSS.element(baseClass, "clear")
				},
				VDOM.createElement(ClearIcon, { className: CSS.element(baseClass, "icon") })
			);
		} else {
			insideButton = VDOM.createElement(
				"div",
				{ className: CSS.element(baseClass, "tool") },
				VDOM.createElement(DropdownIcon, { className: CSS.element(baseClass, "icon") })
			);
		}

		var placeholder = void 0;
		if (data.placeholder) {
			placeholder = VDOM.createElement(
				"option",
				{
					value: widget.nullString,
					className: CSS.element(baseClass, "placeholder"),
					disabled: true,
					hidden: true
				},
				data.placeholder
			);
		}

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(
					data.classNames,
					CSS.state({
						visited: state.visited,
						icon: data.icon,
						focus: this.state.focus,
						error: state.visited && data.error,
						empty: data.empty && !data.placeholder
					})
				),
				style: data.style,
				onMouseDown: stopPropagation,
				onTouchStart: stopPropagation
			},
			VDOM.createElement(
				"select",
				_extends(
					{
						id: data.id,
						ref: function ref(el) {
							_this4.select = el;
						},
						className: CSS.element(baseClass, "select"),
						style: data.inputStyle,
						value: data.value || widget.nullString,
						multiple: multiple,
						disabled: data.disabled
					},
					data.inputAttrs,
					{
						onBlur: this.onBlur.bind(this),
						onFocus: function onFocus(e) {
							return _this4.onFocus();
						},
						onChange: function onChange(e) {
							e.preventDefault();
							select(e.target.value);
						},
						onMouseMove: function onMouseMove(e) {
							return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(instance)));
						},
						onMouseLeave: function onMouseLeave(e) {
							return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(instance)));
						}
					}
				),
				placeholder,
				this.props.children
			),
			insideButton,
			icon,
			label,
			help
		);
	};

	SelectComponent.prototype.onBlur = function onBlur() {
		this.props.instance.setState({ visited: true });
		if (this.state.focus)
			this.setState({
				focus: false
			});
	};

	SelectComponent.prototype.onFocus = function onFocus() {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.trackFocus) {
			this.setState({
				focus: true
			});
		}
	};

	SelectComponent.prototype.onClearClick = function onClearClick(e) {
		e.preventDefault();
		e.stopPropagation();
		var instance = this.props.instance;
		var widget = instance.widget;

		instance.set("value", widget.emptyValue);
	};

	SelectComponent.prototype.componentDidMount = function componentDidMount() {
		var select = this.props.select;

		select(this.select.value);
		tooltipParentDidMount.apply(undefined, [this.select].concat(getFieldTooltip(this.props.instance)));
		autoFocus(this.select, this);
	};

	SelectComponent.prototype.componentDidUpdate = function componentDidUpdate() {
		autoFocus(this.select, this);
	};

	SelectComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		tooltipParentWillReceiveProps.apply(undefined, [this.select].concat(getFieldTooltip(props.instance)));
	};

	return SelectComponent;
})(VDOM.Component);

var Option = (function(_HtmlElement) {
	inherits(Option, _HtmlElement);

	function Option() {
		classCallCheck(this, Option);
		return possibleConstructorReturn(this, _HtmlElement.apply(this, arguments));
	}

	Option.prototype.declareData = function declareData() {
		var _HtmlElement$prototyp;

		(_HtmlElement$prototyp = _HtmlElement.prototype.declareData).call.apply(
			_HtmlElement$prototyp,
			[
				this,
				{
					value: undefined,
					disabled: undefined,
					enabled: undefined,
					selected: undefined,
					text: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Option.prototype.prepareData = function prepareData(context, _ref) {
		var _HtmlElement$prototyp2;

		var data = _ref.data;

		(_HtmlElement$prototyp2 = _HtmlElement.prototype.prepareData).call.apply(
			_HtmlElement$prototyp2,
			[this].concat(Array.prototype.slice.call(arguments))
		);
		if (data.value != null) data.value = data.value.toString();
	};

	Option.prototype.render = function render(context, instance, key) {
		var data = instance.data;

		return VDOM.createElement(
			"option",
			{ key: key, value: data.value },
			data.text || this.renderChildren(context, instance)
		);
	};

	return Option;
})(HtmlElement);

Widget.alias("option", Option);

var ForwardIcon = registerIcon(
	"forward",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 20 20"
			}),
			VDOM.createElement("path", {
				fill: "currentColor",
				strokeWidth: "0",
				stroke: "currentColor",
				d: "M10.15 15.5L14.5 10l-4.33-5.47-.65.47 3.98 5-4 5z"
			}),
			VDOM.createElement("path", {
				fill: "currentColor",
				strokeWidth: "0",
				stroke: "currentColor",
				d: "M6.15 15.5L10.5 10 6.17 4.53 5.52 5l3.98 5-4 5z"
			})
		);
	},
	true
);

var Calendar = (function(_Field) {
	inherits(Calendar, _Field);

	function Calendar() {
		classCallCheck(this, Calendar);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	Calendar.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					value: undefined,
					refDate: undefined,
					disabled: undefined,
					minValue: undefined,
					minExclusive: undefined,
					maxValue: undefined,
					maxExclusive: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Calendar.prototype.prepareData = function prepareData(context, _ref) {
		var _Field$prototype$prep;

		var data = _ref.data;

		data.stateMods = {
			disabled: data.disabled
		};

		if (data.value) data.date = zeroTime(new Date(data.value));

		if (data.refDate) data.refDate = zeroTime(new Date(data.refDate));

		if (data.maxValue) data.maxValue = zeroTime(new Date(data.maxValue));

		if (data.minValue) data.minValue = zeroTime(new Date(data.minValue));

		(_Field$prototype$prep = _Field.prototype.prepareData).call.apply(
			_Field$prototype$prep,
			[this].concat(Array.prototype.slice.call(arguments))
		);
	};

	Calendar.prototype.validate = function validate(context, instance) {
		_Field.prototype.validate.call(this, context, instance);
		var data = instance.data;

		if (!data.error && data.date) {
			var d = void 0;
			if (data.maxValue) {
				d = dateDiff(data.date, data.maxValue);
				if (d > 0) data.error = StringTemplate.format(this.maxValueErrorText, data.maxValue);
				else if (d == 0 && data.maxExclusive)
					data.error = StringTemplate.format(this.maxExclusiveErrorText, data.maxValue);
			}

			if (data.minValue) {
				d = dateDiff(data.date, data.minValue);
				if (d < 0) data.error = StringTemplate.format(this.minValueErrorText, data.minValue);
				else if (d == 0 && data.minExclusive)
					data.error = StringTemplate.format(this.minExclusiveErrorText, data.minValue);
			}
		}
	};

	Calendar.prototype.renderInput = function renderInput(context, instance, key) {
		var _this2 = this;

		return VDOM.createElement(CalendarCmp, {
			key: key,
			instance: instance,
			handleSelect: function handleSelect(e, date) {
				return _this2.handleSelect(e, instance, date);
			}
		});
	};

	Calendar.prototype.handleSelect = function handleSelect(e, instance, date) {
		var store = instance.store,
			data = instance.data,
			widget = instance.widget;

		e.stopPropagation();

		if (data.disabled) return;

		if (!validationCheck(date, data)) return;

		if (this.onBeforeSelect && instance.invoke("onBeforeSelect", e, instance, date) === false) return;

		if (widget.partial) {
			var mixed = new Date(data.value);
			if (data.value && !isNaN(mixed)) {
				mixed.setFullYear(date.getFullYear());
				mixed.setMonth(date.getMonth());
				mixed.setDate(date.getDate());
				date = mixed;
			}
		}

		instance.set("value", date.toISOString());

		if (this.onSelect) instance.invoke("onSelect", e, instance, date);
	};

	return Calendar;
})(Field);

Calendar.prototype.baseClass = "calendar";
Calendar.prototype.highlightToday = true;
Calendar.prototype.maxValueErrorText = "Select a date not after {0:d}.";
Calendar.prototype.maxExclusiveErrorText = "Select a date before {0:d}.";
Calendar.prototype.minValueErrorText = "Select a date not before {0:d}.";
Calendar.prototype.minExclusiveErrorText = "Select a date after {0:d}.";
Calendar.prototype.suppressErrorsUntilVisited = false;

Localization.registerPrototype("cx/widgets/Calendar", Calendar);

var validationCheck = function validationCheck(date, data) {
	if (data.maxValue && !upperBoundCheck(date, data.maxValue, data.maxExclusive)) return false;

	if (data.minValue && !lowerBoundCheck(date, data.minValue, data.minExclusive)) return false;

	return true;
};

var CalendarCmp = (function(_VDOM$Component) {
	inherits(CalendarCmp, _VDOM$Component);

	function CalendarCmp(props) {
		classCallCheck(this, CalendarCmp);

		var _this3 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		var data = props.instance.data;

		var refDate = data.refDate ? data.refDate : data.date || zeroTime(new Date());

		_this3.state = Object.assign(
			{
				hover: false,
				focus: false,
				cursor: zeroTime(data.date || refDate)
			},
			_this3.getPage(refDate)
		);

		_this3.handleMouseMove = _this3.handleMouseMove.bind(_this3);
		_this3.handleMouseDown = _this3.handleMouseDown.bind(_this3);
		return _this3;
	}

	CalendarCmp.prototype.getPage = function getPage(refDate) {
		refDate = zeroTime(refDate); //make a copy
		var monthDate = new Date(refDate.getFullYear(), refDate.getMonth(), 1);

		var startDate = new Date(monthDate);
		startDate.setDate(1 - startDate.getDay());

		var endDate = new Date(monthDate);
		endDate.setMonth(monthDate.getMonth() + 1);
		endDate.setDate(endDate.getDate() - 1);
		endDate.setDate(endDate.getDate() + 6 - endDate.getDay());

		return {
			refDate: refDate,
			startDate: startDate,
			endDate: endDate
		};
	};

	CalendarCmp.prototype.moveCursor = function moveCursor(e, date) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

		e.preventDefault();
		e.stopPropagation();

		date = zeroTime(date);
		if (date.getTime() == this.state.cursor.getTime()) return;

		var refDate = this.state.refDate;

		if (options.movePage || date < this.state.startDate || date > this.state.endDate) refDate = date;

		this.setState(
			_extends({}, this.getPage(refDate), {
				cursor: date
			})
		);
	};

	CalendarCmp.prototype.move = function move(e, period, delta) {
		e.preventDefault();
		e.stopPropagation();

		var refDate = this.state.refDate;

		switch (period) {
			case "y":
				refDate.setFullYear(refDate.getFullYear() + delta);
				break;

			case "m":
				refDate.setMonth(refDate.getMonth() + delta);
				break;
		}

		var page = this.getPage(refDate);
		if (this.state.cursor < page.startDate) page.cursor = page.startDate;
		else if (this.state.cursor > page.endDate) page.cursor = page.endDate;

		this.setState(page);
	};

	CalendarCmp.prototype.handleKeyPress = function handleKeyPress(e) {
		var cursor = new Date(this.state.cursor);

		switch (e.keyCode) {
			case KeyCode.enter:
				this.props.handleSelect(e, this.state.cursor);
				break;

			case KeyCode.left:
				cursor.setDate(cursor.getDate() - 1);
				this.moveCursor(e, cursor);
				break;

			case KeyCode.right:
				cursor.setDate(cursor.getDate() + 1);
				this.moveCursor(e, cursor);
				break;

			case KeyCode.up:
				cursor.setDate(cursor.getDate() - 7);
				this.moveCursor(e, cursor);
				break;

			case KeyCode.down:
				cursor.setDate(cursor.getDate() + 7);
				this.moveCursor(e, cursor);
				break;

			case KeyCode.pageUp:
				cursor.setMonth(cursor.getMonth() - 1);
				this.moveCursor(e, cursor, { movePage: true });
				break;

			case KeyCode.pageDown:
				cursor.setMonth(cursor.getMonth() + 1);
				this.moveCursor(e, cursor, { movePage: true });
				break;

			case KeyCode.home:
				cursor.setDate(1);
				this.moveCursor(e, cursor, { movePage: true });
				break;

			case KeyCode.end:
				cursor.setMonth(cursor.getMonth() + 1);
				cursor.setDate(0);
				this.moveCursor(e, cursor, { movePage: true });
				break;

			default:
				var instance = this.props.instance;
				var widget = instance.widget;

				if (widget.onKeyDown) instance.invoke("onKeyDown", e, instance);
				break;
		}
	};

	CalendarCmp.prototype.handleWheel = function handleWheel(e) {
		e.preventDefault();
		e.stopPropagation();

		var cursor = new Date(this.state.cursor);

		if (e.deltaY < 0) {
			cursor.setMonth(cursor.getMonth() - 1);
			this.moveCursor(e, cursor, { movePage: true });
		} else if (e.deltaY > 0) {
			cursor.setMonth(cursor.getMonth() + 1);
			this.moveCursor(e, cursor, { movePage: true });
		}
	};

	CalendarCmp.prototype.handleBlur = function handleBlur(e) {
		FocusManager.nudge();
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onBlur) instance.invoke("onBlur", e, instance);
		this.setState({
			focus: false
		});
	};

	CalendarCmp.prototype.handleFocus = function handleFocus(e) {
		oneFocusOut(this, this.el, this.handleFocusOut.bind(this));
		this.setState({
			focus: true
		});
	};

	CalendarCmp.prototype.handleFocusOut = function handleFocusOut() {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onFocusOut) instance.invoke("onFocusOut", null, instance);
	};

	CalendarCmp.prototype.handleMouseLeave = function handleMouseLeave(e) {
		tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(this.props.instance)));
		this.setState({
			hover: false
		});
	};

	CalendarCmp.prototype.handleMouseEnter = function handleMouseEnter(e) {
		this.setState({
			hover: true
		});
	};

	CalendarCmp.prototype.handleMouseMove = function handleMouseMove(e) {
		this.moveCursor(e, readDate(e.target.dataset));
	};

	CalendarCmp.prototype.handleMouseDown = function handleMouseDown(e) {
		this.props.handleSelect(e, readDate(e.target.dataset));
	};

	CalendarCmp.prototype.componentDidMount = function componentDidMount() {
		//calendar doesn't bring up keyboard so it's ok to focus it even on mobile
		if (this.props.instance.widget.autoFocus) this.el.focus();

		tooltipParentDidMount.apply(undefined, [this.el].concat(getFieldTooltip(this.props.instance)));
	};

	CalendarCmp.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		var data = props.instance.data;

		if (data.date)
			this.setState(
				_extends({}, this.getPage(data.date), {
					value: data.date
				})
			);

		tooltipParentWillReceiveProps.apply(undefined, [this.el].concat(getFieldTooltip(props.instance)));
	};

	CalendarCmp.prototype.componentWillUnmount = function componentWillUnmount() {
		offFocusOut(this);
		tooltipParentWillUnmount(this.props.instance);
	};

	CalendarCmp.prototype.render = function render() {
		var _this4 = this;

		var _props$instance = this.props.instance,
			data = _props$instance.data,
			widget = _props$instance.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var refDate = this.state.refDate;

		var month = refDate.getMonth();
		var year = refDate.getFullYear();

		var startDate = new Date(year, month, 1);
		startDate.setDate(1 - startDate.getDay());

		var weeks = [];
		var date = startDate;

		var today = zeroTime(new Date());
		while (date < refDate || date.getMonth() == month) {
			var days = [];
			for (var i = 0; i < 7; i++) {
				var unselectable = !validationCheck(date, data);
				var classNames = CSS.state({
					outside: month != date.getMonth(),
					unselectable: unselectable,
					selected: data.date && sameDate(data.date, date),
					cursor: (this.state.hover || this.state.focus) && this.state.cursor && sameDate(this.state.cursor, date),
					today: widget.highlightToday && sameDate(date, today)
				});
				var dateInst = new Date(date);
				days.push(
					VDOM.createElement(
						"td",
						{
							key: i,
							className: classNames,
							"data-year": dateInst.getFullYear(),
							"data-month": dateInst.getMonth() + 1,
							"data-date": dateInst.getDate(),
							onMouseMove: unselectable ? null : this.handleMouseMove,
							onMouseDown: unselectable ? null : this.handleMouseDown
						},
						date.getDate()
					)
				);
				date.setDate(date.getDate() + 1);
			}
			weeks.push(
				VDOM.createElement(
					"tr",
					{ key: weeks.length, className: CSS.element(baseClass, "week") },
					VDOM.createElement("td", null),
					days,
					VDOM.createElement("td", null)
				)
			);
		}

		var culture = Culture.getDateTimeCulture();
		var monthNames = culture.getMonthNames("long");
		var dayNames = culture.getWeekdayNames("short").map(function(x) {
			return x.substr(0, 2);
		});

		return VDOM.createElement(
			"div",
			{
				className: data.classNames,
				tabIndex: data.disabled ? null : 0,
				onKeyDown: function onKeyDown(e) {
					return _this4.handleKeyPress(e);
				},
				onMouseDown: function onMouseDown(e) {
					return e.stopPropagation();
				},
				ref: function ref(el) {
					_this4.el = el;
				},
				onMouseMove: function onMouseMove(e) {
					return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(_this4.props.instance)));
				},
				onMouseLeave: function onMouseLeave(e) {
					return _this4.handleMouseLeave(e);
				},
				onMouseEnter: function onMouseEnter(e) {
					return _this4.handleMouseEnter(e);
				},
				onWheel: function onWheel(e) {
					return _this4.handleWheel(e);
				},
				onFocus: function onFocus(e) {
					return _this4.handleFocus(e);
				},
				onBlur: function onBlur(e) {
					return _this4.handleBlur(e);
				}
			},
			VDOM.createElement(
				"table",
				null,
				VDOM.createElement(
					"thead",
					null,
					VDOM.createElement(
						"tr",
						{ key: "h", className: CSS.element(baseClass, "header") },
						VDOM.createElement("td", null),
						VDOM.createElement(
							"td",
							{
								onClick: function onClick(e) {
									return _this4.move(e, "y", -1);
								}
							},
							VDOM.createElement(ForwardIcon, { className: CSS.element(baseClass, "icon-prev-year") })
						),
						VDOM.createElement(
							"td",
							{
								onClick: function onClick(e) {
									return _this4.move(e, "m", -1);
								}
							},
							VDOM.createElement(DropdownIcon, { className: CSS.element(baseClass, "icon-prev-month") })
						),
						VDOM.createElement(
							"th",
							{
								className: CSS.element(baseClass, "display"),
								colSpan: "3"
							},
							monthNames[month],
							VDOM.createElement("br", null),
							year
						),
						VDOM.createElement(
							"td",
							{
								onClick: function onClick(e) {
									return _this4.move(e, "m", +1);
								}
							},
							VDOM.createElement(DropdownIcon, { className: CSS.element(baseClass, "icon-next-month") })
						),
						VDOM.createElement(
							"td",
							{
								onClick: function onClick(e) {
									return _this4.move(e, "y", +1);
								}
							},
							VDOM.createElement(ForwardIcon, { className: CSS.element(baseClass, "icon-next-year") })
						),
						VDOM.createElement("td", null)
					),
					VDOM.createElement(
						"tr",
						{ key: "d", className: CSS.element(baseClass, "day-names") },
						VDOM.createElement("td", null),
						dayNames.map(function(name, i) {
							return VDOM.createElement("th", { key: i }, name);
						}),
						VDOM.createElement("td", null)
					)
				),
				VDOM.createElement("tbody", null, weeks)
			)
		);
	};

	return CalendarCmp;
})(VDOM.Component);

var readDate = function readDate(ds) {
	return new Date(Number(ds.year), Number(ds.month) - 1, Number(ds.date));
};

Widget.alias("calendar", Calendar);

var LookupField = (function(_Field) {
	inherits(LookupField, _Field);

	function LookupField() {
		classCallCheck(this, LookupField);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	LookupField.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		var additionalAttributes = this.multiple
			? { values: undefined, records: undefined }
			: { value: undefined, text: undefined };

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					disabled: undefined,
					enabled: undefined,
					placeholder: undefined,
					required: undefined,
					options: undefined,
					icon: undefined
				},
				additionalAttributes
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	LookupField.prototype.init = function init() {
		if (isDefined(this.hideClear)) this.showClear = !this.hideClear;

		if (!this.bindings) {
			var b = [];
			if (this.value && this.value.bind)
				b.push({
					key: true,
					local: this.value.bind,
					remote: "$option." + this.optionIdField
				});

			if (this.text && this.text.bind)
				b.push({
					local: this.text.bind,
					remote: "$option." + this.optionTextField
				});
			this.bindings = b;
		}

		if (this.bindings.length == 0 && this.multiple)
			this.bindings = [
				{
					key: true,
					local: "$value." + this.valueIdField,
					remote: "$option." + this.optionIdField
				},
				{
					local: "$value." + this.valueTextField,
					remote: "$option." + this.optionTextField
				}
			];

		this.keyBindings = this.bindings.filter(function(b) {
			return b.key;
		});

		if (!this.items && !this.children)
			this.items = {
				$type: Text,
				bind: "$option." + this.optionTextField
			};

		this.itemConfig = this.children || this.items;

		delete this.items;
		delete this.children;

		_Field.prototype.init.call(this);
	};

	LookupField.prototype.prepareData = function prepareData(context, instance) {
		var _this2 = this;

		var data = instance.data,
			store = instance.store;

		data.stateMods = {
			multiple: this.multiple,
			disabled: data.disabled
		};

		data.selectedKeys = [];

		if (this.multiple) {
			var _data$selectedKeys;

			if (isArray(data.values) && isArray(data.options)) {
				data.selectedKeys = data.values.map(function(v) {
					return _this2.keyBindings.length == 1 ? [v] : v;
				});
				var map = {};
				data.options.filter(function($option) {
					var optionKey = getOptionKey(_this2.keyBindings, { $option: $option });
					for (var i = 0; i < data.selectedKeys.length; i++) {
						if (areKeysEqual(optionKey, data.selectedKeys[i])) {
							map[i] = convertOption(_this2.bindings, { $option: $option });
							break;
						}
					}
				});
				data.records = [];
				for (var i = 0; i < data.selectedKeys.length; i++) {
					if (map[i]) data.records.push(map[i]);
				}
			} else if (isArray(data.records))
				(_data$selectedKeys = data.selectedKeys).push.apply(
					_data$selectedKeys,
					data.records.map(function($value) {
						return _this2.keyBindings.map(function(b) {
							return Binding.get(b.local).value({ $value: $value });
						});
					})
				);
		} else {
			var dataViewData = store.getData();
			data.selectedKeys.push(
				this.keyBindings.map(function(b) {
					return Binding.get(b.local).value(dataViewData);
				})
			);
			if (!this.text && isArray(data.options)) {
				var option = data.options.find(function($option) {
					return areKeysEqual(getOptionKey(_this2.keyBindings, { $option: $option }), data.selectedKeys[0]);
				});
				data.text = (option && option[this.optionTextField]) || "";
			}
		}

		_Field.prototype.prepareData.call(this, context, instance);
	};

	LookupField.prototype.renderInput = function renderInput(context, instance, key) {
		return VDOM.createElement(LookupComponent, {
			key: key,
			multiple: this.multiple,
			instance: instance,
			itemConfig: this.itemConfig,
			bindings: this.bindings,
			baseClass: this.baseClass,
			label: this.labelPlacement && getContent(this.renderLabel(context, instance, "label")),
			help: this.helpPlacement && getContent(this.renderHelp(context, instance, "help"))
		});
	};

	LookupField.prototype.filterOptions = function filterOptions(instance, options, query) {
		var _this3 = this;

		if (!query) return options;
		var textPredicate = getSearchQueryPredicate(query);
		return options.filter(function(o) {
			return isString(o[_this3.optionTextField]) && textPredicate(o[_this3.optionTextField]);
		});
	};

	LookupField.prototype.isEmpty = function isEmpty(data) {
		if (this.multiple) {
			if ((isArray(data.values) && data.values.length > 0) || (isArray(data.records) && data.records.length > 0))
				return false;
		}

		return data.value == null;
	};

	return LookupField;
})(Field);

LookupField.prototype.baseClass = "lookupfield";
LookupField.prototype.memoize = false;
LookupField.prototype.multiple = false;
LookupField.prototype.queryDelay = 150;
LookupField.prototype.minQueryLength = 0;
LookupField.prototype.hideSearchField = false;
LookupField.prototype.minOptionsForSearchField = 7;
LookupField.prototype.loadingText = "Loading...";
LookupField.prototype.queryErrorText = "Error occurred while querying for lookup data.";
LookupField.prototype.noResultsText = "No results found.";
LookupField.prototype.optionIdField = "id";
LookupField.prototype.optionTextField = "text";
LookupField.prototype.valueIdField = "id";
LookupField.prototype.valueTextField = "text";
LookupField.prototype.suppressErrorsUntilVisited = true;
LookupField.prototype.fetchAll = false;
LookupField.prototype.cacheAll = false;
LookupField.prototype.showClear = true;
LookupField.prototype.alwaysShowClear = false;
LookupField.prototype.closeOnSelect = true;
LookupField.prototype.minQueryLengthMessageText = "Type in at least {0} character(s).";
LookupField.prototype.icon = null;

Localization.registerPrototype("cx/widgets/LookupField", LookupField);

Widget.alias("lookupfield", LookupField);

function getOptionKey(bindings, data) {
	return bindings
		.filter(function(a) {
			return a.key;
		})
		.map(function(b) {
			return Binding.get(b.remote).value(data);
		});
}

function areKeysEqual(key1, key2) {
	if (!key1 || !key2 || key1.length != key2.length) return false;

	for (var i = 0; i < key1.length; i++) {
		if (key1[i] != key2[i]) return false;
	}
	return true;
}

function convertOption(bindings, data) {
	var result = { $value: {} };
	bindings.forEach(function(b) {
		var value = Binding.get(b.remote).value(data);
		result = Binding.get(b.local).set(result, value);
	});
	return result.$value;
}

var LookupComponent = (function(_VDOM$Component) {
	inherits(LookupComponent, _VDOM$Component);

	function LookupComponent(props) {
		classCallCheck(this, LookupComponent);

		var _this4 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		var _this4$props$instance = _this4.props.instance,
			data = _this4$props$instance.data,
			store = _this4$props$instance.store;

		_this4.dom = {};
		_this4.state = {
			options: [],
			formatted: data.formatted,
			value: data.formatted,
			dropdownOpen: false,
			cursorKey: null,
			focus: false
		};

		_this4.itemStore = new ReadOnlyDataView({
			store: store
		});
		return _this4;
	}

	LookupComponent.prototype.getOptionKey = function getOptionKey(data) {
		return this.props.bindings
			.filter(function(a) {
				return a.key;
			})
			.map(function(b) {
				return Binding.get(b.remote).value(data);
			});
	};

	LookupComponent.prototype.getLocalKey = function getLocalKey(data) {
		return this.props.bindings
			.filter(function(a) {
				return a.key;
			})
			.map(function(b) {
				return Binding.get(b.local).value(data);
			});
	};

	LookupComponent.prototype.areKeysEqual = function areKeysEqual(key1, key2) {
		if (!key1 || !key2 || key1.length != key2.length) return false;

		for (var i = 0; i < key1.length; i++) {
			if (key1[i] != key2[i]) return false;
		}
		return true;
	};

	LookupComponent.prototype.findOption = function findOption(options, key) {
		if (!key) return -1;
		for (var i = 0; i < options.length; i++) {
			var optionKey = this.getOptionKey({ $option: options[i] });
			if (this.areKeysEqual(key, optionKey)) return i;
		}
		return -1;
	};

	LookupComponent.prototype.setCursorKey = function setCursorKey(itemData) {
		var key = this.getOptionKey(itemData);
		this.setState({
			cursorKey: key
		});
	};

	LookupComponent.prototype.suggestCursorKey = function suggestCursorKey(options) {
		var index = this.findOption(options, this.state.cursorKey);
		if (index != -1) return this.state.cursorKey;

		var _props$instance = this.props.instance,
			data = _props$instance.data,
			store = _props$instance.store;

		var dataViewData = store.getData();
		if (data.value) {
			var valueKey = this.props.bindings
				.filter(function(a) {
					return a.key;
				})
				.map(function(b) {
					return Binding.get(b.local).value(dataViewData);
				});
			index = this.findOption(options, valueKey);
			if (index != -1) return valueKey;
		}

		if (options.length > 0) return this.getOptionKey({ $option: options[0] });

		return null;
	};

	LookupComponent.prototype.getDropdown = function getDropdown() {
		var _this5 = this,
			_class;

		if (this.dropdown) return this.dropdown;

		var widget = this.props.instance.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		// generate class names for 'selected' and 'cursor' with state prefix

		var _CSS$state$split = CSS.state({ selected: true, cursor: true }).split(/\s+/),
			selected = _CSS$state$split[0],
			cursor = _CSS$state$split[1];

		this.list = Widget.create({
			$type: HtmlElement,
			tag: "ul",
			class: CSS.element(baseClass, "lookup-options"),
			jsxAttributes: ["class"],
			children: [
				"\n            ",
				{
					$type: Repeater,
					records: {
						bind: "$options"
					},
					recordName: "$option",
					jsxAttributes: ["records", "recordName"],
					children: [
						"\n               ",
						{
							$type: HtmlElement,
							tag: "li",
							"data-option": {
								bind: "$option"
							},
							memoize: false,
							class: ((_class = {}),
							(_class[selected] = function(data) {
								return (
									_this5.props.instance.data.selectedKeys.find(function(x) {
										return _this5.areKeysEqual(x, _this5.getOptionKey(data));
									}) != null
								);
							}),
							(_class[cursor] = function(data) {
								return _this5.areKeysEqual(_this5.getOptionKey(data), _this5.state.cursorKey);
							}),
							_class),
							children: this.props.itemConfig,
							onMouseDown: preventDefault,
							onMouseEnter: function onMouseEnter(e, _ref) {
								var store = _ref.store;

								_this5.setCursorKey(store.getData());
							},
							onClick: function onClick(e, inst) {
								return _this5.onItemClick(e, inst);
							},
							jsxAttributes: ["data-option", "memoize", "class", "children", "onMouseDown", "onMouseEnter", "onClick"]
						},
						"\n            "
					]
				},
				"\n         "
			]
		});

		var dropdown = _extends(
			{
				constrain: true,
				scrollTracking: true,
				inline: !isTouchDevice(),
				placementOrder: "down-right down-left up-right up-left"
			},
			widget.dropdownOptions,
			{
				type: Dropdown,
				relatedElement: this.dom.input,
				renderChildren: this.renderDropdownContents.bind(this),
				onFocusOut: this.closeDropdown.bind(this),
				memoize: false,
				touchFriendly: isTouchDevice(),
				onMeasureDropdownNaturalSize: function onMeasureDropdownNaturalSize() {
					if (_this5.dom.dropdown && _this5.dom.list) {
						return {
							height: _this5.dom.dropdown.offsetHeight + _this5.dom.list.scrollHeight - _this5.dom.list.offsetHeight
						};
					}
				}
			}
		);

		return (this.dropdown = Widget.create(dropdown));
	};

	LookupComponent.prototype.renderDropdownContents = function renderDropdownContents() {
		var _this6 = this;

		var content = void 0;
		var instance = this.props.instance;
		var data = instance.data,
			widget = instance.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var searchVisible =
			!widget.hideSearchField &&
			(!isArray(data.options) ||
				(widget.minOptionsForSearchField && data.options.length >= widget.minOptionsForSearchField));

		if (this.state.status == "loading") {
			content = VDOM.createElement(
				"div",
				{ key: "msg", className: CSS.element(baseClass, "message", "loading") },
				widget.loadingText
			);
		} else if (this.state.status == "error") {
			content = VDOM.createElement(
				"div",
				{ key: "msg", className: CSS.element(baseClass, "message", "error") },
				widget.queryErrorText
			);
		} else if (this.state.status == "info") {
			content = VDOM.createElement(
				"div",
				{ key: "msg", className: CSS.element(baseClass, "message", "info") },
				this.state.message
			);
		} else if (this.state.options.length == 0) {
			content = VDOM.createElement(
				"div",
				{ key: "msg", className: CSS.element(baseClass, "message", "no-results") },
				widget.noResultsText
			);
		} else {
			content = VDOM.createElement(
				"div",
				{
					key: "msg",
					ref: function ref(el) {
						_this6.dom.list = el;
					},
					className: CSS.element(baseClass, "scroll-container"),
					onWheel: this.onListWheel.bind(this)
				},
				VDOM.createElement(Cx, { widget: this.list, store: this.itemStore, options: { name: "lookupfield-list" } })
			);
		}

		return VDOM.createElement(
			"div",
			{
				key: "dropdown",
				ref: function ref(el) {
					_this6.dom.dropdown = el;
				},
				className: CSS.element(baseClass, "dropdown"),
				tabIndex: 0,
				onFocus: this.onDropdownFocus.bind(this),
				onKeyDown: function onKeyDown(e) {
					return _this6.onDropdownKeyPress(e);
				}
			},
			searchVisible &&
				VDOM.createElement("input", {
					key: "query",
					ref: function ref(el) {
						_this6.dom.query = el;
					},
					type: "text",
					className: CSS.element(baseClass, "query"),
					onClick: function onClick(e) {
						e.preventDefault();
						e.stopPropagation();
					},
					onChange: function onChange(e) {
						return _this6.query(e.target.value);
					},
					onBlur: function onBlur(e) {
						return _this6.onQueryBlur(e);
					}
				}),
			content
		);
	};

	LookupComponent.prototype.onListWheel = function onListWheel(e) {
		var list = this.dom.list;

		if (
			(list.scrollTop + list.offsetHeight == list.scrollHeight && e.deltaY > 0) ||
			(list.scrollTop == 0 && e.deltaY < 0)
		) {
			e.preventDefault();
			e.stopPropagation();
		}
	};

	LookupComponent.prototype.onDropdownFocus = function onDropdownFocus(e) {
		if (this.dom.query && !isFocused(this.dom.query) && !isTouchDevice()) FocusManager.focus(this.dom.query);
	};

	LookupComponent.prototype.getPlaceholder = function getPlaceholder(text) {
		var _props$instance$widge = this.props.instance.widget,
			CSS = _props$instance$widge.CSS,
			baseClass = _props$instance$widge.baseClass;

		if (text) return VDOM.createElement("span", { className: CSS.element(baseClass, "placeholder") }, text);

		return VDOM.createElement("span", { className: CSS.element(baseClass, "placeholder") }, "\xA0");
	};

	LookupComponent.prototype.render = function render() {
		var _this7 = this;

		var _props = this.props,
			instance = _props.instance,
			label = _props.label,
			help = _props.help;
		var data = instance.data,
			widget = instance.widget,
			state = instance.state;
		var CSS = widget.CSS,
			baseClass = widget.baseClass,
			suppressErrorsUntilVisited = widget.suppressErrorsUntilVisited;

		var icon =
			data.icon &&
			VDOM.createElement(
				"div",
				{
					key: "icon",
					className: CSS.element(baseClass, "left-icon"),
					onMouseDown: preventDefault,
					onClick: function onClick(e) {
						_this7.openDropdown(e);
						e.stopPropagation();
						e.preventDefault();
					}
				},
				Icon.render(data.icon, { className: CSS.element(baseClass, "icon") })
			);

		var dropdown = void 0;
		if (this.state.dropdownOpen) {
			this.itemStore.setData({
				$options: this.state.options
			});
			dropdown = VDOM.createElement(Cx, {
				widget: this.getDropdown(),
				store: this.itemStore,
				options: { name: "lookupfield-dropdown" }
			});
		}

		var readOnly = data.disabled || data.readOnly;

		var insideButton = void 0;

		if (
			widget.showClear &&
			!readOnly &&
			!this.props.multiple &&
			(widget.alwaysShowClear || !data.required) &&
			data.value != null
		) {
			insideButton = VDOM.createElement(
				"div",
				{
					key: "ib",
					onMouseDown: preventDefault,
					onClick: function onClick(e) {
						return _this7.onClearClick(e);
					},
					className: CSS.element(baseClass, "clear")
				},
				VDOM.createElement(ClearIcon, { className: CSS.element(baseClass, "icon") })
			);
		} else {
			insideButton = VDOM.createElement(
				"div",
				{
					key: "ib",
					className: CSS.element(baseClass, "tool"),
					onMouseDown: preventDefault,
					onClick: function onClick(e) {
						_this7.openDropdown(e);
						e.stopPropagation();
						e.preventDefault();
					}
				},
				VDOM.createElement(DropdownIcon, { className: CSS.element(baseClass, "icon") })
			);
		}

		var text = void 0;

		if (this.props.multiple) {
			if (isArray(data.records) && data.records.length > 0) {
				text = data.records.map(function(v, i) {
					return VDOM.createElement(
						"div",
						{
							key: i,
							className: CSS.element(baseClass, "tag", { readonly: readOnly })
						},
						VDOM.createElement("span", { className: CSS.element(baseClass, "tag-value") }, v[widget.valueTextField]),
						!readOnly &&
							VDOM.createElement(
								"div",
								{
									className: CSS.element(baseClass, "tag-clear"),
									onMouseDown: function onMouseDown(e) {
										e.preventDefault();
										e.stopPropagation();
									},
									onClick: function onClick(e) {
										return _this7.onClearClick(e, v);
									}
								},
								VDOM.createElement(ClearIcon, { className: CSS.element(baseClass, "icon") })
							)
					);
				});
			} else {
				text = this.getPlaceholder(data.placeholder);
			}
		} else {
			text = data.value != null ? data.text || this.getPlaceholder() : this.getPlaceholder(data.placeholder);
		}

		var states = {
			visited: state.visited,
			focus: this.state.focus || this.state.dropdownOpen,
			icon: !insideButton || data.icon,
			empty: !data.placeholder && data.empty,
			error: data.error && (state.visited || !suppressErrorsUntilVisited || !data.empty)
		};

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(data.classNames, CSS.state(states)),
				style: data.style,
				onMouseDown: stopPropagation,
				onTouchStart: stopPropagation
			},
			VDOM.createElement(
				"div",
				{
					id: data.id,
					className: CSS.element(widget.baseClass, "input"),
					tabIndex: data.disabled ? null : 0,
					ref: function ref(el) {
						_this7.dom.input = el;
					},
					onMouseMove: function onMouseMove(e) {
						return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(_this7.props.instance)));
					},
					onMouseLeave: function onMouseLeave(e) {
						return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(_this7.props.instance)));
					},
					onClick: function onClick(e) {
						return _this7.onClick(e);
					},
					onInput: function onInput(e) {
						return _this7.onChange(e, "input");
					},
					onChange: function onChange(e) {
						return _this7.onChange(e, "change");
					},
					onKeyDown: function onKeyDown(e) {
						return _this7.onKeyDown(e);
					},
					onMouseDown: function onMouseDown(e) {
						return _this7.onMouseDown(e);
					},
					onBlur: function onBlur(e) {
						return _this7.onBlur(e);
					},
					onFocus: function onFocus(e) {
						return _this7.onFocus(e);
					}
				},
				text
			),
			insideButton,
			icon,
			dropdown,
			label,
			help
		);
	};

	LookupComponent.prototype.onClick = function onClick(e) {
		e.stopPropagation();
		e.preventDefault();
		this.openDropdown(e);
	};

	LookupComponent.prototype.onItemClick = function onItemClick(e, _ref2) {
		var store = _ref2.store;

		this.select(e, store.getData());
		e.stopPropagation();
		e.preventDefault();
	};

	LookupComponent.prototype.onClearClick = function onClearClick(e, value) {
		var _this8 = this;

		var instance = this.props.instance;
		var data = instance.data,
			store = instance.store,
			widget = instance.widget;
		var keyBindings = widget.keyBindings;

		e.stopPropagation();
		e.preventDefault();
		if (widget.multiple) {
			if (isArray(data.records)) {
				var itemKey = this.getLocalKey({ $value: value });
				var newRecords = data.records.filter(function(v) {
					return !_this8.areKeysEqual(_this8.getLocalKey({ $value: v }), itemKey);
				});

				instance.set("records", newRecords);

				var newValues = newRecords
					.map(function(rec) {
						return _this8.getLocalKey({ $value: rec });
					})
					.map(function(k) {
						return keyBindings.length == 1 ? k[0] : k;
					});

				instance.set("values", newValues);
			}
		} else {
			this.props.bindings.forEach(function(b) {
				store.set(b.local, null);
			});
		}

		if (!isTouchEvent(e)) this.dom.input.focus();
	};

	LookupComponent.prototype.select = function select(e, itemData) {
		var _this9 = this;

		var instance = this.props.instance;
		var store = instance.store,
			data = instance.data,
			widget = instance.widget;
		var bindings = widget.bindings,
			keyBindings = widget.keyBindings;

		if (widget.multiple) {
			var selectedKeys = data.selectedKeys,
				records = data.records;

			var optionKey = this.getOptionKey(itemData);
			var newRecords = records;
			if (
				!selectedKeys.find(function(k) {
					return _this9.areKeysEqual(optionKey, k);
				})
			) {
				var valueData = {
					$value: {}
				};
				bindings.forEach(function(b) {
					valueData = Binding.get(b.local).set(valueData, Binding.get(b.remote).value(itemData));
				});
				newRecords = [].concat(records || [], [valueData.$value]);
			} else {
				newRecords = records.filter(function(v) {
					return !_this9.areKeysEqual(optionKey, _this9.getLocalKey({ $value: v }));
				});
			}

			instance.set("records", newRecords);

			var newValues = newRecords
				.map(function(rec) {
					return _this9.getLocalKey({ $value: rec });
				})
				.map(function(k) {
					return keyBindings.length == 1 ? k[0] : k;
				});

			instance.set("values", newValues);
		} else {
			bindings.forEach(function(b) {
				store.set(b.local, Binding.get(b.remote).value(itemData));
			});
		}

		if (widget.closeOnSelect) {
			this.closeDropdown(e);
			if (!isTouchEvent(e)) this.dom.input.focus();
		}
	};

	LookupComponent.prototype.onDropdownKeyPress = function onDropdownKeyPress(e) {
		if (e.keyCode == KeyCode.enter) {
			var index = this.findOption(this.state.options, this.state.cursorKey);
			if (index != -1) {
				var itemData = {
					$option: this.state.options[index]
				};
				this.select(e, itemData);
			}
		}

		if (e.keyCode == KeyCode.esc) {
			this.closeDropdown(e);
			this.dom.input.focus();
		}

		if (e.keyCode == KeyCode.up) {
			var _index = this.findOption(this.state.options, this.state.cursorKey);
			if (_index > 0) {
				this.setCursorKey({
					$option: this.state.options[_index - 1]
				});
			}
			e.preventDefault();
			e.stopPropagation();
		}

		if (e.keyCode == KeyCode.down) {
			var _index2 = this.findOption(this.state.options, this.state.cursorKey);
			if (_index2 + 1 < this.state.options.length) {
				this.setCursorKey({
					$option: this.state.options[_index2 + 1]
				});
			}
			e.preventDefault();
			e.stopPropagation();
		}
	};

	LookupComponent.prototype.onKeyDown = function onKeyDown(e) {
		var instance = this.props.instance;

		if (instance.widget.handleKeyDown(e, instance) === false) return;

		switch (e.keyCode) {
			case KeyCode.delete:
				this.onClearClick(e);
				return;

			case KeyCode.shift:
			case KeyCode.ctrl:
			case KeyCode.tab:
				break;

			default:
				this.openDropdown(e);
				break;
		}
	};

	LookupComponent.prototype.onMouseDown = function onMouseDown(e) {
		e.preventDefault();
		e.stopPropagation();
		this.openDropdown(e);
	};

	LookupComponent.prototype.onQueryBlur = function onQueryBlur(e) {
		FocusManager.nudge();
	};

	LookupComponent.prototype.onFocus = function onFocus(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.trackFocus) {
			this.setState({
				focus: true
			});
		}
	};

	LookupComponent.prototype.onBlur = function onBlur(e) {
		if (!this.state.dropdownOpen) this.props.instance.setState({ visited: true });

		if (this.state.focus)
			this.setState({
				focus: false
			});
	};

	LookupComponent.prototype.closeDropdown = function closeDropdown(e) {
		if (this.state.dropdownOpen) {
			this.setState({
				dropdownOpen: false,
				cursorKey: null
			});

			this.props.instance.setState({
				visited: true
			});
		}

		//delete results valid only while dropdown is open
		delete this.tmpCachedResult;
	};

	LookupComponent.prototype.openDropdown = function openDropdown(e) {
		var _this10 = this;

		var data = this.props.instance.data;

		if (!this.state.dropdownOpen && !data.disabled && !data.readOnly) {
			this.query("");
			this.setState(
				{
					dropdownOpen: true
				},
				function() {
					if (_this10.dom.dropdown) _this10.dom.dropdown.focus();
				}
			);
		}
	};

	LookupComponent.prototype.query = function query(q) {
		var _this11 = this;

		/*
       In fetchAll mode onQuery should fetch all data and after
       that everything is done filtering is done client-side.
       If cacheAll is set results are cached for the lifetime of the
       widget, otherwise cache is invalidated when dropdown closes.
       */

		var instance = this.props.instance;
		var widget = instance.widget,
			data = instance.data;

		if (this.queryTimeoutId) clearTimeout(this.queryTimeoutId);

		if (q.length < widget.minQueryLength) {
			this.setState({
				status: "info",
				message: StringTemplate.format(widget.minQueryLengthMessageText, widget.minQueryLength)
			});
			return;
		}

		if (isArray(data.options)) {
			var results = widget.filterOptions(this.props.instance, data.options, q);
			this.setState({
				options: results,
				cursorKey: this.suggestCursorKey(results),
				status: "loaded"
			});
		}

		if (widget.onQuery) {
			var queryDelay = widget.queryDelay,
				fetchAll = widget.fetchAll,
				cacheAll = widget.cacheAll;

			if (fetchAll) queryDelay = 0;

			if (!this.state.dropdownOpen && !this.cachedResult) {
				this.setState({
					status: "loading"
				});
			}

			this.queryTimeoutId = setTimeout(function() {
				delete _this11.queryTimeoutId;

				var result = _this11.tmpCachedResult || _this11.cachedResult;
				if (!result) result = instance.invoke("onQuery", fetchAll ? "" : q, instance);

				Promise.resolve(result)
					.then(function(results) {
						if (!isArray(results)) results = [];

						if (fetchAll) {
							if (cacheAll) _this11.cachedResult = results;
							else _this11.tmpCachedResult = results;

							results = widget.filterOptions(_this11.props.instance, results, q);
						}

						_this11.setState({
							options: results,
							cursorKey: _this11.suggestCursorKey(results),
							status: "loaded"
						});
					})
					.catch(function(err) {
						_this11.setState({ status: "error" });
						debug("Lookup query error:", err);
					});
			}, queryDelay);
		}
	};

	LookupComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		tooltipParentWillReceiveProps.apply(undefined, [this.dom.input].concat(getFieldTooltip(props.instance)));
	};

	LookupComponent.prototype.componentDidMount = function componentDidMount() {
		tooltipParentDidMount.apply(undefined, [this.dom.input].concat(getFieldTooltip(this.props.instance)));
		autoFocus(this.dom.input, this);
	};

	LookupComponent.prototype.componentDidUpdate = function componentDidUpdate() {
		autoFocus(this.dom.input, this);
	};

	LookupComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		if (this.queryTimeoutId) clearTimeout(this.queryTimeoutId);
		tooltipParentWillUnmount(this.props.instance);
	};

	return LookupComponent;
})(VDOM.Component);

enableCultureSensitiveFormatting();

var NumberField = (function(_Field) {
	inherits(NumberField, _Field);

	function NumberField() {
		classCallCheck(this, NumberField);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	NumberField.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					value: null,
					disabled: undefined,
					readOnly: undefined,
					enabled: undefined,
					placeholder: undefined,
					required: undefined,
					format: undefined,
					minValue: undefined,
					maxValue: undefined,
					minExclusive: undefined,
					maxExclusive: undefined,
					incrementPercentage: undefined,
					increment: undefined,
					icon: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	NumberField.prototype.init = function init() {
		if (isDefined(this.step)) this.increment = this.step;

		if (isDefined(this.hideClear)) this.showClear = !this.hideClear;

		_Field.prototype.init.call(this);
	};

	NumberField.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.formatted = Format.value(data.value, data.format);
		_Field.prototype.prepareData.call(this, context, instance);
	};

	NumberField.prototype.formatValue = function formatValue(context, _ref) {
		var data = _ref.data;

		return data.formatted;
	};

	NumberField.prototype.validate = function validate(context, instance) {
		_Field.prototype.validate.call(this, context, instance);

		var data = instance.data;

		if (isNumber(data.value) && !data.error) {
			if (isNumber(data.minValue)) {
				if (data.value < data.minValue) data.error = StringTemplate.format(this.minValueErrorText, data.minValue);
				else if (data.value == data.minValue && data.minExclusive)
					data.error = StringTemplate.format(this.minExclusiveErrorText, data.minValue);
			}

			if (isNumber(data.maxValue)) {
				if (data.value > data.maxValue) data.error = StringTemplate.format(this.maxValueErrorText, data.maxValue);
				else if (data.value == data.maxValue && data.maxExclusive)
					data.error = StringTemplate.format(this.maxExclusiveErrorText, data.maxValue);
			}
		}
	};

	NumberField.prototype.renderInput = function renderInput(context, instance, key) {
		return VDOM.createElement(Input$1, {
			key: key,
			data: instance.data,
			shouldUpdate: instance.shouldUpdate,
			instance: instance,
			label: this.labelPlacement && getContent(this.renderLabel(context, instance, "label")),
			help: this.helpPlacement && getContent(this.renderHelp(context, instance, "help"))
		});
	};

	return NumberField;
})(Field);

NumberField.prototype.baseClass = "numberfield";
NumberField.prototype.reactOn = "enter change wheel blur";
NumberField.prototype.format = "n";
NumberField.prototype.inputType = "text";

NumberField.prototype.maxValueErrorText = "Enter {0:n} or less.";
NumberField.prototype.maxExclusiveErrorText = "Enter a number less than {0:n}.";
NumberField.prototype.minValueErrorText = "Enter {0:n} or more.";
NumberField.prototype.minExclusiveErrorText = "Enter a number greater than {0:n}.";
NumberField.prototype.inputErrorText = "Invalid number entered.";
NumberField.prototype.suppressErrorsUntilVisited = true;

NumberField.prototype.incrementPercentage = 0.1;
NumberField.prototype.snapToIncrement = true;
NumberField.prototype.icon = null;
NumberField.prototype.showClear = false;
NumberField.prototype.alwaysShowClear = false;

Widget.alias("numberfield", NumberField);
Localization.registerPrototype("cx/widgets/NumberField", NumberField);

var Input$1 = (function(_VDOM$Component) {
	inherits(Input, _VDOM$Component);

	function Input(props) {
		classCallCheck(this, Input);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.state = {
			focus: false
		};
		return _this2;
	}

	Input.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
		return props.shouldUpdate || state !== this.state;
	};

	Input.prototype.render = function render() {
		var _this3 = this;

		var _props = this.props,
			data = _props.data,
			instance = _props.instance,
			label = _props.label,
			help = _props.help;
		var widget = instance.widget,
			state = instance.state;
		var CSS = widget.CSS,
			baseClass = widget.baseClass,
			suppressErrorsUntilVisited = widget.suppressErrorsUntilVisited;

		var icon =
			data.icon &&
			VDOM.createElement(
				"div",
				{ className: CSS.element(baseClass, "left-icon") },
				Icon.render(data.icon, { className: CSS.element(baseClass, "icon") })
			);

		var insideButton = void 0;
		if (!data.readOnly && !data.disabled) {
			if (
				widget.showClear &&
				(((widget.alwaysShowClear || !data.required) && data.value != null) || instance.state.inputError)
			)
				insideButton = VDOM.createElement(
					"div",
					{
						className: CSS.element(baseClass, "clear"),
						onMouseDown: function onMouseDown(e) {
							return e.preventDefault();
						},
						onClick: function onClick(e) {
							return _this3.onClearClick(e);
						}
					},
					VDOM.createElement(ClearIcon, { className: CSS.element(baseClass, "icon") })
				);
		}

		var empty = this.input ? !this.input.value : data.empty;

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(
					data.classNames,
					CSS.state({
						visited: state.visited,
						focus: this.state.focus,
						icon: !!icon,
						empty: empty && !data.placeholder,
						error: data.error && (state.visited || !suppressErrorsUntilVisited || !empty)
					})
				),
				style: data.style,
				onMouseDown: stopPropagation,
				onTouchStart: stopPropagation
			},
			VDOM.createElement(
				"input",
				_extends(
					{
						id: data.id,
						type: widget.inputType,
						className: CSS.element(baseClass, "input"),
						defaultValue: data.formatted,
						ref: function ref(el) {
							_this3.input = el;
						},
						style: data.inputStyle,
						disabled: data.disabled,
						readOnly: data.readOnly,
						placeholder: data.placeholder
					},
					data.inputAttrs,
					{
						onMouseMove: function onMouseMove(e) {
							return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(_this3.props.instance)));
						},
						onMouseLeave: function onMouseLeave(e) {
							return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(_this3.props.instance)));
						},
						//onInput={ e => this.onChange(e, 'input') }
						onChange: function onChange(e) {
							return _this3.onChange(e, "change");
						},
						onKeyDown: this.onKeyDown.bind(this),
						onBlur: function onBlur(e) {
							_this3.onChange(e, "blur");
						},
						onFocus: function onFocus(e) {
							return _this3.onFocus();
						},
						onWheel: function onWheel(e) {
							_this3.onChange(e, "wheel");
						},
						onClick: stopPropagation
					}
				)
			),
			insideButton,
			icon,
			label,
			help
		);
	};

	Input.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		var _props$instance = props.instance,
			data = _props$instance.data,
			state = _props$instance.state;

		if (
			this.input.value != props.data.formatted &&
			(this.props.data.formatted != data.formatted || !state.inputError)
		) {
			this.input.value = props.data.formatted || "";
			props.instance.setState({
				inputError: false
			});
		}
		tooltipParentWillReceiveProps.apply(undefined, [this.input].concat(getFieldTooltip(props.instance)));
	};

	Input.prototype.componentDidMount = function componentDidMount() {
		tooltipParentDidMount.apply(undefined, [this.input].concat(getFieldTooltip(this.props.instance)));
		autoFocus(this.input, this);
	};

	Input.prototype.componentDidUpdate = function componentDidUpdate() {
		autoFocus(this.input, this);
	};

	Input.prototype.componentWillUnmount = function componentWillUnmount() {
		tooltipParentWillUnmount(this.props.instance);
	};

	Input.prototype.getPreCursorDigits = function getPreCursorDigits(text, cursor) {
		var res = "";
		var culture = Culture.getNumberCulture();
		var decimalSeparator = culture.decimalSeparator || ".";
		for (var i = 0; i < cursor; i++) {
			if ("0" <= text[i] && text[i] <= "9") res += text[i];
			else if (text[i] == decimalSeparator) res += ".";
			else if (text[i] == "-") res += "-";
		}
		return res;
	};

	Input.prototype.updateCursorPosition = function updateCursorPosition(preCursorText) {
		if (isString(preCursorText)) {
			var cursor = 0;
			var preCursor = 0;
			var text = this.input.value || "";
			while (preCursor < preCursorText.length && cursor < text.length) {
				if (text[cursor] == preCursorText[preCursor]) {
					cursor++;
					preCursor++;
				} else {
					cursor++;
				}
			}
			this.input.setSelectionRange(cursor, cursor);
		}
	};

	Input.prototype.calculateIncrement = function calculateIncrement(value, strength) {
		if (value == 0) return 0.1;

		var absValue = Math.abs(value * strength);
		var log10 = Math.floor(Math.log10(absValue) + 0.001);
		var size = Math.pow(10, log10);
		if (absValue / size > 4.999) return 5 * size;
		if (absValue / size > 1.999) return 2 * size;
		return size;
	};

	Input.prototype.onClearClick = function onClearClick(e) {
		this.input.value = "";
		this.props.instance.set("value", null);
	};

	Input.prototype.onKeyDown = function onKeyDown(e) {
		var instance = this.props.instance;

		if (instance.widget.handleKeyDown(e, instance) === false) return;

		if (e.keyCode == 13) this.onChange(e, "enter");
	};

	Input.prototype.onChange = function onChange(e, change) {
		var instance = this.props.instance;
		var data = instance.data,
			widget = instance.widget;

		if (widget.reactOn.indexOf(change) == -1 || data.disabled || data.readOnly) return;

		if (change == "blur") {
			instance.setState({ visited: true });
			if (this.state.focus)
				this.setState({
					focus: false
				});
		}

		if (e.target.value) {
			var v = Culture.getNumberCulture().parse(e.target.value);
			if (isNaN(v)) {
				instance.setState({
					inputError: instance.widget.inputErrorText
				});
				return;
			}

			if (change == "wheel") {
				e.preventDefault();
				var increment = data.increment != null ? data.increment : this.calculateIncrement(v, data.incrementPercentage);
				v = v + (e.deltaY < 0 ? increment : -increment);
				if (widget.snapToIncrement) {
					v = Math.round(v / increment) * increment;
				}

				if (data.minValue != null) {
					if (data.minExclusive) {
						if (v <= data.minValue) return;
					} else {
						v = Math.max(v, data.minValue);
					}
				}

				if (data.maxValue != null) {
					if (data.maxExclusive) {
						if (v >= data.maxValue) return;
					} else {
						v = Math.min(v, data.maxValue);
					}
				}
			}

			var fmt = data.format;

			var formatted = Format.value(v, fmt);
			//re-parse to avoid differences between formatted value and value in the store
			var culture = Culture.getNumberCulture();
			v = culture.parse(formatted);

			if (
				change == "input" &&
				this.input.selectionStart == this.input.selectionEnd &&
				e.target.value[this.input.selectionEnd - 1] == culture.decimalSeparator
			)
				return;

			if (
				change != "blur" &&
				e.target.value[e.target.value.length - 1] != "." &&
				e.target.value[e.target.value.length - 1] != "," &&
				(e.target.value[e.target.value.length - 1] != "0" ||
					e.target.value.indexOf(culture.decimalSeparator) == -1 ||
					(this.input.selectionStart == this.input.selectionEnd && this.input.selectionStart != e.target.value.length))
			) {
				var preCursorText = this.getPreCursorDigits(this.input.value, this.input.selectionStart);
				this.input.value = formatted;
				this.updateCursorPosition(preCursorText);
			}

			instance.set("value", v);
		} else instance.set("value", null);

		instance.setState({
			inputError: false
		});
	};

	Input.prototype.onFocus = function onFocus() {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.trackFocus) {
			this.setState({
				focus: true
			});
		}
	};

	return Input;
})(VDOM.Component);

var TextArea = (function(_TextField) {
	inherits(TextArea, _TextField);

	function TextArea() {
		classCallCheck(this, TextArea);
		return possibleConstructorReturn(this, _TextField.apply(this, arguments));
	}

	TextArea.prototype.declareData = function declareData() {
		var _TextField$prototype$;

		(_TextField$prototype$ = _TextField.prototype.declareData).call.apply(
			_TextField$prototype$,
			[
				this,
				{
					rows: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	TextArea.prototype.renderInput = function renderInput(context, instance, key) {
		var _this2 = this;

		return VDOM.createElement(Input$2, {
			key: key,
			data: instance.data,
			instance: instance,
			handleChange: function handleChange(e, change) {
				return _this2.handleChange(e, change, instance);
			},
			label: this.labelPlacement && getContent(this.renderLabel(context, instance, "label")),
			help: this.helpPlacement && getContent(this.renderHelp(context, instance, "help"))
		});
	};

	TextArea.prototype.handleChange = function handleChange(e, change, instance) {
		if (this.reactOn.indexOf(change) != -1) {
			instance.set("value", e.target.value || null);
		}
	};

	return TextArea;
})(TextField);

TextArea.prototype.baseClass = "textarea";
TextArea.prototype.reactOn = "blur";
TextArea.prototype.suppressErrorsUntilVisited = true;

var Input$2 = (function(_VDOM$Component) {
	inherits(Input, _VDOM$Component);

	function Input(props) {
		classCallCheck(this, Input);

		var _this3 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this3.state = {
			focus: false
		};
		return _this3;
	}

	Input.prototype.render = function render() {
		var _this4 = this;

		var _props = this.props,
			instance = _props.instance,
			label = _props.label,
			help = _props.help;
		var widget = instance.widget,
			data = instance.data,
			state = instance.state;
		var CSS = widget.CSS,
			baseClass = widget.baseClass,
			suppressErrorsUntilVisited = widget.suppressErrorsUntilVisited;

		var empty = this.input ? !this.input.value : data.empty;

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(
					data.classNames,
					CSS.state({
						visited: state.visited,
						focus: this.state.focus,
						empty: empty && !data.placeholder,
						error: data.error && (state.visited || !suppressErrorsUntilVisited || !empty)
					})
				),
				style: data.style,
				onMouseDown: stopPropagation,
				onTouchStart: stopPropagation
			},
			VDOM.createElement(
				"textarea",
				_extends(
					{
						className: CSS.element(baseClass, "input"),
						ref: function ref(el) {
							_this4.input = el;
						},
						id: data.id,
						rows: data.rows,
						style: data.inputStyle,
						defaultValue: data.value,
						disabled: data.disabled,
						readOnly: data.readOnly,
						placeholder: data.placeholder
					},
					data.inputAttrs,
					{
						onInput: function onInput(e) {
							return _this4.onChange(e, "input");
						},
						onChange: function onChange(e) {
							return _this4.onChange(e, "change");
						},
						onBlur: function onBlur(e) {
							_this4.onChange(e, "blur");
						},
						onFocus: function onFocus(e) {
							return _this4.onFocus();
						},
						onClick: stopPropagation,
						onMouseMove: function onMouseMove(e) {
							return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(instance)));
						},
						onMouseLeave: function onMouseLeave(e) {
							return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(instance)));
						}
					}
				)
			),
			label,
			help
		);
	};

	Input.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
		return nextProps.instance.shouldUpdate !== false || this.state != nextState;
	};

	Input.prototype.componentWillUnmount = function componentWillUnmount() {
		tooltipParentWillUnmount(this.props.instance);
	};

	Input.prototype.componentDidMount = function componentDidMount() {
		tooltipParentDidMount.apply(undefined, [this.input].concat(getFieldTooltip(this.props.instance)));
		autoFocus(this.input, this);
	};

	Input.prototype.componentDidUpdate = function componentDidUpdate() {
		autoFocus(this.input, this);
	};

	Input.prototype.onKeyDown = function onKeyDown(e) {
		var instance = this.props.instance;

		if (instance.widget.handleKeyDown(e, instance) === false) return;

		switch (e.keyCode) {
			case KeyCode.enter:
				this.onChange(e, "enter");
				break;

			case KeyCode.left:
			case KeyCode.right:
				e.stopPropagation();
				break;
		}
	};

	Input.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		var data = props.instance.data;

		if (data.value != this.input.value) this.input.value = data.value || "";
		tooltipParentWillReceiveProps.apply(undefined, [this.input].concat(getFieldTooltip(props.instance)));
	};

	Input.prototype.onChange = function onChange(e, change) {
		if (change == "blur") this.props.instance.setState({ visited: true });
		if (this.state.focus)
			this.setState({
				focus: false
			});
		this.props.handleChange(e, change);
	};

	Input.prototype.onFocus = function onFocus() {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.trackFocus) {
			this.setState({
				focus: true
			});
		}
	};

	return Input;
})(VDOM.Component);

Widget.alias("textarea", TextArea);

var ValidationGroup = (function(_PureContainer) {
	inherits(ValidationGroup, _PureContainer);

	function ValidationGroup() {
		classCallCheck(this, ValidationGroup);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	ValidationGroup.prototype.declareData = function declareData() {
		var _PureContainer$protot;

		return (_PureContainer$protot = _PureContainer.prototype.declareData).call.apply(
			_PureContainer$protot,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					errors: undefined,
					valid: undefined,
					invalid: undefined,
					disabled: undefined,
					enabled: undefined,
					readOnly: undefined,
					viewMode: undefined,
					tabOnEnterKey: undefined,
					isolated: undefined
				}
			])
		);
	};

	ValidationGroup.prototype.explore = function explore(context, instance) {
		if (isDefined(instance.data.enabled)) instance.data.disabled = !instance.data.enabled;

		instance.validation = {
			errors: []
		};

		context.push("parentDisabled", context.parentDisabled || instance.data.disabled);
		context.push("parentReadOnly", context.parentReadOnly || instance.data.readOnly);
		context.push("parentViewMode", context.parentViewMode || instance.data.viewMode);
		context.push("parentTabOnEnterKey", context.parentTabOnEnterKey || instance.data.tabOnEnterKey);
		context.push("validation", instance.validation);

		_PureContainer.prototype.explore.call(this, context, instance);
	};

	ValidationGroup.prototype.exploreCleanup = function exploreCleanup(context, instance) {
		var _context$validation$e;

		context.pop("validation");

		instance.valid = instance.validation.errors.length == 0;
		if (!instance.valid && !this.isolated && context.validation)
			(_context$validation$e = context.validation.errors).push.apply(_context$validation$e, instance.validation.errors);

		instance.set("valid", instance.valid);
		instance.set("invalid", !instance.valid);

		if (this.errors && !shallowEquals(instance.data.errors, instance.validation.errors))
			instance.set("errors", instance.validation.errors);

		context.pop("parentDisabled");
		context.pop("parentReadOnly");
		context.pop("parentViewMode");
		context.pop("parentTabOnEnterKey");
	};

	return ValidationGroup;
})(PureContainer);

ValidationGroup.prototype.isolated = false;

Widget.alias("validation-group", ValidationGroup);

var FieldGroup = (function(_ValidationGroup) {
	inherits(FieldGroup, _ValidationGroup);

	function FieldGroup() {
		classCallCheck(this, FieldGroup);
		return possibleConstructorReturn(this, _ValidationGroup.apply(this, arguments));
	}

	return FieldGroup;
})(ValidationGroup);

Widget.alias("field-group", FieldGroup);

var LabeledContainer = (function(_FieldGroup) {
	inherits(LabeledContainer, _FieldGroup);

	function LabeledContainer() {
		classCallCheck(this, LabeledContainer);
		return possibleConstructorReturn(this, _FieldGroup.apply(this, arguments));
	}

	LabeledContainer.prototype.declareData = function declareData() {
		var _FieldGroup$prototype;

		(_FieldGroup$prototype = _FieldGroup.prototype.declareData).call.apply(
			_FieldGroup$prototype,
			[
				this,
				{
					label: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	LabeledContainer.prototype.init = function init() {
		if (this.label != null) {
			var labelConfig = {
				type: Label,
				disabled: this.disabled,
				mod: this.mod,
				asterisk: this.asterisk,
				required: true
			};

			if (this.label.isComponentType) labelConfig = this.label;
			else if (isSelector(this.label)) labelConfig.text = this.label;
			else Object.assign(labelConfig, this.label);

			this.label = Widget.create(labelConfig);
		}

		_FieldGroup.prototype.init.call(this);
	};

	LabeledContainer.prototype.initComponents = function initComponents(context, instance) {
		var _FieldGroup$prototype2;

		return (_FieldGroup$prototype2 = _FieldGroup.prototype.initComponents).call.apply(
			_FieldGroup$prototype2,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					label: this.label
				}
			])
		);
	};

	LabeledContainer.prototype.renderLabel = function renderLabel(context, instance, key) {
		if (instance.components.label) return instance.components.label.render(context, key);
	};

	LabeledContainer.prototype.render = function render(context, instance, key) {
		return {
			label: this.renderLabel(context, instance, key),
			content: this.renderChildren(context, instance, key)
		};
	};

	return LabeledContainer;
})(FieldGroup);

Widget.alias("labeled-container", LabeledContainer);

enableCultureSensitiveFormatting();

var MonthPicker = (function(_Field) {
	inherits(MonthPicker, _Field);

	function MonthPicker() {
		classCallCheck(this, MonthPicker);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	MonthPicker.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		var values = {};

		if (this.mode == "range") {
			this.range = true;
			this.mode = "edit";
			Console.warn('Please use the range flag on MonthPickers. Syntax mode="range" is deprecated.', this);
		}

		if (this.range) {
			values = {
				from: null,
				to: null
			};
		} else {
			values = {
				value: null
			};
		}

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				values,
				{
					refDate: undefined,
					disabled: undefined,
					minValue: undefined,
					minExclusive: undefined,
					maxValue: undefined,
					maxExclusive: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	MonthPicker.prototype.init = function init() {
		_Field.prototype.init.call(this);
	};

	MonthPicker.prototype.prepareData = function prepareData(context, _ref) {
		var _Field$prototype$prep;

		var data = _ref.data;

		data.stateMods = {
			disabled: data.disabled
		};

		if (!this.range && data.value) data.date = monthStart(new Date(data.value));

		if (this.range) {
			if (data.from) data.from = monthStart(new Date(data.from));

			if (data.to) data.to = monthStart(new Date(data.to));
		}

		if (data.refDate) data.refDate = monthStart(new Date(data.refDate));

		if (data.maxValue) data.maxValue = monthStart(new Date(data.maxValue));

		if (data.minValue) data.minValue = monthStart(new Date(data.minValue));

		(_Field$prototype$prep = _Field.prototype.prepareData).call.apply(
			_Field$prototype$prep,
			[this].concat(Array.prototype.slice.call(arguments))
		);
	};

	MonthPicker.prototype.validate = function validate(context, instance) {
		_Field.prototype.validate.call(this, context, instance);
		var data = instance.data;

		if (!data.error && data.date) {
			var d = void 0;
			if (data.maxValue) {
				d = dateDiff(data.date, data.maxValue);
				if (d > 0) data.error = StringTemplate.format(this.maxValueErrorText, data.maxValue);
				else if (d == 0 && data.maxExclusive)
					data.error = StringTemplate.format(this.maxExclusiveErrorText, data.maxValue);
			}

			if (data.minValue) {
				d = dateDiff(data.date, data.minValue);
				if (d < 0) data.error = StringTemplate.format(this.minValueErrorText, data.minValue);
				else if (d == 0 && data.minExclusive)
					data.error = StringTemplate.format(this.minExclusiveErrorText, data.minValue);
			}
		}
	};

	MonthPicker.prototype.renderInput = function renderInput(context, instance, key) {
		return VDOM.createElement(MonthPickerComponent, {
			key: key,
			instance: instance,
			onBlur: this.onBlur,
			onFocusOut: this.onFocusOut,
			onKeyDown: this.onKeyDown,
			autoFocus: this.autoFocus
		});
	};

	MonthPicker.prototype.handleSelect = function handleSelect(e, instance, date1, date2) {
		var data = instance.data;

		if (data.disabled) return;

		if (!validationCheck$1(date1, data)) return;

		if (this.onBeforeSelect && instance.invoke("onBeforeSelect", e, instance, date1, date2) === false) return;

		if (this.range) {
			instance.set("from", date1.toISOString());
			instance.set("to", date2.toISOString());
		} else instance.set("value", date1.toISOString());

		if (this.onSelect) instance.invoke("onSelect", instance, date1, date2);
	};

	return MonthPicker;
})(Field);

MonthPicker.prototype.baseClass = "monthpicker";
MonthPicker.prototype.range = false;
MonthPicker.prototype.startYear = 1980;
MonthPicker.prototype.endYear = 2030;
MonthPicker.prototype.bufferSize = 15;

// Localization
MonthPicker.prototype.maxValueErrorText = "Select {0:d} or before.";
MonthPicker.prototype.maxExclusiveErrorText = "Select a date before {0:d}.";
MonthPicker.prototype.minValueErrorText = "Select {0:d} or later.";
MonthPicker.prototype.minExclusiveErrorText = "Select a date after {0:d}.";
Localization.registerPrototype("cx/widgets/MonthPicker", MonthPicker);

Widget.alias("month-picker", MonthPicker);

var validationCheck$1 = function validationCheck(date, data) {
	if (data.maxValue && !upperBoundCheck(date, data.maxValue, data.maxExclusive)) return false;

	if (data.minValue && !lowerBoundCheck(date, data.minValue, data.minExclusive)) return false;

	return true;
};

var monthNumber = function monthNumber(date) {
	return date.getFullYear() * 12 + date.getMonth();
};

var MonthPickerComponent = (function(_VDOM$Component) {
	inherits(MonthPickerComponent, _VDOM$Component);

	function MonthPickerComponent(props) {
		classCallCheck(this, MonthPickerComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		var _props$instance = props.instance,
			data = _props$instance.data,
			widget = _props$instance.widget;

		var cursor = monthStart(data.refDate ? data.refDate : data.date || data.from || new Date());

		_this2.dom = {};

		_this2.state = {
			cursorYear: cursor.getFullYear(),
			cursorMonth: cursor.getMonth() + 1,
			cursorQuarter: cursor.getMonth() / 3,
			column: "M",
			start: widget.startYear,
			end: widget.startYear + widget.bufferSize
		};

		_this2.handleMouseDown = _this2.handleMouseDown.bind(_this2);
		_this2.handleMouseUp = _this2.handleMouseUp.bind(_this2);
		_this2.handleMouseEnter = _this2.handleMouseEnter.bind(_this2);
		_this2.handleKeyPress = _this2.handleKeyPress.bind(_this2);
		_this2.handleTouchMove = _this2.handleTouchMove.bind(_this2);
		_this2.handleTouchEnd = _this2.handleTouchEnd.bind(_this2);
		return _this2;
	}

	MonthPickerComponent.prototype.extractCursorInfo = function extractCursorInfo(el) {
		if (!el.attributes["data-point"].value) return false;
		var parts = el.attributes["data-point"].value.split("-");
		if (parts[0] != "Y") return false;
		var cursor = {
			column: "Y",
			cursorYear: Number(parts[1])
		};
		if (parts.length == 4) {
			cursor.column = parts[2];
			if (cursor.column == "M") cursor.cursorMonth = Number(parts[3]);
			else cursor.cursorQuarter = Number(parts[3]);
		}
		return cursor;
	};

	MonthPickerComponent.prototype.moveCursor = function moveCursor(e, data) {
		var _this3 = this;

		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

		e.preventDefault();
		e.stopPropagation();

		if (data.cursorYear) {
			var _props$instance$widge = this.props.instance.widget,
				startYear = _props$instance$widge.startYear,
				endYear = _props$instance$widge.endYear;

			data.cursorYear = Math.max(startYear, Math.min(endYear, data.cursorYear));
		}

		if (
			Object.keys(data).every(function(k) {
				return _this3.state[k] == data[k];
			})
		)
			return;

		this.setState(data, function() {
			if (options.ensureVisible) {
				var index = _this3.state.cursorYear - _this3.state.start;
				var tbody = _this3.dom.table.children[index];
				if (tbody) scrollElementIntoView(tbody);
			}
		});
	};

	MonthPickerComponent.prototype.handleKeyPress = function handleKeyPress(e) {
		var widget = this.props.instance.widget;
		var _state = this.state,
			cursorMonth = _state.cursorMonth,
			cursorYear = _state.cursorYear,
			cursorQuarter = _state.cursorQuarter,
			column = _state.column;

		switch (e.keyCode) {
			case KeyCode.enter:
				// if (widget.range && e.shiftKey && !this.dragStartDates) {
				//    this.handleMouseDown(e, {}, false);
				// } else {
				//    this.handleMouseUp(e);
				// }
				this.handleMouseUp(e);
				e.preventDefault();
				e.stopPropagation();
				break;

			case KeyCode.left:
				if (column == "Y") this.moveCursor(e, { cursorQuarter: 3, cursorYear: cursorYear - 1, column: "Q" });
				else if (column == "Q") this.moveCursor(e, { cursorMonth: cursorQuarter * 4, column: "M" });
				else if (column == "M" && (cursorMonth - 1) % 3 == 0) this.moveCursor(e, { column: "Y" });
				else this.moveCursor(e, { cursorMonth: cursorMonth - 1 });
				break;

			case KeyCode.right:
				if (column == "Y") this.moveCursor(e, { cursorMonth: 1, column: "M" });
				else if (column == "Q")
					this.moveCursor(e, { column: "Y", cursorYear: cursorQuarter == 3 ? cursorYear + 1 : cursorYear });
				else if (column == "M" && (cursorMonth - 1) % 3 == 2)
					this.moveCursor(e, { column: "Q", cursorQuarter: Math.floor((cursorMonth - 1) / 3) });
				else this.moveCursor(e, { cursorMonth: cursorMonth + 1 });
				break;

			case KeyCode.up:
				if (column == "Y") this.moveCursor(e, { cursorYear: cursorYear - 1 }, { ensureVisible: true });
				else if (column == "Q")
					this.moveCursor(
						e,
						{
							cursorQuarter: (cursorQuarter + 3) % 4,
							cursorYear: cursorQuarter == 0 ? cursorYear - 1 : cursorYear
						},
						{ ensureVisible: true }
					);
				else if (column == "M")
					if (cursorMonth > 3) this.moveCursor(e, { cursorMonth: cursorMonth - 3 }, { ensureVisible: true });
					else
						this.moveCursor(e, { cursorMonth: cursorMonth + 9, cursorYear: cursorYear - 1 }, { ensureVisible: true });
				break;

			case KeyCode.down:
				if (column == "Y") this.moveCursor(e, { cursorYear: cursorYear + 1 }, { ensureVisible: true });
				else if (column == "Q")
					this.moveCursor(
						e,
						{
							cursorQuarter: (cursorQuarter + 1) % 4,
							cursorYear: cursorQuarter == 3 ? cursorYear + 1 : cursorYear
						},
						{ ensureVisible: true }
					);
				else if (column == "M")
					if (cursorMonth < 10) this.moveCursor(e, { cursorMonth: cursorMonth + 3 }, { ensureVisible: true });
					else
						this.moveCursor(e, { cursorMonth: cursorMonth - 9, cursorYear: cursorYear + 1 }, { ensureVisible: true });
				break;

			case KeyCode.pageUp:
				this.moveCursor(e, { cursorYear: this.state.cursorYear - 1 });
				break;

			case KeyCode.pageDown:
				this.moveCursor(e, { cursorYear: this.state.cursorYear + 1 });
				break;

			default:
				if (this.props.onKeyDown) this.props.onKeyDown(e, this.props.instance);
				break;
		}
	};

	MonthPickerComponent.prototype.handleBlur = function handleBlur(e) {
		FocusManager.nudge();
		if (this.props.onBlur) this.props.onBlur();
		this.setState({
			focused: false
		});
	};

	MonthPickerComponent.prototype.handleFocus = function handleFocus(e) {
		this.setState({
			focused: true
		});
		if (this.props.onFocusOut) oneFocusOut(this, this.dom.el, this.handleFocusOut.bind(this));
	};

	MonthPickerComponent.prototype.handleFocusOut = function handleFocusOut() {
		if (this.props.onFocusOut) this.props.onFocusOut();
	};

	MonthPickerComponent.prototype.getCursorDates = function getCursorDates(cursor) {
		var _ref2 = cursor || this.state,
			cursorMonth = _ref2.cursorMonth,
			cursorYear = _ref2.cursorYear,
			cursorQuarter = _ref2.cursorQuarter,
			column = _ref2.column;

		switch (column) {
			case "M":
				return [new Date(cursorYear, cursorMonth - 1, 1), new Date(cursorYear, cursorMonth, 1)];

			case "Q":
				return [new Date(cursorYear, cursorQuarter * 3, 1), new Date(cursorYear, cursorQuarter * 3 + 3, 1)];

			case "Y":
				return [new Date(cursorYear, 0, 1), new Date(cursorYear + 1, 0, 1)];
		}
	};

	MonthPickerComponent.prototype.handleTouchMove = function handleTouchMove(e) {
		var cursor = getCursorPos(e);
		var el = document.elementFromPoint(cursor.clientX, cursor.clientY);
		if (this.dom.table.contains(el) && isString(el.dataset.point)) {
			var _cursor = this.extractCursorInfo(el);
			this.moveCursor(e, _cursor);
		}
	};

	MonthPickerComponent.prototype.handleTouchEnd = function handleTouchEnd(e) {
		if (this.state.state == "drag") this.handleMouseUp(e);
	};

	MonthPickerComponent.prototype.handleMouseEnter = function handleMouseEnter(e) {
		var cursor = this.extractCursorInfo(e.target);
		cursor.hover = !isTouchEvent();
		this.moveCursor(e, cursor);
	};

	MonthPickerComponent.prototype.handleMouseDown = function handleMouseDown(e, cursor) {
		var drag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
		var instance = this.props.instance;
		var widget = instance.widget;

		if (!cursor) {
			cursor = this.extractCursorInfo(e.currentTarget);
			this.moveCursor(e, cursor);
		}

		e.stopPropagation();
		preventFocusOnTouch(e);

		this.dragStartDates = this.getCursorDates(cursor);
		if (drag) {
			this.setState(
				_extends(
					{
						state: "drag"
					},
					cursor
				)
			);
		}
	};

	MonthPickerComponent.prototype.handleMouseUp = function handleMouseUp(e) {
		var instance = this.props.instance;
		var widget = instance.widget,
			data = instance.data;

		e.stopPropagation();
		e.preventDefault();

		var _getCursorDates = this.getCursorDates(),
			cursorFromDate = _getCursorDates[0],
			cursorToDate = _getCursorDates[1];

		var originFromDate = cursorFromDate,
			originToDate = cursorToDate;
		if (widget.range && e.shiftKey) {
			if (data.from) originFromDate = data.from;
			if (data.to) originToDate = data.to;
		} else if (this.state.state == "drag") {
			if (widget.range) {
				var _dragStartDates = this.dragStartDates;
				originFromDate = _dragStartDates[0];
				originToDate = _dragStartDates[1];
			}
			this.setState({ state: "normal" });
		} else {
			//skip mouse events originated somewhere else
			if (e.type != "keydown") return;
		}
		widget.handleSelect(e, instance, minDate(originFromDate, cursorFromDate), maxDate(originToDate, cursorToDate));
	};

	MonthPickerComponent.prototype.render = function render() {
		var _this4 = this;

		var _props$instance2 = this.props.instance,
			data = _props$instance2.data,
			widget = _props$instance2.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass,
			startYear = widget.startYear,
			endYear = widget.endYear;

		var years = [];

		var _state2 = this.state,
			start = _state2.start,
			end = _state2.end;

		var from = 10000,
			to = 0,
			a = void 0,
			b = void 0;

		if (data.date && !widget.range) {
			from = monthNumber(data.date);
			to = from + 0.1;
		} else if (widget.range) {
			if (this.state.state == "drag") {
				var _dragStartDates2 = this.dragStartDates,
					originFromDate = _dragStartDates2[0],
					originToDate = _dragStartDates2[1];

				var _getCursorDates2 = this.getCursorDates(),
					cursorFromDate = _getCursorDates2[0],
					cursorToDate = _getCursorDates2[1];

				a = Math.min(monthNumber(originFromDate), monthNumber(cursorFromDate));
				b = Math.max(monthNumber(originToDate), monthNumber(cursorToDate));
				from = Math.min(a, b);
				to = Math.max(a, b);
			} else if (data.from && data.to) {
				a = monthNumber(data.from);
				b = monthNumber(data.to);
				from = Math.min(a, b);
				to = Math.max(a, b);
			}
		}

		var monthNames = Culture.getDateTimeCulture().getMonthNames("short");
		var showCursor = this.state.hover || this.state.focused;

		for (var y = start; y <= end; y++) {
			var rows = [];
			for (var q = 0; q < 4; q++) {
				var row = [];
				if (q == 0)
					row.push(
						VDOM.createElement(
							"th",
							{
								key: "year",
								rowSpan: 4,
								"data-point": "Y-" + y,
								className: CSS.element(baseClass, "year", {
									cursor: showCursor && this.state.column == "Y" && y == this.state.cursorYear
								}),
								onMouseEnter: this.handleMouseEnter,
								onMouseDown: this.handleMouseDown,
								onMouseUp: this.handleMouseUp
							},
							y
						)
					);

				for (var i = 0; i < 3; i++) {
					var m = q * 3 + i + 1;
					var unselectable = !validationCheck$1(new Date(y, m - 1, 1), data);
					var mno = y * 12 + m - 1;
					var handle = true; //isTouchDevice(); //mno === from || mno === to - 1;
					row.push(
						VDOM.createElement(
							"td",
							{
								key: "M" + m,
								className: CSS.state({
									cursor:
										showCursor && this.state.column == "M" && y == this.state.cursorYear && m == this.state.cursorMonth,
									handle: handle,
									selected: mno >= from && mno < to,
									unselectable: unselectable
								}),
								"data-point": "Y-" + y + "-M-" + m,
								onMouseEnter: unselectable ? null : this.handleMouseEnter,
								onMouseDown: unselectable ? null : this.handleMouseDown,
								onMouseUp: unselectable ? null : this.handleMouseUp,
								onTouchStart: unselectable ? null : this.handleMouseDown,
								onTouchMove: unselectable ? null : this.handleTouchMove,
								onTouchEnd: this.handleMouseUp
							},
							monthNames[m - 1].substr(0, 3)
						)
					);
				}
				row.push(
					VDOM.createElement(
						"th",
						{
							key: "q" + q,
							className: CSS.state({
								cursor:
									showCursor && this.state.column == "Q" && y == this.state.cursorYear && q == this.state.cursorQuarter
							}),
							"data-point": "Y-" + y + "-Q-" + q,
							onMouseEnter: this.handleMouseEnter,
							onMouseDown: this.handleMouseDown,
							onMouseUp: this.handleMouseUp
						},
						"Q" + (q + 1)
					)
				);
				rows.push(row);
			}
			years.push(rows);
		}

		return VDOM.createElement(
			"div",
			{
				ref: function ref(el) {
					_this4.dom.el = el;
				},
				className: data.classNames,
				style: data.style,
				tabIndex: data.disabled ? null : 0,
				onKeyDown: this.handleKeyPress,
				onMouseDown: stopPropagation,
				onMouseMove: function onMouseMove(e) {
					return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(_this4.props.instance)));
				},
				onMouseLeave: this.handleMouseLeave.bind(this),
				onFocus: function onFocus(e) {
					return _this4.handleFocus(e);
				},
				onBlur: this.handleBlur.bind(this),
				onScroll: this.onScroll.bind(this)
			},
			this.state.yearHeight &&
				VDOM.createElement("div", { style: { height: (start - startYear) * this.state.yearHeight + "px" } }),
			VDOM.createElement(
				"table",
				{
					ref: function ref(el) {
						_this4.dom.table = el;
					}
				},
				years.map(function(rows, y) {
					return VDOM.createElement(
						"tbody",
						{ key: start + y },
						rows.map(function(cells, i) {
							return VDOM.createElement("tr", { key: i }, cells);
						})
					);
				})
			),
			this.state.yearHeight &&
				VDOM.createElement("div", { style: { height: Math.max(0, endYear - end) * this.state.yearHeight + "px" } })
		);
	};

	MonthPickerComponent.prototype.onScroll = function onScroll() {
		var _props$instance$widge2 = this.props.instance.widget,
			startYear = _props$instance$widge2.startYear,
			endYear = _props$instance$widge2.endYear,
			bufferSize = _props$instance$widge2.bufferSize;

		var visibleItems = ceil5(Math.ceil(this.dom.el.offsetHeight / this.state.yearHeight));
		var start = Math.max(
			startYear,
			startYear + floor5(Math.floor(this.dom.el.scrollTop / this.state.yearHeight)) - visibleItems
		);
		if (start != this.state.start && start + bufferSize <= endYear) {
			this.setState({
				start: start,
				end: start + 15
			});
		}
	};

	MonthPickerComponent.prototype.handleMouseLeave = function handleMouseLeave(e) {
		tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(this.props.instance)));
		this.moveCursor(e, {
			hover: false
		});
	};

	MonthPickerComponent.prototype.componentDidMount = function componentDidMount() {
		var _this5 = this;

		//non-input, ok to focus on mobile
		if (this.props.autoFocus) this.dom.el.focus();

		tooltipParentDidMount.apply(undefined, [this.dom.el].concat(getFieldTooltip(this.props.instance)));
		var yearHeight = this.dom.table.scrollHeight / (this.props.instance.widget.bufferSize + 1);
		this.setState(
			{
				yearHeight: yearHeight
			},
			function() {
				var _props$instance3 = _this5.props.instance,
					widget = _props$instance3.widget,
					data = _props$instance3.data;
				var startYear = widget.startYear;

				var yearCount = 1;
				if (widget.range && data.from && data.to) {
					yearCount = data.to.getFullYear() - data.from.getFullYear() + 1;
					if (data.to.getMonth() == 0 && data.to.getDate() == 1) yearCount--;
				}
				_this5.dom.el.scrollTop =
					(_this5.state.cursorYear - startYear + yearCount / 2) * _this5.state.yearHeight -
					_this5.dom.el.offsetHeight / 2;
			}
		);
	};

	MonthPickerComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		this.setState({
			state: "normal"
		});
		tooltipParentWillReceiveProps.apply(undefined, [this.dom.el].concat(getFieldTooltip(props.instance)));
	};

	MonthPickerComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		offFocusOut(this);
		tooltipParentWillUnmount(this.props.instance);
	};

	return MonthPickerComponent;
})(VDOM.Component);

function ceil5(x) {
	return Math.ceil(x / 5) * 5;
}

function floor5(x) {
	return Math.floor(x / 5) * 5;
}

//TODO: Increase HSL precision in calculations, round only RGB values
//TODO: Resolve alpha input problems

var ColorPicker = (function(_Field) {
	inherits(ColorPicker, _Field);

	function ColorPicker() {
		classCallCheck(this, ColorPicker);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	ColorPicker.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					value: null
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	ColorPicker.prototype.renderInput = function renderInput(context, instance, key) {
		return VDOM.createElement(ColorPickerComponent, { key: key, instance: instance });
	};

	ColorPicker.prototype.handleEvent = function handleEvent(eventType, instance, color) {
		var store = instance.store;

		if (this.reportOn.indexOf(eventType) != -1) {
			var value;
			switch (this.format) {
				case "rgba":
					value =
						"rgba(" +
						color.r.toFixed(0) +
						"," +
						color.g.toFixed(0) +
						"," +
						color.b.toFixed(0) +
						"," +
						Math.round(color.a * 100) / 100 +
						")";
					break;

				case "hsla":
					value =
						"hsla(" +
						color.h.toFixed(0) +
						"," +
						color.s.toFixed(0) +
						"%," +
						color.l.toFixed(0) +
						"%," +
						Math.round(color.a * 100) / 100 +
						")";
					break;

				case "hex":
					value = rgbToHex(color.r, color.g, color.b);
					break;
			}
			instance.set("value", value);
		}
	};

	return ColorPicker;
})(Field);

ColorPicker.prototype.baseClass = "colorpicker";
ColorPicker.prototype.reportOn = "blur change";
ColorPicker.prototype.format = "rgba";

Widget.alias("color-picker", ColorPicker);

var ColorPickerComponent = (function(_VDOM$Component) {
	inherits(ColorPickerComponent, _VDOM$Component);

	function ColorPickerComponent(props) {
		classCallCheck(this, ColorPickerComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.data = props.instance.data;
		try {
			_this2.state = _this2.parse(props.instance.data.value);
		} catch (e) {
			//if web colors are used (e.g. red), fallback to the default color
			_this2.state = _this2.parse(null);
		}
		return _this2;
	}

	ColorPickerComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		var data = props.instance.data;

		var color = this.parse(data.value);
		if (color.r != this.state.r || color.g != this.state.g || color.b != this.state.b || color.a != this.state.a)
			this.setState(color);
	};

	ColorPickerComponent.prototype.parse = function parse(color) {
		var c = parseColor(color);
		if (c == null) {
			c = {
				type: "rgba",
				r: 128,
				g: 128,
				b: 128,
				a: 0
			};
		}

		c.a = Math.round(c.a * 100) / 100;

		if (c.type == "rgba") {
			var _rgbToHsl = rgbToHsl(c.r, c.g, c.b),
				h = _rgbToHsl[0],
				s = _rgbToHsl[1],
				l = _rgbToHsl[2];

			return { r: c.r, g: c.g, b: c.b, h: h, s: s, l: l, a: c.a };
		}

		if (c.type == "hsla") {
			var _hslToRgb = hslToRgb(c.h, c.s, c.l),
				r = _hslToRgb[0],
				g = _hslToRgb[1],
				b = _hslToRgb[2];

			r = this.fix255(r);
			g = this.fix255(g);
			b = this.fix255(b);
			return { r: r, g: g, b: b, h: c.h, s: c.s, l: c.l, a: c.a };
		}

		throw new Error("Color " + color + " parsing failed.");
	};

	ColorPickerComponent.prototype.render = function render() {
		var _this3 = this;

		var _state = this.state,
			h = _state.h,
			s = _state.s,
			l = _state.l,
			a = _state.a,
			r = _state.r,
			g = _state.g,
			b = _state.b;
		var instance = this.props.instance;
		var widget = instance.widget,
			data = instance.data;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var hcolor = "hsl(" + h + ",100%,50%)";
		var hsl = "hsl(" + h + "," + s + "%," + l + "%)";
		var hsla = "hsla(" + h.toFixed(0) + "," + s.toFixed(0) + "%," + l.toFixed(0) + "%," + a + ")";
		var rgb = "rgb(" + r + "," + g + "," + b + ")";
		var rgba = "rgba(" + r.toFixed(0) + "," + g.toFixed(0) + "," + b.toFixed(0) + "," + a + ")";
		var hex = rgbToHex(r, g, b);

		var alphaGradient =
			getVendorPrefix("css") +
			"linear-gradient(left, hsla(" +
			h +
			"," +
			s +
			"%," +
			l +
			"%,0) 0%, hsla(" +
			h +
			"," +
			s +
			"%," +
			l +
			"%,1) 100%)";

		return VDOM.createElement(
			"div",
			{
				className: data.classNames,
				style: data.style,
				onBlur: this.onBlur.bind(this),
				onMouseDown: stopPropagation,
				onTouchStart: stopPropagation
			},
			VDOM.createElement(
				"div",
				{
					className: CSS.element(baseClass, "picker"),
					style: { backgroundColor: hcolor },
					onMouseDown: this.onSLSelect.bind(this),
					onTouchStart: this.onSLSelect.bind(this)
				},
				VDOM.createElement("div", {
					className: CSS.element(baseClass, "indicator"),
					style: {
						left: "calc(" + s + "% - 4px)",
						top: "calc(" + (100 - l) + "% - 4px)",
						borderColor:
							"rgba(" + (r < 128 ? 255 : 0) + ", " + (g < 128 ? 255 : 0) + ", " + (b < 128 ? 255 : 0) + ", 0.5)"
					}
				})
			),
			VDOM.createElement(
				"div",
				{ className: CSS.element(baseClass, "details") },
				VDOM.createElement(
					"div",
					{
						className: CSS.element(baseClass, "hue"),
						onMouseDown: this.onHueSelect.bind(this),
						onTouchStart: this.onHueSelect.bind(this),
						onWheel: function onWheel(e) {
							_this3.onWheel(e, "h", 10);
						}
					},
					VDOM.createElement("div", {
						className: CSS.element(baseClass, "indicator"),
						style: {
							left: "calc(" + h / 3.6 + "% - 2px)"
						}
					})
				),
				VDOM.createElement(
					"div",
					{ className: CSS.element(baseClass, "inputs") },
					VDOM.createElement(
						"label",
						null,
						"H ",
						VDOM.createElement("input", {
							value: h.toFixed(0),
							onChange: function onChange(e) {
								_this3.onNumberChange(e, "h");
							},
							onWheel: function onWheel(e) {
								_this3.onWheel(e, "h", 10);
							}
						})
					),
					VDOM.createElement(
						"label",
						null,
						"S ",
						VDOM.createElement("input", {
							value: s.toFixed(0),
							onChange: function onChange(e) {
								_this3.onNumberChange(e, "s");
							},
							onWheel: function onWheel(e) {
								_this3.onWheel(e, "s", 5);
							}
						})
					),
					VDOM.createElement(
						"label",
						null,
						"L ",
						VDOM.createElement("input", {
							value: l.toFixed(0),
							onChange: function onChange(e) {
								_this3.onNumberChange(e, "l");
							},
							onWheel: function onWheel(e) {
								_this3.onWheel(e, "l", 5);
							}
						})
					),
					VDOM.createElement(
						"label",
						null,
						"A ",
						VDOM.createElement("input", {
							value: a,
							onChange: function onChange(e) {
								_this3.onNumberChange(e, "a");
							},
							onWheel: function onWheel(e) {
								_this3.onWheel(e, "a", 0.1);
							}
						})
					)
				),
				VDOM.createElement(
					"div",
					{
						className: CSS.element(baseClass, "alpha"),
						onMouseDown: this.onAlphaSelect.bind(this),
						onTouchStart: this.onAlphaSelect.bind(this),
						onWheel: function onWheel(e) {
							_this3.onWheel(e, "a", 0.1);
						}
					},
					VDOM.createElement("div", { style: { background: alphaGradient } }),
					VDOM.createElement("div", {
						className: CSS.element(baseClass, "indicator"),
						style: {
							left: "calc(" + a * 100 + "% - 2px)"
						}
					})
				),
				VDOM.createElement(
					"div",
					{ className: CSS.element(baseClass, "inputs") },
					VDOM.createElement(
						"label",
						null,
						"R ",
						VDOM.createElement("input", {
							value: r.toFixed(0),
							onChange: function onChange(e) {
								_this3.onNumberChange(e, "r");
							},
							onWheel: function onWheel(e) {
								_this3.onWheel(e, "r", 5);
							}
						})
					),
					VDOM.createElement(
						"label",
						null,
						"G ",
						VDOM.createElement("input", {
							value: g.toFixed(0),
							onChange: function onChange(e) {
								_this3.onNumberChange(e, "g");
							},
							onWheel: function onWheel(e) {
								_this3.onWheel(e, "g", 5);
							}
						})
					),
					VDOM.createElement(
						"label",
						null,
						"B ",
						VDOM.createElement("input", {
							value: b.toFixed(0),
							onChange: function onChange(e) {
								_this3.onNumberChange(e, "b");
							},
							onWheel: function onWheel(e) {
								_this3.onWheel(e, "b", 5);
							}
						})
					),
					VDOM.createElement(
						"label",
						null,
						"A ",
						VDOM.createElement("input", {
							value: a,
							onChange: function onChange(e) {
								_this3.onNumberChange(e, "a");
							},
							onWheel: function onWheel(e) {
								_this3.onWheel(e, "a", 0.1);
							}
						})
					)
				),
				VDOM.createElement(
					"div",
					{ className: CSS.element(baseClass, "preview") },
					VDOM.createElement(
						"div",
						{ className: CSS.element(baseClass, "values") },
						VDOM.createElement("input", { value: hsla, readOnly: true }),
						VDOM.createElement("input", { value: rgba, readOnly: true }),
						VDOM.createElement("input", { value: hex, readOnly: true })
					),
					VDOM.createElement(
						"div",
						{
							className: CSS.element(baseClass, "color"),
							onClick: function onClick(e) {
								_this3.onColorClick(e);
							}
						},
						VDOM.createElement("div", { style: { backgroundColor: hsla } })
					)
				)
			)
		);
	};

	ColorPickerComponent.prototype.onColorClick = function onColorClick(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onColorClick) instance.invoke("onColorClick", e, instance);
	};

	ColorPickerComponent.prototype.onHueSelect = function onHueSelect(e) {
		var _this4 = this;

		e.preventDefault();
		e.stopPropagation();

		var el = e.currentTarget;
		var bounds = el.getBoundingClientRect();

		var move = function move(e) {
			var pos = getCursorPos(e);
			var x = Math.max(0, Math.min(1, (pos.clientX + 1 - bounds.left) / el.offsetWidth));
			_this4.setColorProp({
				h: x * 360
			});
		};

		captureMouseOrTouch(e, move);
		move(e);
	};

	ColorPickerComponent.prototype.onAlphaSelect = function onAlphaSelect(e) {
		var _this5 = this;

		e.preventDefault();
		e.stopPropagation();

		var el = e.currentTarget;
		var bounds = el.getBoundingClientRect();

		var move = function move(e) {
			var pos = getCursorPos(e);
			var x = Math.max(0, Math.min(1, (pos.clientX + 1 - bounds.left) / el.offsetWidth));
			_this5.setColorProp({
				a: x
			});
		};

		captureMouseOrTouch(e, move);
		move(e);
	};

	ColorPickerComponent.prototype.onSLSelect = function onSLSelect(e) {
		var _this6 = this;

		e.preventDefault();
		e.stopPropagation();

		var el = e.currentTarget;
		var bounds = el.getBoundingClientRect();

		var move = function move(e) {
			var pos = getCursorPos(e);
			var x = Math.max(0, Math.min(1, (pos.clientX + 1 - bounds.left) / el.offsetWidth));
			var y = Math.max(0, Math.min(1, (pos.clientY + 1 - bounds.top) / el.offsetWidth));
			var s = x;
			var l = 1 - y;
			_this6.setColorProp({
				s: s * 100,
				l: l * 100
			});
		};

		captureMouseOrTouch(e, move);
		move(e);
	};

	ColorPickerComponent.prototype.fix255 = function fix255(v) {
		return Math.max(0, Math.min(255, Math.round(v)));
	};

	ColorPickerComponent.prototype.setColorProp = function setColorProp(props, value) {
		var _this7 = this;

		if (isString(props)) {
			var _props;

			props = ((_props = {}), (_props[props] = value), _props);
		}

		var state = _extends({}, this.state);
		var fixAlpha = false;

		for (var prop in props) {
			value = props[prop];

			switch (prop) {
				case "h":
					state.h = Math.min(360, Math.max(0, value));

					var _hslToRgb2 = hslToRgb(state.h, state.s, state.l);

					state.r = _hslToRgb2[0];
					state.g = _hslToRgb2[1];
					state.b = _hslToRgb2[2];

					fixAlpha = true;
					break;

				case "s":
					state.s = Math.min(100, Math.max(0, value));

					var _hslToRgb3 = hslToRgb(state.h, state.s, state.l);

					state.r = _hslToRgb3[0];
					state.g = _hslToRgb3[1];
					state.b = _hslToRgb3[2];

					fixAlpha = true;
					break;

				case "l":
					state.l = Math.min(100, Math.max(0, value));

					var _hslToRgb4 = hslToRgb(state.h, state.s, state.l);

					state.r = _hslToRgb4[0];
					state.g = _hslToRgb4[1];
					state.b = _hslToRgb4[2];

					fixAlpha = true;
					break;

				case "r":
				case "g":
				case "b":
					state[prop] = Math.round(Math.min(255, Math.max(0, value)));

					var _rgbToHsl2 = rgbToHsl(state.r, state.g, state.b),
						h = _rgbToHsl2[0],
						s = _rgbToHsl2[1],
						l = _rgbToHsl2[2];

					state.h = h;
					state.s = s;
					state.l = l;
					fixAlpha = true;
					break;

				case "a":
					state.a = Math.round(100 * Math.min(1, Math.max(0, value))) / 100;
					break;
			}
		}

		state.r = this.fix255(state.r);
		state.g = this.fix255(state.g);
		state.b = this.fix255(state.b);

		if (fixAlpha && state.a === 0) state.a = 1;

		this.setState(state, function() {
			_this7.props.instance.widget.handleEvent("change", _this7.props.instance, _this7.state);
		});
	};

	ColorPickerComponent.prototype.onNumberChange = function onNumberChange(e, prop) {
		e.preventDefault();
		e.stopPropagation();
		var number = parseFloat(e.target.value || "0");
		this.setColorProp(prop, number);
	};

	ColorPickerComponent.prototype.onWheel = function onWheel(e, prop, delta) {
		e.preventDefault();
		e.stopPropagation();
		var factor = e.deltaY < 0 ? 1 : -1;
		this.setColorProp(prop, this.state[prop] + delta * factor);
	};

	ColorPickerComponent.prototype.onBlur = function onBlur() {
		this.props.instance.widget.handleEvent("blur", this.props.instance, this.state);
	};

	return ColorPickerComponent;
})(VDOM.Component);

var MonthField = (function(_Field) {
	inherits(MonthField, _Field);

	function MonthField() {
		classCallCheck(this, MonthField);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	MonthField.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		if (this.mode == "range") {
			this.range = true;
			this.mode = "edit";
			Console.warn('Please use the range flag on MonthFields. Syntax mode="range" is deprecated.', this);
		}

		var values = {};

		if (this.range) {
			values = {
				from: null,
				to: null
			};
		} else {
			values = {
				value: null
			};
		}

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				values,
				{
					disabled: undefined,
					readOnly: undefined,
					enabled: undefined,
					placeholder: undefined,
					required: undefined,
					minValue: undefined,
					minExclusive: undefined,
					maxValue: undefined,
					maxExclusive: undefined,
					icon: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	MonthField.prototype.isEmpty = function isEmpty(data) {
		return this.range ? data.from == null : data.value == null;
	};

	MonthField.prototype.init = function init() {
		if (!this.culture) this.culture = new DateTimeCulture(Format$1.culture);

		if (isDefined(this.hideClear)) this.showClear = !this.hideClear;

		if (this.alwaysShowClear) this.showClear = true;

		_Field.prototype.init.call(this);
	};

	MonthField.prototype.prepareData = function prepareData(context, _ref) {
		var _Field$prototype$prep, _Field$prototype$prep2;

		var data = _ref.data;

		(_Field$prototype$prep = _Field.prototype.prepareData).call.apply(
			_Field$prototype$prep,
			[this].concat(Array.prototype.slice.call(arguments))
		);

		var formatOptions = {
			year: "numeric",
			month: "short"
		};

		if (!this.range && data.value) {
			data.date = new Date(data.value);
			data.formatted = this.culture.format(data.date, formatOptions);
		} else if (this.range && data.from && data.to) {
			data.from = new Date(data.from);
			data.to = new Date(data.to);
			data.to.setDate(data.to.getDate() - 1);
			var fromStr = this.culture.format(data.from, formatOptions);
			var toStr = this.culture.format(data.to, formatOptions);
			if (fromStr != toStr) data.formatted = fromStr + " - " + toStr;
			else data.formatted = fromStr;
		}

		if (data.refDate) data.refDate = monthStart(new Date(data.refDate));

		if (data.maxValue) data.maxValue = monthStart(new Date(data.maxValue));

		if (data.minValue) data.minValue = monthStart(new Date(data.minValue));

		(_Field$prototype$prep2 = _Field.prototype.prepareData).call.apply(
			_Field$prototype$prep2,
			[this].concat(Array.prototype.slice.call(arguments))
		);
	};

	MonthField.prototype.validateRequired = function validateRequired(context, instance) {
		var data = instance.data;

		if (this.range) {
			if (!data.from || !data.to) return this.requiredText;
		} else return _Field.prototype.validateRequired.call(this, context, instance);
	};

	MonthField.prototype.validate = function validate(context, instance) {
		_Field.prototype.validate.call(this, context, instance);
		var data = instance.data;

		if (!data.error && data.date) {
			var d;
			if (data.maxValue) {
				d = dateDiff(data.date, data.maxValue);
				if (d > 0) data.error = StringTemplate.format(this.maxValueErrorText, data.maxValue);
				else if (d == 0 && data.maxExclusive)
					data.error = StringTemplate.format(this.maxExclusiveErrorText, data.maxValue);
			}

			if (data.minValue) {
				d = dateDiff(data.date, data.minValue);
				if (d < 0) data.error = StringTemplate.format(this.minValueErrorText, data.minValue);
				else if (d == 0 && data.minExclusive)
					data.error = StringTemplate.format(this.minExclusiveErrorText, data.minValue);
			}
		}
	};

	MonthField.prototype.renderInput = function renderInput(context, instance, key) {
		return VDOM.createElement(MonthInput, {
			key: key,
			data: instance.data,
			instance: instance,
			monthPicker: {
				value: this.value,
				from: this.from,
				to: this.to,
				range: this.range,
				minValue: this.minValue,
				maxValue: this.maxValue,
				minExclusive: this.minExclusive,
				maxExclusive: this.maxExclusive,
				maxValueErrorText: this.maxValueErrorText,
				maxExclusiveErrorText: this.maxExclusiveErrorText,
				minValueErrorText: this.minValueErrorText,
				minExclusiveErrorText: this.minExclusiveErrorText
			},
			label: this.labelPlacement && getContent(this.renderLabel(context, instance, "label")),
			help: this.helpPlacement && getContent(this.renderHelp(context, instance, "help"))
		});
	};

	MonthField.prototype.formatValue = function formatValue(context, _ref2) {
		var data = _ref2.data;

		return data.formatted || "";
	};

	MonthField.prototype.parseDate = function parseDate(date) {
		if (!date) return null;
		if (date instanceof Date) return date;
		date = this.culture.parse(date, { useCurrentDateForDefaults: true });
		return date;
	};

	MonthField.prototype.handleSelect = function handleSelect(instance, date1, date2) {
		instance.setState({
			inputError: false
		});

		if (this.range) {
			instance.set("from", date1 ? date1.toISOString() : null);
			instance.set("to", date2 ? date2.toISOString() : null);
		} else instance.set("value", date1 ? date1.toISOString() : null);
	};

	return MonthField;
})(Field);

MonthField.prototype.baseClass = "monthfield";
MonthField.prototype.memoize = false;
MonthField.prototype.maxValueErrorText = "Select {0:d} or before.";
MonthField.prototype.maxExclusiveErrorText = "Select a date before {0:d}.";
MonthField.prototype.minValueErrorText = "Select {0:d} or later.";
MonthField.prototype.minExclusiveErrorText = "Select a date after {0:d}.";
MonthField.prototype.inputErrorText = "Invalid date entered";
MonthField.prototype.suppressErrorsUntilVisited = true;
MonthField.prototype.icon = "calendar";
MonthField.prototype.showClear = true;
MonthField.prototype.alwaysShowClear = false;
MonthField.prototype.range = false;
MonthField.prototype.reactOn = "enter blur";

Localization.registerPrototype("cx/widgets/MonthField", MonthField);

Widget.alias("monthfield", MonthField);

var MonthInput = (function(_VDOM$Component) {
	inherits(MonthInput, _VDOM$Component);

	function MonthInput(props) {
		classCallCheck(this, MonthInput);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.props.instance.component = _this2;
		_this2.state = {
			dropdownOpen: false,
			focus: false
		};
		return _this2;
	}

	MonthInput.prototype.getDropdown = function getDropdown() {
		var _this3 = this;

		if (this.dropdown) return this.dropdown;

		var dropdown = _extends(
			{
				scrollTracking: true,
				inline: !isTouchDevice(),
				placementOrder:
					"down down-left down-right up up-left up-right right right-up right-down left left-up left-down",
				touchFriendly: true
			},
			this.props.instance.widget.dropdownOptions,
			{
				type: Dropdown,
				relatedElement: this.input,
				items: _extends(
					{
						type: MonthPicker
					},
					this.props.monthPicker,
					{
						autoFocus: true,
						onFocusOut: function onFocusOut(e) {
							_this3.closeDropdown(e);
						},
						onKeyDown: function onKeyDown(e) {
							return _this3.onKeyDown(e);
						},
						onSelect: function onSelect(e) {
							var touch = isTouchEvent(e);
							_this3.closeDropdown(e, function() {
								if (!touch) _this3.input.focus();
							});
						}
					}
				),
				constrain: true,
				firstChildDefinesWidth: true
			}
		);

		return (this.dropdown = Widget.create(dropdown));
	};

	MonthInput.prototype.render = function render() {
		var _this4 = this;

		var _props = this.props,
			instance = _props.instance,
			label = _props.label,
			help = _props.help,
			data = _props.data;
		var widget = instance.widget,
			state = instance.state;
		var CSS = widget.CSS,
			baseClass = widget.baseClass,
			suppressErrorsUntilVisited = widget.suppressErrorsUntilVisited;

		var insideButton = void 0,
			icon = void 0;

		if (!data.readOnly && !data.disabled) {
			if (
				widget.showClear &&
				(((widget.alwaysShowClear || !data.required) && !data.empty) || instance.state.inputError)
			)
				insideButton = VDOM.createElement(
					"div",
					{
						className: CSS.element(baseClass, "clear"),
						onMouseDown: function onMouseDown(e) {
							e.preventDefault();
							e.stopPropagation();
						},
						onClick: function onClick(e) {
							_this4.onClearClick(e);
						}
					},
					VDOM.createElement(ClearIcon, { className: CSS.element(baseClass, "icon") })
				);
			else
				insideButton = VDOM.createElement(
					"div",
					{ className: CSS.element(baseClass, "right-icon") },
					VDOM.createElement(DropdownIcon, { className: CSS.element(baseClass, "icon") })
				);
		}

		if (data.icon) {
			icon = VDOM.createElement(
				"div",
				{ className: CSS.element(baseClass, "left-icon") },
				Icon.render(data.icon, { className: CSS.element(baseClass, "icon") })
			);
		}

		var dropdown = false;
		if (this.state.dropdownOpen)
			dropdown = VDOM.createElement(Cx, {
				widget: this.getDropdown(),
				parentInstance: instance,
				options: { name: "datefield-dropdown" }
			});

		var empty = this.input ? !this.input.value : data.empty;

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(
					data.classNames,
					CSS.state({
						visited: state.visited,
						focus: this.state.focus || this.state.dropdownOpen,
						icon: !!icon,
						empty: empty && !data.placeholder,
						error: data.error && (state.visited || !suppressErrorsUntilVisited || !empty)
					})
				),
				style: data.style,
				onMouseDown: this.onMouseDown.bind(this),
				onTouchStart: stopPropagation,
				onClick: stopPropagation
			},
			VDOM.createElement("input", {
				id: data.id,
				ref: function ref(el) {
					_this4.input = el;
				},
				type: "text",
				className: CSS.element(baseClass, "input"),
				style: data.inputStyle,
				defaultValue: data.formatted,
				disabled: data.disabled,
				readOnly: data.readOnly,
				placeholder: data.placeholder,
				onInput: function onInput(e) {
					return _this4.onChange(e, "input");
				},
				onChange: function onChange(e) {
					return _this4.onChange(e, "change");
				},
				onKeyDown: function onKeyDown(e) {
					return _this4.onKeyDown(e);
				},
				onBlur: function onBlur(e) {
					_this4.onBlur(e);
				},
				onFocus: function onFocus(e) {
					_this4.onFocus(e);
				},
				onMouseMove: function onMouseMove(e) {
					return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(_this4.props.instance)));
				},
				onMouseLeave: function onMouseLeave(e) {
					return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(_this4.props.instance)));
				}
			}),
			icon,
			insideButton,
			dropdown,
			label,
			help
		);
	};

	MonthInput.prototype.onMouseDown = function onMouseDown(e) {
		e.stopPropagation();

		if (this.state.dropdownOpen) this.closeDropdown(e);
		else {
			this.openDropdownOnFocus = true;
		}

		//icon click
		if (e.target != this.input) {
			e.preventDefault();
			if (!this.state.dropdownOpen) this.openDropdown(e);
			else this.input.focus();
		}
	};

	MonthInput.prototype.onFocus = function onFocus(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.trackFocus) {
			this.setState({
				focus: true
			});
		}
		if (this.openDropdownOnFocus) this.openDropdown(e);
	};

	MonthInput.prototype.onKeyDown = function onKeyDown(e) {
		var _this5 = this;

		var instance = this.props.instance;

		if (instance.widget.handleKeyDown(e, instance) === false) return;

		switch (e.keyCode) {
			case KeyCode.enter:
				e.stopPropagation();
				this.onChange(e, "enter");
				break;

			case KeyCode.esc:
				if (this.state.dropdownOpen) {
					e.stopPropagation();
					this.closeDropdown(e, function() {
						_this5.input.focus();
					});
				}
				break;

			case KeyCode.left:
			case KeyCode.right:
				e.stopPropagation();
				break;

			case KeyCode.down:
				this.openDropdown(e);
				e.stopPropagation();
				e.preventDefault();
				break;
		}
	};

	MonthInput.prototype.onBlur = function onBlur(e) {
		if (!this.state.dropdownOpen) this.props.instance.setState({ visited: true });

		if (this.state.focus)
			this.setState({
				focus: false
			});
		this.onChange(e, "blur");
	};

	MonthInput.prototype.closeDropdown = function closeDropdown(e, callback) {
		var _this6 = this;

		if (this.state.dropdownOpen) {
			if (this.scrollableParents)
				this.scrollableParents.forEach(function(el) {
					el.removeEventListener("scroll", _this6.updateDropdownPosition);
				});

			this.props.instance.setState({ visited: true });
			this.setState({ dropdownOpen: false }, callback);
		} else if (callback) callback();
	};

	MonthInput.prototype.openDropdown = function openDropdown(e) {
		var data = this.props.instance.data;

		this.openDropdownOnFocus = false;

		if (!this.state.dropdownOpen && !(data.disabled || data.readOnly)) {
			this.setState({ dropdownOpen: true });
		}
	};

	MonthInput.prototype.onClearClick = function onClearClick(e) {
		e.stopPropagation();
		e.preventDefault();

		var instance = this.props.instance;
		var widget = instance.widget;

		widget.handleSelect(instance, null, null);
	};

	MonthInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		var _props$instance = props.instance,
			data = _props$instance.data,
			state = _props$instance.state;

		if (data.formatted != this.input.value && (data.formatted != this.props.data.formatted || !state.inputError)) {
			this.input.value = data.formatted || "";
			props.instance.setState({
				inputError: false
			});
		}
		tooltipParentWillReceiveProps.apply(undefined, [this.input].concat(getFieldTooltip(this.props.instance)));
	};

	MonthInput.prototype.componentDidMount = function componentDidMount() {
		tooltipParentDidMount.apply(undefined, [this.input].concat(getFieldTooltip(this.props.instance)));
		autoFocus(this.input, this);
	};

	MonthInput.prototype.componentDidUpdate = function componentDidUpdate() {
		autoFocus(this.input, this);
	};

	MonthInput.prototype.componentWillUnmount = function componentWillUnmount() {
		tooltipParentWillUnmount(this.props.instance);
	};

	MonthInput.prototype.onChange = function onChange(e, eventType) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.reactOn.indexOf(eventType) == -1) return;

		var parts = e.target.value.split("-");
		var date1 = widget.parseDate(parts[0]);
		var date2 = widget.parseDate(parts[1]) || date1;

		if ((date1 != null && isNaN(date1)) || (date2 != null && isNaN(date2))) {
			instance.setState({
				inputError: widget.inputErrorText
			});
		} else if (eventType == "blur" || eventType == "enter") {
			if (date2) date2 = new Date(date2.getFullYear(), date2.getMonth() + 1, 1);
			instance.setState({
				visited: true
			});
			widget.handleSelect(instance, date1, date2);
		}
	};

	return MonthInput;
})(VDOM.Component);

var ColorField = (function(_Field) {
	inherits(ColorField, _Field);

	function ColorField() {
		classCallCheck(this, ColorField);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	ColorField.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					value: null,
					disabled: undefined,
					readOnly: undefined,
					enabled: undefined,
					placeholder: undefined,
					required: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	ColorField.prototype.init = function init() {
		if (isDefined(this.hideClear)) this.showClear = !this.hideClear;

		if (this.alwaysShowClear) this.showClear = true;

		_Field.prototype.init.call(this);
	};

	ColorField.prototype.prepareData = function prepareData(context, _ref) {
		var _Field$prototype$prep;

		var data = _ref.data;

		data.stateMods = [
			data.stateMods,
			{
				empty: !data.value
			}
		];
		(_Field$prototype$prep = _Field.prototype.prepareData).call.apply(
			_Field$prototype$prep,
			[this].concat(Array.prototype.slice.call(arguments))
		);
	};

	ColorField.prototype.renderInput = function renderInput(context, instance, key) {
		return VDOM.createElement(ColorInput, {
			key: key,
			instance: instance,
			picker: {
				value: this.value,
				format: this.format
			},
			label: this.labelPlacement && getContent(this.renderLabel(context, instance, "label")),
			help: this.helpPlacement && getContent(this.renderHelp(context, instance, "help"))
		});
	};

	return ColorField;
})(Field);

ColorField.prototype.baseClass = "colorfield";
ColorField.prototype.format = "rgba";
ColorField.prototype.suppressErrorsUntilVisited = true;
ColorField.prototype.showClear = true;
ColorField.prototype.alwaysShowClear = false;

Widget.alias("color-field", ColorField);
Localization.registerPrototype("cx/widgets/ColorField", ColorField);

var ColorInput = (function(_VDOM$Component) {
	inherits(ColorInput, _VDOM$Component);

	function ColorInput(props) {
		classCallCheck(this, ColorInput);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		var data = _this2.props.instance.data;

		_this2.data = data;
		_this2.state = {
			dropdownOpen: false,
			focus: false
		};
		return _this2;
	}

	ColorInput.prototype.getDropdown = function getDropdown() {
		var _this3 = this;

		if (this.dropdown) return this.dropdown;

		var dropdown = _extends(
			{
				scrollTracking: true,
				autoFocus: true, //put focus on the dropdown to prevent opening the keyboard
				focusable: true,
				inline: !isTouchDevice(),
				touchFriendly: true,
				placementOrder:
					" down down-left down-right up up-left up-right right right-up right-down left left-up left-down"
			},
			this.props.instance.widget.dropdownOptions,
			{
				type: Dropdown,
				relatedElement: this.input,
				items: _extends(
					{
						type: ColorPicker
					},
					this.props.picker,
					{
						onColorClick: function onColorClick(e) {
							e.stopPropagation();
							e.preventDefault();
							var touch = isTouchEvent(e);
							_this3.closeDropdown(e, function() {
								if (!touch) _this3.input.focus();
							});
						}
					}
				),
				onFocusOut: function onFocusOut() {
					_this3.closeDropdown();
				},
				firstChildDefinesHeight: true,
				firstChildDefinesWidth: true
			}
		);

		return (this.dropdown = Widget.create(dropdown));
	};

	ColorInput.prototype.render = function render() {
		var _this4 = this;

		var _props = this.props,
			instance = _props.instance,
			label = _props.label,
			help = _props.help;
		var data = instance.data,
			widget = instance.widget,
			state = instance.state;
		var CSS = widget.CSS,
			baseClass = widget.baseClass,
			suppressErrorsUntilVisited = widget.suppressErrorsUntilVisited;

		var insideButton = void 0;
		if (!data.readOnly && !data.disabled) {
			if (
				widget.showClear &&
				(((!data.required || widget.alwaysShowClear) && data.value != null) || instance.state.inputError)
			)
				insideButton = VDOM.createElement(
					"div",
					{
						className: CSS.element(baseClass, "clear"),
						onMouseDown: function onMouseDown(e) {
							e.preventDefault();
							e.stopPropagation();
						},
						onClick: function onClick(e) {
							_this4.onClearClick(e);
						}
					},
					VDOM.createElement(ClearIcon, { className: CSS.element(baseClass, "icon") })
				);
			else
				insideButton = VDOM.createElement(
					"div",
					{ className: CSS.element(baseClass, "right-icon") },
					VDOM.createElement(DropdownIcon, { className: CSS.element(baseClass, "icon") })
				);
		}

		var well = VDOM.createElement(
			"div",
			{ className: CSS.element(baseClass, "left-icon") },
			VDOM.createElement("div", { style: { backgroundColor: data.value } })
		);

		var dropdown = false;
		if (this.state.dropdownOpen)
			dropdown = VDOM.createElement(Cx, {
				widget: this.getDropdown(),
				parentInstance: instance,
				options: { name: "colorfield-dropdown" }
			});

		var empty = this.input ? !this.input.value : data.empty;

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(
					data.classNames,
					CSS.state({
						visited: state.visited,
						focus: this.state.focus || this.state.dropdownOpen,
						icon: true,
						empty: empty && !data.placeholder,
						error: data.error && (state.visited || !suppressErrorsUntilVisited || !empty)
					})
				),
				style: data.style,
				onMouseDown: this.onMouseDown.bind(this),
				onTouchStart: stopPropagation,
				onClick: stopPropagation
			},
			VDOM.createElement(
				"input",
				_extends(
					{
						id: data.id,
						ref: function ref(el) {
							_this4.input = el;
						},
						type: "text",
						className: CSS.element(baseClass, "input"),
						style: data.inputStyle,
						defaultValue: this.trim(data.value || ""),
						disabled: data.disabled,
						readOnly: data.readOnly,
						placeholder: data.placeholder
					},
					data.inputAttrs,
					{
						onInput: function onInput(e) {
							return _this4.onChange(e, "input");
						},
						onChange: function onChange(e) {
							return _this4.onChange(e, "change");
						},
						onKeyDown: function onKeyDown(e) {
							return _this4.onKeyDown(e);
						},
						onBlur: function onBlur(e) {
							_this4.onBlur(e);
						},
						onFocus: function onFocus(e) {
							_this4.onFocus(e);
						},
						onMouseMove: function onMouseMove(e) {
							return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(instance)));
						},
						onMouseLeave: function onMouseLeave(e) {
							return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(instance)));
						}
					}
				)
			),
			well,
			insideButton,
			dropdown,
			label,
			help
		);
	};

	ColorInput.prototype.onMouseDown = function onMouseDown(e) {
		e.stopPropagation();
		if (this.state.dropdownOpen) this.closeDropdown(e);
		else {
			this.openDropdownOnFocus = true;
		}

		//icon click
		if (e.target != this.input) {
			e.preventDefault();
			if (!this.state.dropdownOpen) this.openDropdown(e);
			else this.input.focus();
		}
	};

	ColorInput.prototype.onFocus = function onFocus(e) {
		if (this.openDropdownOnFocus) this.openDropdown(e);

		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.trackFocus) {
			this.setState({
				focus: true
			});
		}
	};

	ColorInput.prototype.onKeyDown = function onKeyDown(e) {
		var _this5 = this;

		var instance = this.props.instance;

		if (instance.widget.handleKeyDown(e, instance) === false) return;

		switch (e.keyCode) {
			case KeyCode.enter:
				e.stopPropagation();
				this.onChange(e, "enter");
				break;

			case KeyCode.esc:
				if (this.state.dropdownOpen) {
					e.stopPropagation();
					this.closeDropdown(e, function() {
						_this5.input.focus();
					});
				}
				break;

			case KeyCode.left:
			case KeyCode.right:
				e.stopPropagation();
				break;

			case KeyCode.down:
				this.openDropdown(e);
				e.stopPropagation();
				e.preventDefault();
				break;
		}
	};

	ColorInput.prototype.onBlur = function onBlur(e) {
		if (this.state.focus)
			this.setState({
				focus: false
			});
		this.onChange(e, "blur");
	};

	ColorInput.prototype.closeDropdown = function closeDropdown(e, callback) {
		var _this6 = this;

		if (this.state.dropdownOpen) {
			if (this.scrollableParents)
				this.scrollableParents.forEach(function(el) {
					el.removeEventListener("scroll", _this6.updateDropdownPosition);
				});

			this.setState({ dropdownOpen: false }, callback);
		} else if (callback) callback();
	};

	ColorInput.prototype.openDropdown = function openDropdown(e) {
		var data = this.props.instance.data;

		this.openDropdownOnFocus = false;

		if (!this.state.dropdownOpen && !(data.disabled || data.readOnly)) {
			this.setState({ dropdownOpen: true });
		}
	};

	ColorInput.prototype.trim = function trim(value) {
		return value.replace(/\s/g, "");
	};

	ColorInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		var _props$instance = props.instance,
			data = _props$instance.data,
			state = _props$instance.state;

		var nv = this.trim(data.value || "");
		if (nv != this.input.value && (this.data.value != data.value || !state.inputError)) {
			this.input.value = nv;
			props.instance.setState({
				inputError: false
			});
		}
		this.data = data;

		tooltipParentWillReceiveProps.apply(undefined, [this.input].concat(getFieldTooltip(this.props.instance)));
	};

	ColorInput.prototype.componentDidMount = function componentDidMount() {
		tooltipParentDidMount.apply(undefined, [this.input].concat(getFieldTooltip(this.props.instance)));
		if (this.props.instance.widget.autoFocus && !isTouchDevice()) this.input.focus();
	};

	ColorInput.prototype.componentWillUnmount = function componentWillUnmount() {
		tooltipParentWillUnmount(this.props.instance);
	};

	ColorInput.prototype.onClearClick = function onClearClick(e) {
		var instance = this.props.instance;

		instance.set("value", null);
		instance.setState({
			inputError: false
		});
		e.stopPropagation();
		e.preventDefault();
	};

	ColorInput.prototype.onChange = function onChange(e, eventType) {
		var instance = this.props.instance;

		if (eventType == "blur") instance.setState({ visited: true });

		var value = e.target.value;
		var isValid = void 0;
		try {
			parseColor(value);
			isValid = true;
		} catch (e) {
			isValid = false;
		}

		if (eventType == "blur" || eventType == "enter") {
			if (isValid) instance.set("value", value || null);

			instance.setState({
				inputError: !isValid && "Invalid color entered."
			});
		}
	};

	return ColorInput;
})(VDOM.Component);

//TODO: Implement UploadStatus which will enable canceling

var UploadButton = (function(_Field) {
	inherits(UploadButton, _Field);

	function UploadButton() {
		classCallCheck(this, UploadButton);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	UploadButton.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					disabled: undefined,
					text: undefined,
					url: undefined,
					icon: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	UploadButton.prototype.renderInput = function renderInput(context, instance, key) {
		var data = instance.data;

		return VDOM.createElement(
			UploadButtonComponent,
			{ key: key, instance: instance },
			data.text || this.renderChildren(context, instance)
		);
	};

	return UploadButton;
})(Field);

UploadButton.prototype.baseClass = "uploadbutton";
UploadButton.prototype.multiple = false;
UploadButton.prototype.method = "POST";
UploadButton.prototype.uploadInProgressText = "Upload is in progress.";

Localization.registerPrototype("cx/widgets/UploadButton", UploadButton);

var UploadButtonComponent = (function(_VDOM$Component) {
	inherits(UploadButtonComponent, _VDOM$Component);

	function UploadButtonComponent(props) {
		classCallCheck(this, UploadButtonComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.uploads = {};
		_this2.uploadKey = 0;
		_this2.state = {
			progress: 100
		};
		return _this2;
	}

	UploadButtonComponent.prototype.render = function render() {
		var _this3 = this;

		var _props = this.props,
			instance = _props.instance,
			children = _props.children;
		var widget = instance.widget,
			data = instance.data;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var icon = void 0;

		var className = data.classNames;

		if (data.icon) {
			icon = Icon.render(data.icon, {
				className: CSS.element(baseClass, "icon")
			});

			className = CSS.expand(className, CSS.state("icon"), children.length == 0 && CSS.state("empty"));
		}

		return VDOM.createElement(
			"div",
			{
				ref: function ref(el) {
					_this3.el = el;
				},
				className: className,
				style: data.style
			},
			VDOM.createElement("div", {
				key: "progress",
				className: CSS.element(baseClass, "progress", { done: this.state.progress == 100 }),
				style: { width: this.state.progress + "%" }
			}),
			icon,
			children,
			!data.disabled &&
				VDOM.createElement("input", {
					key: this.uploadKey,
					className: CSS.element(baseClass, "input"),
					type: "file",
					onChange: this.onFileSelected.bind(this),
					multiple: widget.multiple
				})
		);
	};

	UploadButtonComponent.prototype.onFileSelected = function onFileSelected(e) {
		var files = e.dataTransfer ? e.dataTransfer.files : e.target ? e.target.files : [];
		for (var i = 0; i < files.length; i++) {
			this.uploadFile(files[i]);
		}
	};

	UploadButtonComponent.prototype.componentDidMount = function componentDidMount() {
		if (this.props.instance.data.autoFocus) this.el.focus();
	};

	UploadButtonComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		for (var key in this.uploads) {
			var upload = this.uploads[key];
			upload.xhr.abort();
		}
	};

	UploadButtonComponent.prototype.uploadFile = function uploadFile(file) {
		var _this4 = this;

		var instance = this.props.instance;
		var data = instance.data,
			widget = instance.widget;

		if (widget.onResolveUrl) {
			Promise.resolve(instance.invoke("onResolveUrl", file, instance)).then(function(url) {
				_this4.doUpload(file, url);
			});
		} else {
			this.doUpload(file, data.url);
		}
	};

	UploadButtonComponent.prototype.doUpload = function doUpload(file, url) {
		var _this5 = this;

		var instance = this.props.instance;
		var widget = instance.widget;

		if (!url) throw new Error("Upload URL not set.");

		var xhr = new XMLHttpRequest();
		xhr.open(widget.method, Url.resolve(url));

		var formData = new FormData();
		formData.append("file", file);

		if (widget.onUploadStarting && instance.invoke("onUploadStarting", xhr, instance, file, formData) === false) return;

		var key = this.uploadKey++;
		var upload = (this.uploads[key] = {
			progress: 0,
			size: file.size || 1,
			file: file,
			xhr: xhr
		});

		xhr.onload = function() {
			delete _this5.uploads[key];
			if (widget.onUploadComplete) instance.invoke("onUploadComplete", xhr, instance, file, formData);
			_this5.reportProgress();
		};
		xhr.onerror = function(e) {
			delete _this5.uploads[key];
			if (widget.onUploadError) instance.invoke("onUploadError", e, instance, file, formData);
			_this5.reportProgress();
		};

		xhr.upload.onprogress = function(event) {
			if (event.lengthComputable) {
				upload.progress = event.loaded / event.total;
				_this5.reportProgress();
			}
		};

		xhr.send(formData);

		this.reportProgress();
		this.forceUpdate();
	};

	UploadButtonComponent.prototype.reportProgress = function reportProgress() {
		var totalSize = 0;
		var uploaded = 0;

		for (var key in this.uploads) {
			var upload = this.uploads[key];
			totalSize += upload.size;
			uploaded += upload.size * upload.progress;
		}

		var progress = 100 * (totalSize ? uploaded / totalSize : 1);

		this.props.instance.setState({
			inputError: progress == 100 ? false : this.props.instance.uploadInProgressText
		});

		this.setState({
			progress: Math.max(0.001, Math.floor(progress))
		});
	};

	return UploadButtonComponent;
})(VDOM.Component);

Widget.alias("upload-button", UploadButton);

var Slider = (function(_Field) {
	inherits(Slider, _Field);

	function Slider() {
		classCallCheck(this, Slider);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	Slider.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					from: 0,
					to: 0,
					step: undefined,
					minValue: undefined,
					maxValue: undefined,
					increment: undefined,
					incrementPercentage: undefined,
					wheel: undefined,
					disabled: undefined,
					readOnly: undefined,
					rangeStyle: {
						structured: true
					},
					handleStyle: {
						structured: true
					}
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Slider.prototype.init = function init() {
		if (isDefined(this.min)) this.minValue = this.min;

		if (isDefined(this.max)) this.maxValue = this.max;

		if (this.value != null) this.to = this.value;

		if (isUndefined(this.from)) this.from = this.minValue;
		else this.showFrom = true;

		if (isUndefined(this.to)) this.to = this.maxValue;
		else this.showTo = true;

		if (this.valueTooltip) this.toTooltip = this.valueTooltip;

		_Field.prototype.init.call(this);
	};

	Slider.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.stateMods = _extends({}, data.stateMods, {
			horizontal: !this.vertical,
			vertical: this.vertical,
			disabled: data.disabled
		});
		_Field.prototype.prepareData.call(this, context, instance);
	};

	Slider.prototype.renderInput = function renderInput(context, instance, key) {
		return VDOM.createElement(SliderComponent, {
			key: key,
			instance: instance,
			data: instance.data,
			shouldUpdate: instance.shouldUpdate,
			label: this.labelPlacement && getContent(this.renderLabel(context, instance, "label"))
		});
	};

	return Slider;
})(Field);

Slider.prototype.baseClass = "slider";
Slider.prototype.minValue = 0;
Slider.prototype.maxValue = 100;
Slider.prototype.vertical = false;
Slider.prototype.incrementPercentage = 0.01;
Slider.prototype.wheel = false;

Widget.alias("slider", Slider);

var SliderComponent = (function(_VDOM$Component) {
	inherits(SliderComponent, _VDOM$Component);

	function SliderComponent(props) {
		classCallCheck(this, SliderComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.dom = {};
		var data = props.data;

		_this2.state = {
			from: data.from,
			to: data.to
		};
		return _this2;
	}

	SliderComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
		return props.shouldUpdate || state !== this.state;
	};

	SliderComponent.prototype.render = function render() {
		var _babelHelpers$extends,
			_babelHelpers$extends2,
			_babelHelpers$extends3,
			_this3 = this;

		var _props = this.props,
			instance = _props.instance,
			data = _props.data,
			label = _props.label;
		var widget = instance.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;
		var minValue = data.minValue,
			maxValue = data.maxValue;
		var _state = this.state,
			from = _state.from,
			to = _state.to;

		from = Math.min(maxValue, Math.max(minValue, from));
		to = Math.min(maxValue, Math.max(minValue, to));

		var handleStyle = CSS.parseStyle(data.handleStyle);

		var fromHandleStyle = _extends(
			{},
			handleStyle,
			((_babelHelpers$extends = {}),
			(_babelHelpers$extends[widget.vertical ? "top" : "left"] = 100 * (from - minValue) / (maxValue - minValue) + "%"),
			_babelHelpers$extends)
		);
		var toHandleStyle = _extends(
			{},
			handleStyle,
			((_babelHelpers$extends2 = {}),
			(_babelHelpers$extends2[widget.vertical ? "top" : "left"] = 100 * (to - minValue) / (maxValue - minValue) + "%"),
			_babelHelpers$extends2)
		);

		var rangeStart = (from - minValue) / (maxValue - minValue);
		var rangeSize = (to - from) / (maxValue - minValue);

		var rangeStyle = _extends(
			{},
			CSS.parseStyle(data.rangeStyle),
			((_babelHelpers$extends3 = {}),
			(_babelHelpers$extends3[widget.vertical ? "top" : "left"] = 100 * rangeStart + "%"),
			(_babelHelpers$extends3[widget.vertical ? "height" : "width"] = 100 * rangeSize + "%"),
			_babelHelpers$extends3)
		);

		return VDOM.createElement(
			"div",
			{
				className: data.classNames,
				style: data.style,
				id: data.id,
				onClick: this.onClick.bind(this),
				onWheel: this.onWheel.bind(this),
				onMouseMove: function onMouseMove(e) {
					return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(instance)));
				},
				onMouseLeave: function onMouseLeave(e) {
					return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(instance)));
				}
			},
			label,
			"\xA0",
			VDOM.createElement(
				"div",
				{ className: CSS.element(baseClass, "axis") },
				rangeSize > 0 &&
					VDOM.createElement("div", { key: "range", className: CSS.element(baseClass, "range"), style: rangeStyle }),
				VDOM.createElement(
					"div",
					{
						key: "space",
						className: CSS.element(baseClass, "space"),
						ref: function ref(c) {
							return (_this3.dom.range = c);
						}
					},
					widget.showFrom &&
						VDOM.createElement("div", {
							key: "from",
							className: CSS.element(baseClass, "handle"),
							tabIndex: data.disabled ? null : 0,
							style: fromHandleStyle,
							onMouseDown: function onMouseDown(e) {
								return _this3.onHandleMouseDown(e, "from");
							},
							onMouseMove: function onMouseMove(e) {
								return tooltipMouseMove(e, instance, widget.fromTooltip, { tooltipName: "fromTooltip" });
							},
							onMouseLeave: function onMouseLeave(e) {
								return _this3.onHandleMouseLeave(e, "from");
							},
							onTouchStart: function onTouchStart(e) {
								return _this3.onHandleMouseDown(e, "from");
							},
							ref: function ref(c) {
								return (_this3.dom.from = c);
							}
						}),
					widget.showTo &&
						VDOM.createElement("div", {
							key: "to",
							className: CSS.element(baseClass, "handle"),
							tabIndex: data.disabled ? null : 0,
							style: toHandleStyle,
							onMouseDown: function onMouseDown(e) {
								return _this3.onHandleMouseDown(e, "to");
							},
							onMouseMove: function onMouseMove(e) {
								return tooltipMouseMove(e, instance, widget.toTooltip, { tooltipName: "toTooltip" });
							},
							onMouseLeave: function onMouseLeave(e) {
								return _this3.onHandleMouseLeave(e, "to");
							},
							onTouchStart: function onTouchStart(e) {
								return _this3.onHandleMouseDown(e, "to");
							},
							ref: function ref(c) {
								return (_this3.dom.to = c);
							}
						})
				)
			)
		);
	};

	SliderComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		this.setState({
			from: props.data.from,
			to: props.data.to
		});

		var instance = props.instance;
		var widget = instance.widget;

		tooltipParentWillReceiveProps(this.dom.to, instance, widget.toTooltip, { tooltipName: "toTooltip" });
		tooltipParentWillReceiveProps(this.dom.from, instance, widget.fromTooltip, { tooltipName: "fromTooltip" });
	};

	SliderComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		tooltipParentWillUnmount(this.props.instance);
	};

	SliderComponent.prototype.componentDidMount = function componentDidMount() {
		var instance = this.props.instance;
		var widget = instance.widget;

		tooltipParentDidMount(this.dom.to, instance, widget.toTooltip, { tooltipName: "toTooltip" });
		tooltipParentDidMount(this.dom.from, instance, widget.fromTooltip, { tooltipName: "fromTooltip" });
	};

	SliderComponent.prototype.onHandleMouseLeave = function onHandleMouseLeave(e, handle) {
		if (!this.state.drag) {
			var tooltipName = handle + "Tooltip";
			var instance = this.props.instance;

			var tooltip = instance.widget[tooltipName];
			tooltipMouseLeave(e, instance, tooltip, { tooltipName: tooltipName });
		}
	};

	SliderComponent.prototype.onHandleMouseDown = function onHandleMouseDown(e, handle) {
		var _this4 = this;

		e.preventDefault();
		e.stopPropagation();

		var instance = this.props.instance;
		var data = instance.data,
			widget = instance.widget;

		if (data.disabled || data.readOnly) return;

		var handleEl = this.dom[handle];
		var b = handleEl.getBoundingClientRect();
		var pos = getCursorPos(e);
		var dx = pos.clientX - (b.left + b.right) / 2;
		var dy = pos.clientY - (b.top + b.bottom) / 2;

		var tooltipName = handle + "Tooltip";
		var tooltip = widget[tooltipName];

		this.setState({
			drag: true
		});

		captureMouseOrTouch(
			e,
			function(e) {
				var _getValues = _this4.getValues(e, widget.vertical ? dy : dx),
					value = _getValues.value;

				if (handle === "from") {
					if (instance.set("from", value)) _this4.setState({ from: value });
					if (value > _this4.state.to) {
						if (instance.set("to", value)) _this4.setState({ to: value });
					}
				} else if (handle === "to") {
					if (instance.set("to", value)) _this4.setState({ to: value });
					if (value < _this4.state.from) {
						if (instance.set("from", value)) _this4.setState({ from: value });
					}
				}
				tooltipMouseMove(e, instance, tooltip, { tooltipName: tooltipName, target: handleEl });
			},
			function(e) {
				_this4.setState({
					drag: false
				});
				var pos = getCursorPos(e);
				var el = document.elementFromPoint(pos.clientX, pos.clientY);
				if (el !== handleEl) tooltipMouseLeave(e, instance, tooltip, { tooltipName: tooltipName, target: handleEl });
			}
		);
	};

	SliderComponent.prototype.getValues = function getValues(e) {
		var d = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
		var _props$instance = this.props.instance,
			data = _props$instance.data,
			widget = _props$instance.widget;
		var minValue = data.minValue,
			maxValue = data.maxValue;

		var b = this.dom.range.getBoundingClientRect();
		var pos = getCursorPos(e);
		var pct = widget.vertical
			? Math.max(0, Math.min(1, (pos.clientY - b.top - d) / this.dom.range.offsetHeight))
			: Math.max(0, Math.min(1, (pos.clientX - b.left - d) / this.dom.range.offsetWidth));
		var delta = (maxValue - minValue) * pct;
		if (data.step) delta = Math.round(delta / data.step) * data.step;
		return {
			percent: delta / (maxValue - minValue),
			value: minValue + delta
		};
	};

	SliderComponent.prototype.onClick = function onClick(e) {
		var instance = this.props.instance;
		var data = instance.data;

		if (!data.disabled && !data.readOnly) {
			var _getValues2 = this.getValues(e),
				value = _getValues2.value;

			this.props.instance.set("value", value);
		}
	};

	SliderComponent.prototype.onWheel = function onWheel(e) {
		var instance = this.props.instance;
		var data = instance.data,
			widget = instance.widget;

		if ((widget.showFrom && widget.showTo) || !data.wheel) return;

		e.preventDefault();
		e.stopPropagation();

		var increment = e.deltaY > 0 ? this.getIncrement() : -this.getIncrement();

		if (!data.disabled && !data.readOnly) {
			if (widget.showFrom) {
				var value = this.checkBoundries(data.from + increment);
				if (instance.set("from", value)) this.setState({ from: value });
			} else if (widget.showTo) {
				var _value = this.checkBoundries(data.to + increment);
				if (instance.set("to", _value)) this.setState({ to: _value });
			}
		}
	};

	SliderComponent.prototype.checkBoundries = function checkBoundries(value) {
		var data = this.props.instance.data;

		if (value > data.maxValue) value = data.maxValue;
		else if (value < data.minValue) value = data.minValue;
		return value;
	};

	SliderComponent.prototype.getIncrement = function getIncrement() {
		var instance = this.props.instance;
		var data = instance.data;

		var increment = data.increment || (data.maxValue - data.minValue) * data.incrementPercentage;
		return increment;
	};

	return SliderComponent;
})(VDOM.Component);

var Switch = (function(_Field) {
	inherits(Switch, _Field);

	function Switch() {
		classCallCheck(this, Switch);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	Switch.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					on: false,
					off: true,
					value: undefined,
					disabled: undefined,
					readOnly: undefined,
					text: undefined,
					rangeStyle: {
						structured: true
					},
					handleStyle: {
						structured: true
					}
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Switch.prototype.isEmpty = function isEmpty() {
		return false;
	};

	Switch.prototype.init = function init() {
		if (isDefined(this.value)) this.on = this.value;

		this.rangeStyle = parseStyle(this.rangeStyle);
		this.handleStyle = parseStyle(this.handleStyle);

		_Field.prototype.init.call(this);
	};

	Switch.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		if (isDefined(this.off)) data.on = !data.off;

		data.stateMods = _extends({}, data.stateMods, {
			on: data.on,
			disabled: data.disabled
		});
		_Field.prototype.prepareData.call(this, context, instance);
	};

	Switch.prototype.renderInput = function renderInput(context, instance, key) {
		var _this2 = this;

		var data = instance.data,
			widget = instance.widget;
		var rangeStyle = data.rangeStyle,
			handleStyle = data.handleStyle;
		var CSS = this.CSS,
			baseClass = this.baseClass;

		var text = data.text || getContent(this.renderChildren(context, instance));

		return VDOM.createElement(
			"div",
			{
				key: key,
				className: data.classNames,
				style: data.style,
				id: data.id,
				tabIndex: data.disabled ? null : 0,
				onMouseDown: function onMouseDown(e) {
					e.stopPropagation();
					if (!_this2.focusOnMouseDown) preventFocus(e);
				},
				onClick: function onClick(e) {
					_this2.toggle(e, instance);
				},
				onKeyDown: function onKeyDown(e) {
					if (widget.handleKeyDown(e, instance) === false) return;
					if (e.keyCode == KeyCode.space) {
						_this2.toggle(e, instance);
					}
				},
				onMouseMove: function onMouseMove(e) {
					return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(instance)));
				},
				onMouseLeave: function onMouseLeave(e) {
					return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(instance)));
				}
			},
			this.labelPlacement && getContent(this.renderLabel(context, instance, "label")),
			"\xA0",
			VDOM.createElement(
				"div",
				{ className: CSS.element(baseClass, "axis") },
				VDOM.createElement("div", { className: CSS.element(baseClass, "range"), style: parseStyle(rangeStyle) }),
				VDOM.createElement(
					"div",
					{ className: CSS.element(baseClass, "space") },
					VDOM.createElement("div", { className: CSS.element(baseClass, "handle"), style: parseStyle(handleStyle) })
				)
			),
			text && VDOM.createElement("div", { key: "text", className: CSS.element(this.baseClass, "text") }, text)
		);
	};

	Switch.prototype.toggle = function toggle(e, instance) {
		var data = instance.data;

		if (data.readOnly || data.disabled) return;
		instance.set("on", !data.on);
		instance.set("off", data.on);
		e.preventDefault();
		e.stopPropagation();
	};

	return Switch;
})(Field);

Switch.prototype.baseClass = "switch";
Switch.prototype.focusOnMouseDown = false;

Widget.alias("switch", Switch);

var Wheel = (function(_PureContainer) {
	inherits(Wheel, _PureContainer);

	function Wheel() {
		classCallCheck(this, Wheel);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	Wheel.prototype.declareData = function declareData() {
		var _PureContainer$protot;

		return (_PureContainer$protot = _PureContainer.prototype.declareData).call.apply(
			_PureContainer$protot,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					value: undefined,
					options: undefined
				}
			])
		);
	};

	Wheel.prototype.render = function render(context, instance, key) {
		var data = instance.data;
		var value = data.value,
			options = data.options;

		var index = options.findIndex(function(a) {
			return a.id === value;
		});
		if (index === -1) index = Math.floor(options.length / 2);

		return VDOM.createElement(
			WheelComponent,
			{
				key: key,
				size: this.size,
				focusable: true,
				CSS: this.CSS,
				baseClass: this.baseClass,
				className: data.classNames,
				style: data.style,
				shouldUpdate: instance.shouldUpdate,
				index: index,
				onChange: function onChange(newIndex) {
					var option = options[newIndex];
					instance.set("value", option.id);
				}
			},
			options.map(function(o, i) {
				return VDOM.createElement("span", { key: 0 }, o.text);
			})
		);
	};

	return Wheel;
})(PureContainer);

Wheel.prototype.baseClass = "wheel";
Wheel.prototype.size = 3;
Wheel.prototype.styled = true;

var WheelComponent = (function(_VDOM$Component) {
	inherits(WheelComponent, _VDOM$Component);

	function WheelComponent(props) {
		classCallCheck(this, WheelComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.state = {};
		_this2.index = props.index || 0;
		_this2.wheelRef = function(el) {
			_this2.wheelEl = el;
		};
		_this2.scrollRef = function(el) {
			_this2.scrollEl = el;
		};
		_this2.onWheel = _this2.onWheel.bind(_this2);
		_this2.onKeyDown = _this2.onKeyDown.bind(_this2);
		return _this2;
	}

	WheelComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
		return props.shouldUpdate !== false || state !== this.state;
	};

	WheelComponent.prototype.render = function render() {
		var _this3 = this;

		var _props = this.props,
			size = _props.size,
			children = _props.children,
			CSS = _props.CSS,
			baseClass = _props.baseClass,
			active = _props.active,
			className = _props.className,
			style = _props.style,
			onMouseDown = _props.onMouseDown;

		var optionClass = CSS.element(baseClass, "option");
		var dummyClass = CSS.element(baseClass, "option", { dummy: true });

		var tpad = [],
			bpad = [],
			padSize = 0;

		for (var i = 0; i < (size - 1) / 2; i++) {
			tpad.push({ key: -1 - i, child: children[0], cls: dummyClass });
			bpad.push({ key: -100 - i, child: children[0], cls: dummyClass });
			padSize++;
		}

		var displayedOptions = [].concat(
			tpad,
			children.map(function(c, i) {
				return {
					key: i,
					child: c,
					cls: optionClass
				};
			}),
			bpad
		);

		if (!this.state.wheelHeight) displayedOptions = displayedOptions.slice(this.index, this.index + size);

		return VDOM.createElement(
			"div",
			{
				tabIndex: this.props.focusable ? 0 : null,
				className: className || CSS.element(baseClass, "container", { active: active }),
				style: style,
				onKeyDown: this.onKeyDown
			},
			VDOM.createElement(
				"div",
				{
					className: CSS.element(baseClass, "clip"),
					style: {
						width: this.state.wheelWidth
					},
					onMouseDown: onMouseDown
				},
				VDOM.createElement(
					"div",
					{
						className: CSS.element(baseClass, "vscroll"),
						ref: this.scrollRef,
						onWheel: this.onWheel,
						onTouchStart: this.onTouchStart.bind(this),
						onTouchEnd: this.onTouchEnd.bind(this)
					},
					VDOM.createElement(
						"div",
						{
							className: CSS.element(baseClass, "wheel"),
							style: {
								height: this.state.wheelHeight
							},
							ref: this.wheelRef
						},
						displayedOptions.map(function(opt) {
							return VDOM.createElement(
								"div",
								{
									key: opt.key,
									className: opt.cls
								},
								opt.child
							);
						})
					)
				),
				VDOM.createElement("div", {
					className: CSS.element(baseClass, "mask"),
					style: {
						top: "0",
						bottom: (50 + 50 / size).toFixed(3) + "%"
					}
				}),
				VDOM.createElement("div", {
					className: CSS.element(baseClass, "mask"),
					style: {
						top: (50 + 50 / size).toFixed(3) + "%",
						bottom: "0"
					}
				}),
				VDOM.createElement("div", {
					className: CSS.element(baseClass, "selection"),
					style: {
						height: (100 / size).toFixed(3) + "%",
						top: (50 - 50 / size).toFixed(3) + "%"
					}
				})
			),
			VDOM.createElement(
				"div",
				{
					className: CSS.element(baseClass, "arrow-up"),
					onClick: function onClick(e) {
						e.preventDefault();
						_this3.select(_this3.index - 1);
					}
				},
				Icon.render("drop-down", { className: CSS.element(baseClass, "arrow-icon") })
			),
			VDOM.createElement(
				"div",
				{
					className: CSS.element(baseClass, "arrow-down"),
					onClick: function onClick(e) {
						e.preventDefault();
						_this3.select(_this3.index + 1);
					}
				},
				Icon.render("drop-down", { className: CSS.element(baseClass, "arrow-icon") })
			)
		);
	};

	WheelComponent.prototype.componentDidMount = function componentDidMount() {
		var _this4 = this;

		this.setState(
			{
				wheelHeight: this.wheelEl.offsetHeight,
				wheelWidth: this.wheelEl.offsetWidth
			},
			function() {
				_this4.scrollEl.scrollTop = _this4.index * _this4.state.wheelHeight / _this4.props.size;
			}
		);

		if (this.props.onPipeKeyDown) this.props.onPipeKeyDown(this.onKeyDown);
	};

	WheelComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		this.index = props.index || 0;
		this.scrollTo();
	};

	WheelComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		this.scrolling = false;
	};

	WheelComponent.prototype.onKeyDown = function onKeyDown(e) {
		switch (e.keyCode) {
			case KeyCode.up:
				e.preventDefault();
				this.select(this.index - 1);
				break;

			case KeyCode.down:
				e.preventDefault();
				this.select(this.index + 1);
				break;
		}
	};

	WheelComponent.prototype.onWheel = function onWheel(e) {
		e.preventDefault();
		var index = this.index;
		if (e.deltaY > 0) index++;
		else index--;
		this.select(index);
	};

	WheelComponent.prototype.onTouchStart = function onTouchStart(e) {
		this.scrolling = false;
	};

	WheelComponent.prototype.onTouchEnd = function onTouchEnd(e) {
		var size = this.props.size;

		var index = Math.round(this.scrollEl.scrollTop / (this.state.wheelHeight / size));
		this.select(index);
	};

	WheelComponent.prototype.select = function select(newIndex) {
		var children = this.props.children;

		newIndex = Math.max(0, Math.min(children.length - 1, newIndex));
		if (this.index !== newIndex) {
			this.index = newIndex;
			this.props.onChange(newIndex);
		}
		this.scrollTo();
	};

	WheelComponent.prototype.scrollTo = function scrollTo() {
		var _this5 = this;

		var size = this.props.size;

		var callback = function callback() {
			if (!_this5.scrolling) return;

			var x = _this5.index * _this5.state.wheelHeight / size;
			var delta = Math.round(x - _this5.scrollEl.scrollTop);
			if (delta === 0) {
				_this5.scrolling = false;
				return;
			}
			var sign = delta > 0 ? 1 : -1;
			delta = Math.abs(delta) / 10;
			if (delta < 1) delta = 1;

			_this5.scrollEl.scrollTop += sign * delta;
			requestAnimationFrame(callback);
		};

		if (!this.scrolling) {
			this.scrolling = true;
			requestAnimationFrame(callback);
		}
	};

	return WheelComponent;
})(VDOM.Component);

enableCultureSensitiveFormatting();

var DateTimePicker = (function(_Widget) {
	inherits(DateTimePicker, _Widget);

	function DateTimePicker() {
		classCallCheck(this, DateTimePicker);
		return possibleConstructorReturn(this, _Widget.apply(this, arguments));
	}

	DateTimePicker.prototype.declareData = function declareData() {
		var _Widget$prototype$dec;

		return (_Widget$prototype$dec = _Widget.prototype.declareData).call.apply(
			_Widget$prototype$dec,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					value: undefined
				}
			])
		);
	};

	DateTimePicker.prototype.render = function render(context, instance, key) {
		return VDOM.createElement(DateTimePickerComponent, {
			key: key,
			instance: instance,
			data: instance.data,
			size: this.size,
			segment: this.segment
		});
	};

	return DateTimePicker;
})(Widget);

DateTimePicker.prototype.baseClass = "datetimepicker";
DateTimePicker.prototype.size = 3;
DateTimePicker.prototype.autoFocus = false;
DateTimePicker.prototype.segment = "datetime";
DateTimePicker.prototype.showSeconds = false;

var DateTimePickerComponent = (function(_VDOM$Component) {
	inherits(DateTimePickerComponent, _VDOM$Component);

	function DateTimePickerComponent(props) {
		classCallCheck(this, DateTimePickerComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		var date = props.data.value ? new Date(props.data.value) : new Date();
		if (isNaN(date.getTime())) date = new Date();
		_this2.state = {
			date: date,
			activeWheel: null
		};

		var widget = props.instance.widget;

		_this2.handleChange = _this2.handleChange.bind(_this2);
		_this2.onFocus = _this2.onFocus.bind(_this2);
		_this2.onBlur = _this2.onBlur.bind(_this2);
		_this2.onKeyDown = _this2.onKeyDown.bind(_this2);

		var showDate = props.segment.indexOf("date") !== -1;
		var showTime = props.segment.indexOf("time") !== -1;

		_this2.wheels = {
			year: showDate,
			month: showDate,
			date: showDate,
			hours: showTime,
			minutes: showTime,
			seconds: showTime && widget.showSeconds
		};

		_this2.keyDownPipes = {};
		return _this2;
	}

	DateTimePickerComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		var date = props.data.value ? new Date(props.data.value) : new Date();
		if (isNaN(date.getTime())) date = new Date();
		this.setState({ date: date });
	};

	DateTimePickerComponent.prototype.setDateComponent = function setDateComponent(date, component, value) {
		var v = new Date(date);
		switch (component) {
			case "year":
				v.setFullYear(value);
				break;

			case "month":
				v.setMonth(value);
				break;

			case "date":
				v.setDate(value);
				break;

			case "hours":
				v.setHours(value);
				break;

			case "minutes":
				v.setMinutes(value);
				break;

			case "seconds":
				v.setSeconds(value);
				break;
		}
		return v;
	};

	DateTimePickerComponent.prototype.handleChange = function handleChange() {
		this.props.instance.set("value", this.state.date.toISOString());
	};

	DateTimePickerComponent.prototype.render = function render() {
		var _this3 = this;

		var _props = this.props,
			instance = _props.instance,
			data = _props.data,
			size = _props.size;
		var widget = instance.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var date = this.state.date;

		var culture = Culture.getDateTimeCulture();
		var monthNames = culture.getMonthNames("short");

		var years = [];
		for (var y = 1970; y <= 2050; y++) {
			years.push(VDOM.createElement("span", { key: y }, y));
		}
		var days = [];
		var start = new Date(date.getFullYear(), date.getMonth(), 1);
		while (start.getMonth() === date.getMonth()) {
			var day = start.getDate();
			days.push(VDOM.createElement("span", { key: day }, day < 10 ? "0" + day : day));
			start.setDate(start.getDate() + 1);
		}

		var hours = [];
		for (var h = 0; h < 24; h++) {
			hours.push(VDOM.createElement("span", { key: h }, h < 10 ? "0" + h : h));
		}

		var minutes = [];
		for (var m = 0; m < 60; m++) {
			minutes.push(VDOM.createElement("span", { key: m }, m < 10 ? "0" + m : m));
		}

		return VDOM.createElement(
			"div",
			{
				tabIndex: 0,
				ref: function ref(el) {
					_this3.el = el;
				},
				className: data.classNames,
				onFocus: this.onFocus,
				onBlur: this.onBlur,
				onKeyDown: this.onKeyDown
			},
			this.wheels.year &&
				VDOM.createElement(
					WheelComponent,
					{
						size: size,
						CSS: CSS,
						active: this.state.activeWheel === "year",
						baseClass: baseClass + "-wheel",
						index: date.getFullYear() - 1970,
						onChange: function onChange(newIndex) {
							_this3.setState(function(state) {
								return {
									date: _this3.setDateComponent(_this3.state.date, "year", newIndex + 1970)
								};
							}, _this3.handleChange);
						},
						onPipeKeyDown: function onPipeKeyDown(kd) {
							_this3.keyDownPipes["year"] = kd;
						},
						onMouseDown: function onMouseDown() {
							_this3.setState({ activeWheel: "year" });
						}
					},
					years
				),
			this.wheels.year && this.wheels.month && VDOM.createElement("span", null, "-"),
			this.wheels.month &&
				VDOM.createElement(
					WheelComponent,
					{
						size: size,
						CSS: CSS,
						active: this.state.activeWheel === "month",
						baseClass: baseClass + "-wheel",
						index: date.getMonth(),
						onChange: function onChange(newIndex) {
							_this3.setState(function(state) {
								return {
									date: _this3.setDateComponent(_this3.state.date, "month", newIndex)
								};
							}, _this3.handleChange);
						},
						onPipeKeyDown: function onPipeKeyDown(kd) {
							_this3.keyDownPipes["month"] = kd;
						},
						onMouseDown: function onMouseDown() {
							_this3.setState({ activeWheel: "month" });
						}
					},
					monthNames.map(function(m, i) {
						return VDOM.createElement("span", { key: i }, m);
					})
				),
			this.wheels.month && this.wheels.date && VDOM.createElement("span", null, "-"),
			this.wheels.date &&
				VDOM.createElement(
					WheelComponent,
					{
						size: size,
						CSS: CSS,
						active: this.state.activeWheel === "date",
						baseClass: baseClass + "-wheel",
						index: date.getDate() - 1,
						onChange: function onChange(newIndex) {
							_this3.setState(function(state) {
								return {
									date: _this3.setDateComponent(_this3.state.date, "date", newIndex + 1)
								};
							}, _this3.handleChange);
						},
						onPipeKeyDown: function onPipeKeyDown(kd) {
							_this3.keyDownPipes["date"] = kd;
						},
						onMouseDown: function onMouseDown() {
							_this3.setState({ activeWheel: "date" });
						}
					},
					days
				),
			this.wheels.hours &&
				this.wheels.year &&
				VDOM.createElement("span", { className: CSS.element(baseClass, "spacer") }),
			this.wheels.hours &&
				VDOM.createElement(
					WheelComponent,
					{
						size: size,
						CSS: CSS,
						active: this.state.activeWheel === "hours",
						baseClass: baseClass + "-wheel",
						index: date.getHours(),
						onChange: function onChange(newIndex) {
							_this3.setState(function(state) {
								return {
									date: _this3.setDateComponent(_this3.state.date, "hours", newIndex)
								};
							}, _this3.handleChange);
						},
						onPipeKeyDown: function onPipeKeyDown(kd) {
							_this3.keyDownPipes["hours"] = kd;
						},
						onMouseDown: function onMouseDown() {
							_this3.setState({ activeWheel: "hours" });
						}
					},
					hours
				),
			this.wheels.hours && this.wheels.minutes && VDOM.createElement("span", null, ":"),
			this.wheels.minutes &&
				VDOM.createElement(
					WheelComponent,
					{
						size: size,
						CSS: CSS,
						baseClass: baseClass + "-wheel",
						active: this.state.activeWheel === "minutes",
						index: date.getMinutes(),
						onChange: function onChange(newIndex) {
							_this3.setState(function(state) {
								return {
									date: _this3.setDateComponent(_this3.state.date, "minutes", newIndex)
								};
							}, _this3.handleChange);
						},
						onPipeKeyDown: function onPipeKeyDown(kd) {
							_this3.keyDownPipes["minutes"] = kd;
						},
						onMouseDown: function onMouseDown() {
							_this3.setState({ activeWheel: "minutes" });
						}
					},
					minutes
				),
			this.wheels.minutes && this.wheels.seconds && VDOM.createElement("span", null, ":"),
			this.wheels.seconds &&
				VDOM.createElement(
					WheelComponent,
					{
						size: size,
						CSS: CSS,
						baseClass: baseClass + "-wheel",
						active: this.state.activeWheel === "seconds",
						index: date.getSeconds(),
						onChange: function onChange(newIndex) {
							_this3.setState(function(state) {
								return {
									date: _this3.setDateComponent(_this3.state.date, "seconds", newIndex)
								};
							}, _this3.handleChange);
						},
						onPipeKeyDown: function onPipeKeyDown(kd) {
							_this3.keyDownPipes["seconds"] = kd;
						},
						onMouseDown: function onMouseDown() {
							_this3.setState({ activeWheel: "seconds" });
						}
					},
					minutes
				)
		);
	};

	DateTimePickerComponent.prototype.componentDidMount = function componentDidMount() {
		if (this.props.instance.widget.autoFocus) this.el.focus();
	};

	DateTimePickerComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		offFocusOut(this);
	};

	DateTimePickerComponent.prototype.onFocus = function onFocus() {
		oneFocusOut(this, this.el, this.onFocusOut.bind(this));

		if (!this.state.activeWheel) {
			var firstWheel = null;
			for (var wheel in this.wheels) {
				if (this.wheels[wheel]) {
					firstWheel = wheel;
					break;
				}
			}

			this.setState({
				activeWheel: firstWheel
			});
		}
	};

	DateTimePickerComponent.prototype.onFocusOut = function onFocusOut() {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onFocusOut) instance.invoke("onFocusOut", null, instance);
	};

	DateTimePickerComponent.prototype.onBlur = function onBlur() {
		this.setState({
			activeWheel: null
		});
	};

	DateTimePickerComponent.prototype.onKeyDown = function onKeyDown(e) {
		var tmp = null;
		var instance = this.props.instance;

		switch (e.keyCode) {
			case KeyCode.right:
				e.preventDefault();
				for (var wheel in this.wheels) {
					if (this.wheels[wheel]) {
						if (tmp === this.state.activeWheel) {
							this.setState({ activeWheel: wheel });
							break;
						}
						tmp = wheel;
					}
				}
				break;

			case KeyCode.left:
				e.preventDefault();
				for (var _wheel in this.wheels) {
					if (this.wheels[_wheel]) {
						if (_wheel === this.state.activeWheel && tmp) {
							this.setState({ activeWheel: tmp });
							break;
						}
						tmp = _wheel;
					}
				}
				break;

			case KeyCode.enter:
				e.preventDefault();
				if (instance.widget.onSelect) instance.invoke("onSelect", e, instance, this.state.date);
				break;

			default:
				var kdp = this.keyDownPipes[this.state.activeWheel];
				if (kdp) kdp(e);
				break;
		}
	};

	return DateTimePickerComponent;
})(VDOM.Component);

var DateTimeField = (function(_Field) {
	inherits(DateTimeField, _Field);

	function DateTimeField() {
		classCallCheck(this, DateTimeField);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	DateTimeField.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		(_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[
				this,
				{
					value: null,
					disabled: undefined,
					readOnly: undefined,
					enabled: undefined,
					placeholder: undefined,
					required: undefined,
					minValue: undefined,
					minExclusive: undefined,
					maxValue: undefined,
					maxExclusive: undefined,
					format: undefined,
					icon: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	DateTimeField.prototype.init = function init() {
		if (typeof this.hideClear !== "undefined") this.showClear = !this.hideClear;

		if (this.alwaysShowClear) this.showClear = true;

		if (!this.format) {
			switch (this.segment) {
				case "datetime":
					this.format = "YYYYMMddhhmm";
					break;

				case "time":
					this.format = "hhmm";
					break;

				case "date":
					this.format = "YYYYMMMdd";
					break;
			}
		}
		_Field.prototype.init.call(this);
	};

	DateTimeField.prototype.prepareData = function prepareData(context, _ref) {
		var _Field$prototype$prep, _Field$prototype$prep2;

		var data = _ref.data;

		(_Field$prototype$prep = _Field.prototype.prepareData).call.apply(
			_Field$prototype$prep,
			[this].concat(Array.prototype.slice.call(arguments))
		);

		if (data.value) {
			var date = (data.date = new Date(data.value));
			data.formatted = Culture.getDateTimeCulture().format(date, data.format);
		} else data.formatted = "";

		if (data.refDate) data.refDate = zeroTime(new Date(data.refDate));

		if (data.maxValue) data.maxValue = zeroTime(new Date(data.maxValue));

		if (data.minValue) data.minValue = zeroTime(new Date(data.minValue));

		(_Field$prototype$prep2 = _Field.prototype.prepareData).call.apply(
			_Field$prototype$prep2,
			[this].concat(Array.prototype.slice.call(arguments))
		);
	};

	DateTimeField.prototype.validate = function validate(context, instance) {
		_Field.prototype.validate.call(this, context, instance);
		var data = instance.data;

		if (!data.error && data.date) {
			var d;
			if (data.maxValue) {
				d = dateDiff(data.date, data.maxValue);
				if (d > 0) data.error = StringTemplate.format(this.maxValueErrorText, data.maxValue);
				else if (d == 0 && data.maxExclusive)
					data.error = StringTemplate.format(this.maxExclusiveErrorText, data.maxValue);
			}

			if (data.minValue) {
				d = dateDiff(data.date, data.minValue);
				if (d < 0) data.error = StringTemplate.format(this.minValueErrorText, data.minValue);
				else if (d == 0 && data.minExclusive)
					data.error = StringTemplate.format(this.minExclusiveErrorText, data.minValue);
			}
		}
	};

	DateTimeField.prototype.renderInput = function renderInput(context, instance, key) {
		return VDOM.createElement(DateTimeInput, {
			key: key,
			instance: instance,
			data: instance.data,
			shouldUpdate: instance.shouldUpdate,
			picker: {
				value: this.value,
				minValue: this.minValue,
				maxValue: this.maxValue,
				minExclusive: this.minExclusive,
				maxExclusive: this.maxExclusive,
				maxValueErrorText: this.maxValueErrorText,
				maxExclusiveErrorText: this.maxExclusiveErrorText,
				minValueErrorText: this.minValueErrorText,
				minExclusiveErrorText: this.minExclusiveErrorText
			},
			label: this.labelPlacement && getContent(this.renderLabel(context, instance, "label")),
			help: this.helpPlacement && getContent(this.renderHelp(context, instance, "help"))
		});
	};

	DateTimeField.prototype.formatValue = function formatValue(context, _ref2) {
		var data = _ref2.data;

		return data.value ? data.formatted : null;
	};

	DateTimeField.prototype.parseDate = function parseDate(date) {
		if (!date) return null;
		if (date instanceof Date) return date;
		date = Culture.getDateTimeCulture().parse(date, { useCurrentDateForDefaults: true });
		return date;
	};

	return DateTimeField;
})(Field);

DateTimeField.prototype.baseClass = "datetimefield";
//DateTimeField.prototype.memoize = false;

DateTimeField.prototype.maxValueErrorText = "Select {0:d} or before.";
DateTimeField.prototype.maxExclusiveErrorText = "Select a date before {0:d}.";
DateTimeField.prototype.minValueErrorText = "Select {0:d} or later.";
DateTimeField.prototype.minExclusiveErrorText = "Select a date after {0:d}.";
DateTimeField.prototype.inputErrorText = "Invalid date entered.";

DateTimeField.prototype.suppressErrorsUntilVisited = true;
DateTimeField.prototype.icon = "calendar";
DateTimeField.prototype.showClear = true;
DateTimeField.prototype.alwaysShowClear = false;
DateTimeField.prototype.reactOn = "enter blur";
DateTimeField.prototype.segment = "datetime";
DateTimeField.prototype.picker = "auto";

Widget.alias("datetimefield", DateTimeField);
Localization.registerPrototype("cx/widgets/DateTimeField", DateTimeField);

var DateTimeInput = (function(_VDOM$Component) {
	inherits(DateTimeInput, _VDOM$Component);

	function DateTimeInput(props) {
		classCallCheck(this, DateTimeInput);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		props.instance.component = _this2;
		_this2.state = {
			dropdownOpen: false,
			focus: false
		};
		return _this2;
	}

	DateTimeInput.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
		return props.shouldUpdate || state !== this.state || state.dropdownOpen;
	};

	DateTimeInput.prototype.getDropdown = function getDropdown() {
		var _this3 = this;

		if (this.dropdown) return this.dropdown;

		var widget = this.props.instance.widget;

		var pickerConfig = void 0;

		switch (widget.picker) {
			case "calendar":
				pickerConfig = {
					type: Calendar,
					partial: widget.partial
				};
				break;

			default:
				pickerConfig = {
					type: DateTimePicker,
					segment: widget.segment
				};
				break;
		}

		var dropdown = _extends(
			{
				scrollTracking: true,
				inline: !isTouchDevice(),
				matchWidth: false,
				placementOrder: "down down-right down-left up up-right up-left",
				touchFriendly: true,
				firstChildDefinesHeight: true,
				firstChildDefinesWidth: true
			},
			widget.dropdownOptions,
			{
				type: Dropdown,
				relatedElement: this.input,
				items: _extends({}, pickerConfig, this.props.picker, {
					autoFocus: true,
					onFocusOut: function onFocusOut(e) {
						_this3.closeDropdown(e);
					},
					onKeyDown: function onKeyDown(e) {
						return _this3.onKeyDown(e);
					},
					onSelect: function onSelect(e) {
						e.stopPropagation();
						e.preventDefault();
						var touch = isTouchEvent(e);
						_this3.closeDropdown(e, function() {
							if (!touch) _this3.input.focus();
						});
					}
				})
			}
		);

		return (this.dropdown = Widget.create(dropdown));
	};

	DateTimeInput.prototype.render = function render() {
		var _this4 = this;

		var _props = this.props,
			instance = _props.instance,
			label = _props.label,
			help = _props.help;
		var data = instance.data,
			widget = instance.widget,
			state = instance.state;
		var CSS = widget.CSS,
			baseClass = widget.baseClass,
			suppressErrorsUntilVisited = widget.suppressErrorsUntilVisited;

		var insideButton = void 0,
			icon = void 0;

		if (!data.readOnly && !data.disabled) {
			if (
				widget.showClear &&
				(((widget.alwaysShowClear || !data.required) && data.value != null) || instance.state.inputError)
			)
				insideButton = VDOM.createElement(
					"div",
					{
						className: CSS.element(baseClass, "clear"),
						onMouseDown: function onMouseDown(e) {
							e.preventDefault();
							e.stopPropagation();
						},
						onClick: function onClick(e) {
							return _this4.onClearClick(e);
						}
					},
					VDOM.createElement(ClearIcon, { className: CSS.element(baseClass, "icon") })
				);
			else
				insideButton = VDOM.createElement(
					"div",
					{ className: CSS.element(baseClass, "right-icon") },
					VDOM.createElement(DropdownIcon, { className: CSS.element(baseClass, "icon") })
				);
		}

		if (data.icon) {
			icon = VDOM.createElement(
				"div",
				{ className: CSS.element(baseClass, "left-icon") },
				Icon.render(data.icon, { className: CSS.element(baseClass, "icon") })
			);
		}

		var dropdown = false;
		if (this.state.dropdownOpen)
			dropdown = VDOM.createElement(Cx, {
				widget: this.getDropdown(),
				parentInstance: instance,
				options: { name: "datefield-dropdown" }
			});

		var empty = this.input ? !this.input.value : data.empty;

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(
					data.classNames,
					CSS.state({
						visited: state.visited,
						focus: this.state.focus || this.state.dropdownOpen,
						icon: !!icon,
						empty: empty && !data.placeholder,
						error: data.error && (state.visited || !suppressErrorsUntilVisited || !empty)
					})
				),
				style: data.style,
				onMouseDown: this.onMouseDown.bind(this),
				onTouchStart: stopPropagation
			},
			VDOM.createElement(
				"input",
				_extends(
					{
						id: data.id,
						ref: function ref(el) {
							_this4.input = el;
						},
						type: "text",
						className: CSS.element(baseClass, "input"),
						style: data.inputStyle,
						defaultValue: data.formatted,
						disabled: data.disabled,
						readOnly: data.readOnly,
						placeholder: data.placeholder
					},
					data.inputAttrs,
					{
						onInput: function onInput(e) {
							return _this4.onChange(e, "input");
						},
						onChange: function onChange(e) {
							return _this4.onChange(e, "change");
						},
						onKeyDown: function onKeyDown(e) {
							return _this4.onKeyDown(e);
						},
						onBlur: function onBlur(e) {
							_this4.onBlur(e);
						},
						onFocus: function onFocus(e) {
							_this4.onFocus(e);
						},
						onMouseMove: function onMouseMove(e) {
							return tooltipMouseMove.apply(undefined, [e].concat(getFieldTooltip(_this4.props.instance)));
						},
						onMouseLeave: function onMouseLeave(e) {
							return tooltipMouseLeave.apply(undefined, [e].concat(getFieldTooltip(_this4.props.instance)));
						}
					}
				)
			),
			icon,
			insideButton,
			dropdown,
			label,
			help
		);
	};

	DateTimeInput.prototype.onMouseDown = function onMouseDown(e) {
		e.stopPropagation();

		if (this.state.dropdownOpen) this.closeDropdown(e);
		else {
			this.openDropdownOnFocus = true;
		}

		//icon click
		if (e.target !== this.input) {
			e.preventDefault();
			if (!this.state.dropdownOpen) this.openDropdown(e);
			else this.input.focus();
		}
	};

	DateTimeInput.prototype.onFocus = function onFocus(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.trackFocus) {
			this.setState({
				focus: true
			});
		}
		if (this.openDropdownOnFocus) this.openDropdown(e);
	};

	DateTimeInput.prototype.onKeyDown = function onKeyDown(e) {
		var _this5 = this;

		var instance = this.props.instance;

		if (instance.widget.handleKeyDown(e, instance) === false) return;

		switch (e.keyCode) {
			case KeyCode.enter:
				e.stopPropagation();
				this.onChange(e, "enter");
				break;

			case KeyCode.esc:
				if (this.state.dropdownOpen) {
					e.stopPropagation();
					this.closeDropdown(e, function() {
						_this5.input.focus();
					});
				}
				break;

			case KeyCode.left:
			case KeyCode.right:
				e.stopPropagation();
				break;

			case KeyCode.down:
				this.openDropdown(e);
				e.stopPropagation();
				e.preventDefault();
				break;
		}
	};

	DateTimeInput.prototype.onBlur = function onBlur(e) {
		if (!this.state.dropdownOpen) this.props.instance.setState({ visited: true });
		if (this.state.focus)
			this.setState({
				focus: false
			});
		this.onChange(e, "blur");
	};

	DateTimeInput.prototype.closeDropdown = function closeDropdown(e, callback) {
		var _this6 = this;

		if (this.state.dropdownOpen) {
			if (this.scrollableParents)
				this.scrollableParents.forEach(function(el) {
					el.removeEventListener("scroll", _this6.updateDropdownPosition);
				});

			this.setState({ dropdownOpen: false }, callback);
			this.props.instance.setState({ visited: true });
		} else if (callback) callback();
	};

	DateTimeInput.prototype.openDropdown = function openDropdown(e) {
		var data = this.props.instance.data;

		this.openDropdownOnFocus = false;

		if (!this.state.dropdownOpen && !(data.disabled || data.readOnly)) {
			this.setState({ dropdownOpen: true });
		}
	};

	DateTimeInput.prototype.onClearClick = function onClearClick(e) {
		this.setValue(null);
		e.stopPropagation();
		e.preventDefault();
	};

	DateTimeInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		var _props$instance = props.instance,
			data = _props$instance.data,
			state = _props$instance.state;

		if (data.formatted !== this.input.value && (data.formatted !== this.props.data.formatted || !state.inputError)) {
			this.input.value = data.formatted || "";
			props.instance.setState({
				inputError: false
			});
		}

		tooltipParentWillReceiveProps.apply(undefined, [this.input].concat(getFieldTooltip(this.props.instance)));
	};

	DateTimeInput.prototype.componentDidMount = function componentDidMount() {
		tooltipParentDidMount.apply(undefined, [this.input].concat(getFieldTooltip(this.props.instance)));
		autoFocus(this.input, this);
	};

	DateTimeInput.prototype.componentDidUpdate = function componentDidUpdate() {
		autoFocus(this.input, this);
	};

	DateTimeInput.prototype.componentWillUnmount = function componentWillUnmount() {
		tooltipParentWillUnmount(this.props.instance);
	};

	DateTimeInput.prototype.onChange = function onChange(e, eventType) {
		var _props2 = this.props,
			instance = _props2.instance,
			data = _props2.data;
		var widget = instance.widget;

		if (widget.reactOn.indexOf(eventType) === -1) return;

		if (eventType == "enter") instance.setState({ visited: true });

		this.setValue(e.target.value, data.value);
	};

	DateTimeInput.prototype.setValue = function setValue(text, baseValue) {
		var instance = this.props.instance;
		var widget = instance.widget;

		var date = widget.parseDate(text);

		instance.setState({
			inputError: isNaN(date) && widget.inputErrorText
		});

		if (!isNaN(date)) {
			var mixed = new Date(baseValue);
			if (date && baseValue && !isNaN(mixed) && widget.partial) {
				switch (widget.segment) {
					case "date":
						mixed.setFullYear(date.getFullYear());
						mixed.setMonth(date.getMonth());
						mixed.setDate(date.getDate());
						break;

					case "time":
						mixed.setHours(date.getHours());
						mixed.setMinutes(date.getMinutes());
						mixed.setSeconds(date.getSeconds());
						break;

					default:
						mixed = date;
						break;
				}

				date = mixed;
			}
			if (!instance.set("value", date ? date.toISOString() : null)) this.input.value = text || "";
		}
	};

	return DateTimeInput;
})(VDOM.Component);

var DateField = (function(_DateTimeField) {
	inherits(DateField, _DateTimeField);

	function DateField() {
		classCallCheck(this, DateField);
		return possibleConstructorReturn(this, _DateTimeField.apply(this, arguments));
	}

	return DateField;
})(DateTimeField);

DateField.prototype.picker = "calendar";
DateField.prototype.segment = "date";

Widget.alias("datefield", DateField);
Localization.registerPrototype("cx/widgets/DateField", DateField);

var TimeField = (function(_DateTimeField) {
	inherits(TimeField, _DateTimeField);

	function TimeField() {
		classCallCheck(this, TimeField);
		return possibleConstructorReturn(this, _DateTimeField.apply(this, arguments));
	}

	return TimeField;
})(DateTimeField);

TimeField.prototype.segment = "time";

Widget.alias("timefield", TimeField);
Localization.registerPrototype("cx/widgets/TimeField", TimeField);

var Validator = (function(_Field) {
	inherits(Validator, _Field);

	function Validator() {
		classCallCheck(this, Validator);
		return possibleConstructorReturn(this, _Field.apply(this, arguments));
	}

	Validator.prototype.declareData = function declareData() {
		var _Field$prototype$decl;

		return (_Field$prototype$decl = _Field.prototype.declareData).call.apply(
			_Field$prototype$decl,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					value: {
						structured: true
					}
				}
			])
		);
	};

	Validator.prototype.render = function render() {
		return null;
	};

	return Validator;
})(Field);

var DropDownIcon = registerIcon(
	"sort-asc",
	function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 16 16"
			}),
			VDOM.createElement("path", {
				fill: "currentColor",
				d: "M10.5 5.8l-3-3-3 3 .707.708L7 4.688v8.312h1V4.69l1.793 1.817z"
			})
		);
	},
	true
);

var dropZones = new SubscriberList();
var activeZone = void 0;
var nearZones = void 0;
var puppet = void 0;
var scrollTimer = void 0;
var vscrollParent = void 0;
var hscrollParent = void 0;

function registerDropZone(dropZone) {
	return dropZones.subscribe(dropZone);
}

function initiateDragDrop(e) {
	var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var onDragEnd = arguments[2];

	if (puppet) {
		//last operation didn't finish properly
		notifyDragDrop(e);
	}

	var sourceEl = options.sourceEl || e.currentTarget;
	var sourceBounds = sourceEl.getBoundingClientRect();
	var cursor = getCursorPos(e);

	var cloneEl = document.createElement("div");
	cloneEl.className = "cxb-dragclone";
	cloneEl.style.left = "-1000px";
	cloneEl.style.top = "-1000px";
	cloneEl.style.minWidth = Math.ceil(sourceBounds.width) + "px";
	cloneEl.style.minHeight = Math.ceil(sourceBounds.height) + "px";
	document.body.appendChild(cloneEl);

	var styles = getComputedStyle(sourceEl);

	var clone = _extends({}, options.clone);

	var deltaX = cursor.clientX - sourceBounds.left;
	var deltaY = cursor.clientY - sourceBounds.top;

	var source = _extends({}, options.source, {
		width: sourceBounds.width,
		height: sourceBounds.height,
		deltaX: deltaX,
		deltaY: deltaY,
		margin: [
			styles.getPropertyValue("margin-top"),
			styles.getPropertyValue("margin-right"),
			styles.getPropertyValue("margin-bottom"),
			styles.getPropertyValue("margin-left")
		]
	});

	puppet = {
		deltaX: deltaX,
		deltaY: deltaY,
		el: cloneEl,
		clone: clone,
		source: source,
		onDragEnd: onDragEnd
	};

	if (clone.widget && clone.store) {
		puppet.stop = startAppLoop(cloneEl, clone.store, clone.widget, {
			removeParentDOMElement: true
		});
	}

	var event = getDragEvent(e, "dragstart");

	dropZones.execute(function(zone) {
		if (zone.onDropTest && !zone.onDropTest(event)) return;

		if (zone.onDragStart) zone.onDragStart(event);
	});

	notifyDragMove(e);

	captureMouseOrTouch(e, notifyDragMove, notifyDragDrop);
}

function notifyDragMove(e, captureData) {
	var event = getDragEvent(e, "dragmove");
	var over = null,
		best = null;

	var near = [],
		away = [];

	dropZones.execute(function(zone) {
		if (zone.onDropTest && !zone.onDropTest(event)) return;

		if (zone.onDragMeasure) {
			var result = zone.onDragMeasure(event) || {};
			if (result.near) near.push(zone);
			else away.push(zone);

			if (isNumber(result.over) && (best == null || result.over < best)) {
				over = zone;
				best = result.over;
			}
		}
	});

	var newNear = new WeakMap();

	if (nearZones != null) {
		away.forEach(function(z) {
			if (z.onDragAway && nearZones[z]) z.onDragAway(z);
		});
	}

	near.forEach(function(z) {
		if (z.onDragNear && z != over && (nearZones == null || !nearZones[z])) {
			z.onDragNear(z);
			newNear[z] = true;
		}
	});

	nearZones = newNear;

	if (over != activeZone) {
		vscrollParent = null;
		hscrollParent = null;
	}

	if (over != activeZone && activeZone && activeZone.onDragLeave) activeZone.onDragLeave(event);

	if (over != activeZone && over) {
		if (over.onDragEnter) over.onDragEnter(event);

		vscrollParent = over.onGetVScrollParent && over.onGetVScrollParent();
		hscrollParent = over.onGetHScrollParent && over.onGetHScrollParent();
	}

	activeZone = over;

	if (over && over.onDragOver) {
		over.onDragOver(event);
	}

	//do it last to avoid forced redraw if nothing changed
	var cursor = getCursorPos(e);
	puppet.el.style.left = cursor.clientX - puppet.deltaX + "px";
	puppet.el.style.top = cursor.clientY - puppet.deltaY + "px";

	if (vscrollParent || hscrollParent) {
		var scrollX = 0,
			scrollY = 0;
		var vscrollBounds = vscrollParent && getScrollerBoundingClientRect(vscrollParent);
		var hscrollBounds =
			hscrollParent == vscrollParent ? vscrollBounds : hscrollParent && getScrollerBoundingClientRect(hscrollParent);

		if (vscrollBounds) {
			if (cursor.clientY < vscrollBounds.top + 20) scrollY = -1;
			else if (cursor.clientY >= vscrollBounds.bottom - 20) scrollY = 1;
		}

		if (hscrollBounds) {
			if (cursor.clientX < hscrollBounds.left + 20) scrollX = -1;
			else if (cursor.clientX >= hscrollBounds.right - 20) scrollX = 1;
		}

		if (scrollY || scrollX) {
			if (!scrollTimer) {
				var cb = function cb() {
					if (scrollY) {
						var current = vscrollParent.scrollTop;
						var next = Math.min(
							vscrollParent.scrollHeight,
							Math.max(0, current + scrollY * 5 * Math.min(200, Math.max(50, event.source.height)) / 60)
						); //60 FPS
						vscrollParent.scrollTop = next;
					}
					if (scrollX) {
						var _current = hscrollParent.scrollLeft;
						var _next = Math.min(
							hscrollParent.scrollWidth,
							Math.max(0, _current + scrollX * 5 * Math.min(200, Math.max(50, event.source.width)) / 60)
						); //60 FPS
						hscrollParent.scrollLeft = _next;
					}
					scrollTimer = requestAnimationFrame(cb);
				};
				scrollTimer = requestAnimationFrame(cb);
			}
		} else {
			clearScrollTimer();
		}
	} else clearScrollTimer();
}

function clearScrollTimer() {
	if (scrollTimer) {
		cancelAnimationFrame(scrollTimer);
		scrollTimer = null;
	}
}

function notifyDragDrop(e) {
	clearScrollTimer();

	var event = getDragEvent(e, "dragdrop");

	if (puppet.stop) puppet.stop();

	if (activeZone && activeZone.onDrop) event.result = activeZone.onDrop(event);

	dropZones.execute(function(zone) {
		if (zone.onDropTest && !zone.onDropTest(event)) return;

		if (nearZones != null && zone.onDragAway && nearZones[zone]) zone.onDragAway(e);

		if (zone.onDragEnd) zone.onDragEnd(event);
	});

	if (puppet.onDragEnd) puppet.onDragEnd(event);

	nearZones = null;
	activeZone = null;
	puppet = null;
}

function getDragEvent(e, type) {
	return {
		type: type,
		event: e,
		cursor: getCursorPos(e),
		source: puppet.source
	};
}

var dragCandidate = {};

function ddMouseDown(e) {
	dragCandidate = {
		el: e.target,
		start: _extends({}, getCursorPos(e))
	};
}

function ddMouseUp() {
	dragCandidate = {};
}

function ddDetect(e) {
	var cursor = getCursorPos(e);
	if (
		e.target == dragCandidate.el &&
		Math.abs(cursor.clientX - dragCandidate.start.clientX) + Math.abs(cursor.clientY - dragCandidate.start.clientY) >= 2
	) {
		dragCandidate = {};
		return true;
	}
}

var lastDragHandle = void 0;

function ddHandle(e) {
	lastDragHandle = e.target;
}

function isDragHandleEvent(e) {
	return e.target == lastDragHandle;
}

var GridCell = (function(_PureContainer) {
	inherits(GridCell, _PureContainer);

	function GridCell() {
		classCallCheck(this, GridCell);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	GridCell.prototype.declareData = function declareData() {
		var _PureContainer$protot;

		return (_PureContainer$protot = _PureContainer.prototype.declareData).call.apply(
			_PureContainer$protot,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					value: undefined,
					weight: undefined,
					pad: undefined,
					format: undefined
				}
			])
		);
	};

	GridCell.prototype.init = function init() {
		if (!this.value && this.field) this.value = { bind: this.recordName + "." + this.field };
		_PureContainer.prototype.init.call(this);
	};

	GridCell.prototype.prepareCSS = function prepareCSS(context, instance) {
		var _CSS$state;

		var data = instance.data;

		data.classNames = this.CSS.expand(
			data.className,
			data.class,
			this.CSS.state(
				((_CSS$state = {
					pad: data.pad
				}),
				(_CSS$state["aligned-" + this.align] = this.align),
				_CSS$state)
			)
		);

		data.style = this.CSS.parseStyle(data.style);
	};

	GridCell.prototype.render = function render(context, instance, key) {
		var data = instance.data;

		var v = this.renderChildren(context, instance);

		if (v.length == 0) {
			v = data.value;
			if (data.format) v = Format.value(v, data.format);
		}

		return VDOM.createElement(
			"td",
			{
				key: key,
				className: data.classNames,
				style: data.style
			},
			v
		);
	};

	return GridCell;
})(PureContainer);

GridCell.prototype.pad = true;
GridCell.prototype.styled = true;

var GridRow = (function(_ValidationGroup) {
	inherits(GridRow, _ValidationGroup);

	function GridRow() {
		classCallCheck(this, GridRow);
		return possibleConstructorReturn(this, _ValidationGroup.apply(this, arguments));
	}

	GridRow.prototype.render = function render(context, instance, key) {
		return VDOM.createElement("tr", { key: key }, this.renderChildren(context, instance));
	};

	GridRow.prototype.explore = function explore(context, instance) {
		context.push("dragHandles", (instance.dragHandles = []));
		_ValidationGroup.prototype.explore.call(this, context, instance);
	};

	GridRow.prototype.exploreCleanup = function exploreCleanup(context, instance) {
		_ValidationGroup.prototype.exploreCleanup.call(this, context, instance);
		context.pop("dragHandles");
	};

	return GridRow;
})(ValidationGroup);

GridRow.prototype.styled = true;
GridRow.prototype.isPureContainer = false;

var GridRowComponent = (function(_VDOM$Component) {
	inherits(GridRowComponent, _VDOM$Component);

	function GridRowComponent(props) {
		classCallCheck(this, GridRowComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.onMouseMove = _this2.onMouseMove.bind(_this2);
		_this2.onMouseDown = _this2.onMouseDown.bind(_this2);
		_this2.onMouseEnter = _this2.onMouseEnter.bind(_this2);
		_this2.onKeyDown = _this2.onKeyDown.bind(_this2);
		_this2.onClick = _this2.onClick.bind(_this2);

		var grid = props.grid,
			instance = props.instance;

		if (grid.widget.onRowDoubleClick)
			_this2.onDoubleClick = function(e) {
				grid.invoke("onRowDoubleClick", e, instance);
			};

		if (grid.widget.onRowContextMenu)
			_this2.onRowContextMenu = function(e) {
				grid.invoke("onRowContextMenu", e, instance);
			};
		return _this2;
	}

	GridRowComponent.prototype.render = function render() {
		var _props = this.props,
			className = _props.className,
			dragSource = _props.dragSource,
			instance = _props.instance;
		var data = instance.data,
			widget = instance.widget;
		var CSS = widget.CSS;

		var move = void 0,
			up = void 0;

		if (dragSource) {
			move = this.onMouseMove;
			up = ddMouseUp;
		}

		return VDOM.createElement(
			"tbody",
			{
				className: CSS.expand(data.classNames, className),
				style: data.style,
				onClick: this.onClick,
				onDoubleClick: this.onDoubleClick,
				onMouseEnter: this.onMouseEnter,
				onTouchStart: this.onMouseDown,
				onMouseDown: this.onMouseDown,
				onKeyDown: this.onKeyDown,
				onTouchMove: move,
				onMouseMove: move,
				onTouchEnd: up,
				onMouseUp: up,
				onContextMenu: this.onRowContextMenu
			},
			this.props.children
		);
	};

	GridRowComponent.prototype.onMouseEnter = function onMouseEnter(e) {
		var _props2 = this.props,
			parent = _props2.parent,
			cursorIndex = _props2.cursorIndex;

		parent.moveCursor(cursorIndex);
	};

	GridRowComponent.prototype.onMouseDown = function onMouseDown(e) {
		var _props3 = this.props,
			grid = _props3.grid,
			record = _props3.record,
			instance = _props3.instance;

		if (this.props.dragSource) {
			ddMouseDown(e);
			if (isDragHandleEvent(e) || instance.dragHandles.length == 0) e.preventDefault();
		}

		var store = grid.store,
			widget = grid.widget;

		if (widget.selectable) preventFocusOnTouch(e);

		if (!isTouchEvent()) {
			if (e.ctrlKey || !widget.selection.isSelected(store, record.data, record.index)) {
				widget.selection.select(store, record.data, record.index, {
					toggle: e.ctrlKey
				});
			}
		}
	};

	GridRowComponent.prototype.onMouseMove = function onMouseMove(e) {
		if (ddDetect(e) && (isDragHandleEvent(e) || this.props.instance.dragHandles.length == 0))
			this.props.parent.beginDragDrop(e, this.props.record);
	};

	GridRowComponent.prototype.onKeyDown = function onKeyDown(e) {
		switch (e.keyCode) {
			case KeyCode.enter:
				this.onClick(e);
				break;
		}
	};

	GridRowComponent.prototype.onClick = function onClick(e) {
		var _props4 = this.props,
			grid = _props4.grid,
			record = _props4.record,
			instance = _props4.instance;
		var store = grid.store,
			widget = grid.widget;

		if (grid.widget.onRowClick) {
			if (grid.invoke("onRowClick", e, instance) === false) return;
		}

		e.stopPropagation();

		if (isTouchEvent() || (widget.selection.isSelected(store, record.data, record.index) && !e.ctrlKey))
			widget.selection.select(store, record.data, record.index);
	};

	GridRowComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(props) {
		return props.shouldUpdate !== false || props.cursor != this.props.cursor || props.selected != this.props.selected;
	};

	return GridRowComponent;
})(VDOM.Component);

var Grid = (function(_Widget) {
	inherits(Grid, _Widget);

	function Grid() {
		classCallCheck(this, Grid);
		return possibleConstructorReturn(this, _Widget.apply(this, arguments));
	}

	Grid.prototype.declareData = function declareData() {
		var _Widget$prototype$dec;

		var selection = this.selection.configureWidget(this);

		(_Widget$prototype$dec = _Widget.prototype.declareData).call.apply(
			_Widget$prototype$dec,
			[
				this,
				{
					records: undefined,
					sorters: undefined,
					scrollable: undefined,
					sortField: undefined,
					sortDirection: undefined,
					emptyText: undefined,
					dragSource: { structured: true },
					dropZone: { structured: true },
					filterParams: { structured: true },
					page: undefined,
					totalRecordCount: undefined
				},
				selection
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Grid.prototype.init = function init() {
		var _this2 = this;

		if (this.infinite) {
			this.buffered = true;
			this.remoteSort = true;
		}

		if (this.buffered) this.scrollable = true;

		if (this.records && this.records.bind) this.recordsBinding = Binding.get(this.records.bind);

		var columns = this.columns;

		this.columns = Widget.create(GridColumnHeader, this.columns || [], {
			children: null,
			items: null
		});
		this.columns.forEach(function(c) {
			return c.init();
		});

		var aggregates = {};
		this.columns
			.filter(function(c) {
				return c.aggregate && c.aggregateField;
			})
			.forEach(function(c) {
				aggregates[c.aggregateField] = {
					value: c.value != null ? c.value : { bind: _this2.recordName + "." + c.field },
					weight: c.weight != null ? c.weight : c.weightField && { bind: _this2.recordName + "." + c.weightField },
					type: c.aggregate
				};
			});

		//add default footer if some columns have aggregates and grouping is not defined
		if (!this.grouping && Object.keys(aggregates).length > 0)
			this.grouping = [
				{
					key: {},
					showFooter: true
				}
			];

		this.dataAdapter = DataAdapter.create(
			{
				type: (this.dataAdapter && this.dataAdapter.type) || GroupAdapter,
				recordsBinding: this.recordsBinding,
				keyField: this.keyField,
				aggregates: aggregates,
				recordName: this.recordName
			},
			this.dataAdapter
		);

		this.selection = Selection.create(this.selection, {
			records: this.records
		});

		if (!this.selection.isDummy) this.selectable = true;

		_Widget.prototype.init.call(this);

		this.row = Widget.create(
			GridRow,
			_extends(
				{
					class: this.CSS.element(this.baseClass, "data"),
					className: this.rowClass,
					style: this.rowStyle
				},
				this.row,
				{
					items: Widget.create(GridCell, columns || [], {
						recordName: this.recordName
					})
				}
			)
		);

		if (this.grouping) {
			this.groupBy(this.grouping);
		}
	};

	Grid.prototype.initState = function initState(context, instance) {
		instance.state = {};
		instance.v = 0;
		if (this.infinite)
			instance.buffer = {
				records: [],
				totalRecordCount: 0,
				page: 1
			};
	};

	Grid.prototype.prepareData = function prepareData(context, instance) {
		var _data$stateMods;

		var data = instance.data,
			state = instance.state;

		data.version = ++instance.v;

		if (!this.infinite) data.totalRecordCount = isArray(data.records) ? data.records.length : 0;
		else {
			if (isNumber(data.totalRecordCount)) instance.buffer.totalRecordCount = data.totalRecordCount;
			else data.totalRecordCount = instance.buffer.totalRecordCount;

			if (isDefined(data.records)) instance.buffer.records = data.records;
			else data.records = instance.buffer.records;

			if (isNumber(data.page)) instance.buffer.page = data.page;
			else data.page = instance.buffer.page;

			data.offset = (data.page - 1) * this.pageSize;
		}

		if (!isArray(data.records)) data.records = [];

		if (state.sorters && !data.sorters) data.sorters = state.sorters;

		if (data.sortField && data.sortDirection)
			data.sorters = [
				{
					field: data.sortField,
					direction: data.sortDirection
				}
			];

		if ((!data.sorters || data.sorters.length == 0) && this.defaultSortField)
			data.sorters = [
				{
					field: this.defaultSortField,
					direction: this.defaultSortDirection || "ASC"
				}
			];

		var headerMode = this.headerMode;

		if (this.headerMode == null) {
			if (
				this.scrollable ||
				this.columns.some(function(x) {
					return x.sortable;
				})
			)
				headerMode = "default";
			else headerMode = "plain";
		}

		var border = this.border;

		if (this.showBorder || (border == null && this.scrollable)) border = true;

		var dragMode = false;
		if (data.dragSource) dragMode = data.dragSource.mode || "move";

		var dropMode = data.dropZone && data.dropZone.mode;

		if (this.onDrop && !dropMode) dropMode = "preview";

		data.dropMode = dropMode;

		data.stateMods = ((_data$stateMods = {
			selectable: this.selectable,
			scrollable: data.scrollable,
			buffered: this.buffered
		}),
		(_data$stateMods["header-" + headerMode] = true),
		(_data$stateMods.border = border),
		(_data$stateMods.vlines = this.vlines),
		(_data$stateMods["drag-" + dragMode] = dragMode),
		(_data$stateMods["drop-" + dropMode] = dropMode),
		_data$stateMods);

		_Widget.prototype.prepareData.call(this, context, instance);

		instance.records = this.mapRecords(context, instance);
	};

	Grid.prototype.initInstance = function initInstance(context, instance) {
		instance.refs = {
			header: {},
			fixed: {}
		};

		instance.fixedHeaderResizeEvent = new SubscriberList();

		_Widget.prototype.initInstance.call(this, context, instance);
	};

	Grid.prototype.explore = function explore(context, instance) {
		var parentPositionChangeEvent = context.parentPositionChangeEvent;
		context.parentPositionChangeEvent = instance.fixedHeaderResizeEvent;
		_Widget.prototype.explore.call(this, context, instance);

		var columns = exploreChildren(context, instance, this.columns, instance.columns);
		if (columns != instance.columns) {
			instance.columns = columns;
			instance.markShouldUpdate(context);
		}

		var store = instance.store;

		instance.isSelected = this.selection.getIsSelectedDelegate(store);

		//do not process rows in buffered mode or cached mode if nothing has changed;
		if (!this.buffered && (!this.cached || instance.shouldUpdate)) {
			for (var i = 0; i < instance.records.length; i++) {
				var record = instance.records[i];
				if (record.type == "data") {
					var row = (record.row = instance.getChild(context, this.row, record.key, record.store));
					var selected = instance.isSelected(record.data, record.index);
					var changed = row.cache("selected", row.selected) || row.cache("recordData", record.data);
					row.selected = selected;
					if (this.cached && !changed && !row.childStateDirty) {
						row.shouldUpdate = false;
					} else row.scheduleExploreIfVisible(context);
				}
			}
		}
		context.push("parentPositionChangeEvent", parentPositionChangeEvent);
	};

	Grid.prototype.exploreCleanup = function exploreCleanup(context, instance) {
		context.pop("parentPositionChangeEvent");
	};

	Grid.prototype.groupBy = function groupBy(grouping) {
		var _this3 = this;

		var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
			autoConfigure = _ref.autoConfigure;

		if (grouping) {
			if (!isArray(grouping)) {
				if (isString(grouping) || (typeof grouping === "undefined" ? "undefined" : _typeof(grouping)) == "object")
					return this.groupBy([grouping]);
				throw new Error("DynamicGrouping should be an array or grouping objects");
			}

			grouping = grouping.map(function(g, i) {
				if (isString(g)) {
					var _key;

					return {
						key: ((_key = {}),
						(_key[g] = {
							bind: _this3.recordName + "." + g
						}),
						_key),
						showHeader: i == grouping.length - 1,
						showFooter: true,
						caption: { tpl: "{$group." + g + "}" },
						text: { tpl: "{$record." + g + "}" }
					};
				}
				return g;
			});

			initGrouping(grouping);
		}

		if (autoConfigure)
			this.showHeader =
				!isArray(grouping) ||
				!grouping.some(function(g) {
					return g.showHeader;
				});

		this.dataAdapter.groupBy(grouping);
		this.update();
	};

	Grid.prototype.render = function render(context, instance, key) {
		var data = instance.data,
			refs = instance.refs;

		var fixedHeader =
			data.scrollable &&
			this.showHeader &&
			this.renderHeader(context, instance, "header", {
				fixed: true,
				refs: refs.fixed,
				originalRefs: refs.header
			});

		if (!this.buffered) this.renderRows(context, instance);

		refs.header = {};
		var header = this.showHeader && this.renderHeader(context, instance, "header", { refs: refs.header });

		return VDOM.createElement(GridComponent, {
			key: key,
			instance: instance,
			data: instance.data,
			shouldUpdate: instance.shouldUpdate,
			header: header,
			headerRefs: refs.header,
			fixedHeader: fixedHeader,
			fixedHeaderRefs: refs.fixed
		});
	};

	Grid.prototype.renderHeader = function renderHeader(context, instance, key, _ref2) {
		var _this4 = this;

		var fixed = _ref2.fixed,
			refs = _ref2.refs,
			originalRefs = _ref2.originalRefs;
		var data = instance.data,
			widget = instance.widget;

		if (!refs) refs = {};
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var result = [[], [], []];
		var skip = {};

		var empty = [true, true, true];

		instance.columns.forEach(function(columnInstance, i) {
			var c = columnInstance.widget;

			var _loop = function _loop(l) {
				var colKey = i + "-" + l;

				if (skip[colKey]) return "continue";

				var header = columnInstance.components["header" + (l + 1)];
				var colSpan = void 0,
					rowSpan = void 0,
					style = void 0,
					cls = void 0,
					mods = [],
					content = void 0,
					sortIcon = void 0,
					tool = void 0;

				if (header) {
					empty[l] = false;

					if (header.widget.align) mods.push("aligned-" + header.widget.align);
					else if (c.align) mods.push("aligned-" + c.align);

					if (c.sortable && header.widget.allowSorting) {
						mods.push("sortable");

						if (data.sorters && data.sorters[0].field == (c.sortField || c.field)) {
							mods.push("sorted-" + data.sorters[0].direction.toLowerCase());
							sortIcon = VDOM.createElement(DropDownIcon, { className: CSS.element(baseClass, "column-sort-icon") });
						}
					}

					style = header.data.style;
					if (header.data.classNames) cls = header.data.classNames;

					content = header.render(context);

					if (header.components && header.components.tool) {
						tool = VDOM.createElement(
							"div",
							{
								className: CSS.element(baseClass, "col-header-tool")
							},
							getContent(header.components.tool.render(context))
						);
						mods.push("tool");
					}

					if (fixed && originalRefs[colKey]) {
						var width = originalRefs[colKey].offsetWidth + "px";
						style = _extends({}, style, { width: width, minWidth: width, maxWidth: width });
					}

					if (header.data.colSpan > 1 || header.data.rowSpan > 1) {
						colSpan = header.data.colSpan;
						rowSpan = header.data.rowSpan;

						for (var r = 0; r < header.data.rowSpan; r++) {
							for (var _c = 0; _c < header.data.colSpan; _c++) {
								skip[i + _c + "-" + (l + r)] = true;
							}
						}
					}
				}

				cls = CSS.element(baseClass, "col-header", mods) + (cls ? " " + cls : "");

				var onContextMenu = void 0;

				if (_this4.onColumnContextMenu)
					onContextMenu = function onContextMenu(e) {
						return instance.invoke("onColumnContextMenu", e, columnInstance);
					};

				result[l].push(
					VDOM.createElement(
						"th",
						{
							key: i,
							ref: function ref(c) {
								refs[colKey] = c;
							},
							colSpan: colSpan,
							rowSpan: rowSpan,
							className: cls,
							style: style,
							onClick: function onClick(e) {
								return _this4.onHeaderClick(e, c, instance, l);
							},
							onContextMenu: onContextMenu
						},
						getContent(content),
						sortIcon,
						tool
					)
				);
			};

			for (var l = 0; l < 3; l++) {
				var _ret = _loop(l);

				if (_ret === "continue") continue;
			}
		});

		result = result.filter(function(_, i) {
			return !empty[i];
		});

		if (fixed && result[0])
			result[0].push(
				VDOM.createElement("th", {
					key: "dummy",
					rowSpan: result.length,
					className: CSS.element(baseClass, "col-header"),
					ref: function ref(el) {
						refs.last = el;
					}
				})
			);

		return VDOM.createElement(
			"tbody",
			{ key: "h" + key, className: CSS.element(baseClass, "header") },
			result.map(function(h, i) {
				return VDOM.createElement("tr", { key: i }, h);
			})
		);
	};

	Grid.prototype.onHeaderClick = function onHeaderClick(e, column, instance, headerLine) {
		e.preventDefault();
		e.stopPropagation();

		var data = instance.data;

		var header = column.components["header" + (headerLine + 1)];

		if (header.allowSorting && column.sortable && (column.field || column.sortField || column.value)) {
			var sortField = column.sortField || column.field;
			var dir = "ASC";
			if (
				data.sorters &&
				data.sorters[0].field == sortField &&
				(data.sorters[0].value == column.value || data.sortField) &&
				data.sorters[0].direction == "ASC"
			)
				dir = "DESC";

			var sorters = [
				{
					field: sortField,
					direction: dir,
					value: column.value
				}
			];

			instance.set("sorters", sorters);
			instance.set("sortField", sortField);
			instance.set("sortDirection", dir);

			if (!this.remoteSort || this.infinite) instance.setState({ sorters: sorters });
		}
	};

	Grid.prototype.renderGroupHeader = function renderGroupHeader(context, instance, g, level, group, i, store) {
		var CSS = this.CSS,
			baseClass = this.baseClass;

		var data = store.getData();
		var caption = g.caption(data);
		return VDOM.createElement(
			"tbody",
			{ key: "g-" + level + "-" + i, className: CSS.element(baseClass, "group-caption", ["level-" + level]) },
			VDOM.createElement("tr", null, VDOM.createElement("td", { colSpan: instance.columns.length }, caption))
		);
	};

	Grid.prototype.renderGroupFooter = function renderGroupFooter(context, instance, g, level, group, i, store) {
		var CSS = this.CSS,
			baseClass = this.baseClass;

		var data = store.getData();
		var skip = 0;
		return VDOM.createElement(
			"tbody",
			{ key: "f" + i, className: CSS.element(baseClass, "group-footer", ["level-" + level]) },
			VDOM.createElement(
				"tr",
				null,
				instance.columns.map(function(ci, i) {
					if (--skip >= 0) return null;

					var v = void 0,
						c = ci.widget,
						colSpan = void 0,
						pad = void 0;
					if (c.footer) {
						v = c.footer.value(data);
						pad = c.footer.pad;
						colSpan = c.footer.colSpan;

						if (c.footer.expand) {
							colSpan = 1;
							for (
								var ind = i + 1;
								ind < instance.columns.length &&
								!instance.columns[ind].widget.footer &&
								!instance.columns[ind].widget.aggregate;
								ind++
							) {
								colSpan++;
							}
						}

						if (colSpan > 1) skip = colSpan - 1;
					} else if (c.aggregate && c.aggregateField && c.footer !== false) {
						v = group[c.aggregateField];
						if (isString(ci.data.format)) v = Format.value(v, ci.data.format);
					}

					var cls = "";
					if (c.align) cls += CSS.state("aligned-" + c.align);

					if (pad !== false) cls += (cls ? " " : "") + CSS.state("pad");

					return VDOM.createElement(
						"td",
						{
							key: i,
							className: cls,
							colSpan: colSpan
						},
						v
					);
				})
			)
		);
	};

	Grid.prototype.renderRows = function renderRows(context, instance) {
		var records = instance.records;

		if (!isArray(records)) return null;

		var record = void 0,
			g = void 0;

		for (var i = 0; i < records.length; i++) {
			record = records[i];
			if (record.type == "data") record.vdom = getContent(record.row.render(context, record.key));

			if (record.type == "group-header") {
				record.vdom = [];
				g = record.grouping;
				if (g.caption)
					record.vdom.push(
						this.renderGroupHeader(
							context,
							instance,
							g,
							record.level,
							record.group,
							record.key + "-caption",
							record.store
						)
					);

				if (g.showHeader) record.vdom.push(this.renderHeader(context, instance, record.key + "-header", {}));
			}

			if (record.type == "group-footer") {
				g = record.grouping;
				if (g.showFooter)
					record.vdom = this.renderGroupFooter(
						context,
						instance,
						g,
						record.level,
						record.group,
						record.key + "-footer",
						record.store
					);
			}
		}
	};

	Grid.prototype.mapRecords = function mapRecords(context, instance) {
		var data = instance.data,
			store = instance.store;

		var filter = null;
		if (this.onCreateFilter) filter = instance.invoke("onCreateFilter", data.filterParams, instance);

		var sorters = !this.remoteSort && data.sorters;

		this.dataAdapter.setFilter(filter);
		this.dataAdapter.sort(sorters);

		//if no filtering or sorting applied, let the component maps records on demand
		if (this.buffered && !filter && !isNonEmptyArray(sorters)) return null;

		return this.dataAdapter.getRecords(context, instance, data.records, store);
	};

	Grid.prototype.mapRecord = function mapRecord(context, instance, data, index) {
		return this.dataAdapter.mapRecord(context, instance, data, instance.store, this.recordsBinding, index);
	};

	return Grid;
})(Widget);

Grid.prototype.baseClass = "grid";
Grid.prototype.showHeader = true;
Grid.prototype.showFooter = false;
Grid.prototype.recordName = "$record";
Grid.prototype.remoteSort = false;
Grid.prototype.lockColumnWidths = false;
Grid.prototype.lockColumnWidthsRequiredRowCount = 3;
Grid.prototype.focused = false;
Grid.prototype.emptyText = false;
Grid.prototype.showBorder = false; // show border override for material theme
Grid.prototype.cached = false;
Grid.prototype.buffered = false;
Grid.prototype.bufferStep = 15;
Grid.prototype.bufferSize = 60;
Grid.prototype.pageSize = 100;
Grid.prototype.infinite = false;
Grid.prototype.styled = true;

Widget.alias("grid", Grid);
Localization.registerPrototype("cx/widgets/Grid", Grid);

var GridComponent = (function(_VDOM$Component) {
	inherits(GridComponent, _VDOM$Component);

	function GridComponent(props) {
		classCallCheck(this, GridComponent);

		var _this5 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this5.dom = {};
		var widget = props.instance.widget;

		var end = Math.min(widget.bufferSize, props.data.totalRecordCount);

		_this5.state = {
			cursor: widget.focused && widget.selectable ? 0 : -1,
			focused: widget.focused,
			dragInsertionIndex: null,
			start: 0,
			end: end
		};

		_this5.syncBuffering = false;
		_this5.headerHeight = 0;

		if (widget.infinite) {
			_this5.start = 0;
			_this5.end = end;
			_this5.syncBuffering = false; //control with a flag
			_this5.loadingStartPage = 0;
			_this5.loadingEndPage = 0;
		}

		_this5.scrollerRef = function(el) {
			_this5.dom.scroller = el;
		};
		return _this5;
	}

	GridComponent.prototype.render = function render() {
		var _this6 = this;

		var _props = this.props,
			instance = _props.instance,
			data = _props.data;
		var widget = instance.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;
		var dragSource = data.dragSource;
		var _state = this.state,
			dragged = _state.dragged,
			start = _state.start,
			end = _state.end,
			cursor = _state.cursor;

		if (this.syncBuffering) {
			start = this.start;
			end = this.end;
		}

		var children = [];

		var addRow = function addRow(record, i, standalone) {
			var store = record.store,
				key = record.key,
				row = record.row;

			var isDragged = dragged && (row.selected || record == dragged);
			var mod = {
				selected: row.selected,
				dragged: isDragged,
				draggable: dragSource && row.dragHandles.length == 0,
				cursor: i == cursor
			};

			var wrap = function wrap(children) {
				return VDOM.createElement(
					GridRowComponent,
					{
						key: key,
						className: CSS.state(mod),
						store: store,
						dragSource: dragSource,
						instance: row,
						grid: instance,
						record: record,
						parent: _this6,
						cursorIndex: i,
						selected: row.selected,
						isBeingDragged: dragged,
						cursor: mod.cursor,
						shouldUpdate: row.shouldUpdate
					},
					children
				);
			};

			if (standalone) {
				children.push(
					VDOM.createElement(Cx, {
						key: key,
						instance: record.row,
						parentInstance: instance,
						options: { name: "grid-row" },
						contentFactory: function contentFactory(x) {
							return wrap(x.children);
						},
						params: mod
					})
				);
			} else children.push(wrap(record.vdom));
		};
		if (widget.buffered) {
			var context = new RenderingContext();
			var dataCls = CSS.element(baseClass, "data");
			if (!instance.recordInstanceCache) instance.recordInstanceCache = new InstanceCache(instance);
			instance.recordInstanceCache.mark();
			this.getRecordsSlice(start, end).forEach(function(r, i) {
				if (r == null) {
					addRow(
						{
							row: { data: { classNames: dataCls }, widget: widget.row },
							vdom: VDOM.createElement(
								"tr",
								null,
								VDOM.createElement("td", { className: "cxs-pad", colSpan: 1000 }, "\xA0")
							)
						},
						start + i
					);
				} else {
					var record = instance.records
						? r
						: widget.mapRecord(context, instance, r, widget.infinite ? start + i - data.offset : start + i);
					var row = (record.row = instance.recordInstanceCache.getChild(widget.row, record.store, record.key));
					row.selected = instance.isSelected(record.data, record.index);
					// if (row.cache('selected', row.selected) || row.cache('recordData', record.data)) {
					//    //row.markShouldUpdate(context);
					// }
					addRow(record, start + i, true);
				}
			});
			instance.recordInstanceCache.sweep();
		} else {
			instance.records.forEach(function(record, i) {
				if (record.type == "data") {
					addRow(record, i);
				} else children.push(record.vdom);
			});
		}

		if (this.state.dragInsertionIndex != null) {
			var dragInsertionRow = VDOM.createElement(
				"tbody",
				{ key: "dropzone" },
				VDOM.createElement(
					"tr",
					null,
					VDOM.createElement("td", {
						className: CSS.element(baseClass, "dropzone"),
						colSpan: 1000,
						style: {
							height: data.dropMode == "insertion" ? 0 : this.state.dragItemHeight
						}
					})
				)
			);
			children.splice(this.state.dragInsertionIndex, 0, dragInsertionRow);
		}

		var content = [];

		if (children.length == 0 && data.emptyText) {
			children.push(
				VDOM.createElement(
					"tbody",
					{
						key: "empty",
						className: CSS.element(baseClass, "empty-text")
					},
					VDOM.createElement("tr", null, VDOM.createElement("td", { colSpan: 1000 }, data.emptyText))
				)
			);
		}

		var marginTop = -this.headerHeight,
			marginBottom = 0;
		if (this.rowHeight > 0) {
			marginTop += this.rowHeight * start;
			marginBottom = (data.totalRecordCount - (start + children.length)) * this.rowHeight;
		}

		content.push(
			VDOM.createElement(
				"div",
				{
					key: "scroller",
					ref: this.scrollerRef,
					style: {
						marginTop: this.headerHeight + "px"
					},
					tabIndex: widget.selectable ? 0 : null,
					onScroll: this.onScroll.bind(this),
					className: CSS.element(baseClass, "scroll-area", { "fixed-header": !!this.props.header }),
					onKeyDown: this.handleKeyDown.bind(this),
					onMouseLeave: this.handleMouseLeave.bind(this),
					onFocus: this.onFocus.bind(this),
					onBlur: this.onBlur.bind(this)
				},
				VDOM.createElement(
					"table",
					{
						ref: function ref(el) {
							_this6.dom.table = el;
						},
						style: {
							marginTop: marginTop.toFixed(0) + "px",
							marginBottom: marginBottom.toFixed(0) + "px"
						}
					},
					this.props.header,
					children
				)
			)
		);

		if (this.props.fixedHeader)
			content.push(
				VDOM.createElement(
					"div",
					{
						key: "fh",
						ref: function ref(el) {
							_this6.dom.fixedHeader = el;
						},
						className: CSS.element(baseClass, "fixed-header"),
						style: {
							display: this.scrollWidth > 0 ? "block" : "none"
						}
					},
					VDOM.createElement("table", null, this.props.fixedHeader)
				)
			);

		return VDOM.createElement(
			"div",
			{
				className: data.classNames,
				style: data.style
			},
			content
		);
	};

	GridComponent.prototype.getRecordsSlice = function getRecordsSlice(start, end) {
		var _props2 = this.props,
			data = _props2.data,
			instance = _props2.instance;
		var widget = instance.widget;

		if (!widget.infinite) {
			var source = instance.records || data.records;
			return source.slice(start, end);
		}

		var offset = data.offset,
			records = data.records;

		var result = [];
		for (var i = start; i < Math.min(end, data.totalRecordCount); i++) {
			if (i >= offset && i < offset + records.length) result.push(records[i - offset]);
			else result.push(null);
		}

		return result;
	};

	GridComponent.prototype.ensureData = function ensureData(visibleStart, visibleEnd) {
		var _this7 = this;

		this.lastStart = visibleStart;
		this.lastEnd = visibleEnd;

		if (this.loading) return;

		var instance = this.props.instance;
		var widget = instance.widget;
		var pageSize = widget.pageSize;

		var startPage = Math.trunc(visibleStart / pageSize) + 1,
			endPage = Math.trunc((visibleEnd - 1) / pageSize) + 1;

		//debouncing restricts excessive page loading on fast scrolling as rendering data is
		//useless because visible region is scrolled away before data appears
		//the user should spent some time on the page before loading it

		if (!this.loadPageRange)
			this.loadPageRange = debounce(function(startPage, endPage) {
				var data = _this7.props.data;
				var records = data.records,
					offset = data.offset;

				var promises = [];

				for (var page = startPage; page <= endPage; page++) {
					var s = (page - 1) * pageSize,
						e = s + pageSize;
					if (s >= offset && e <= offset + records.length) {
						promises.push(Promise.resolve(records.slice(s - offset, e - offset)));
					} else {
						var result = instance.invoke(
							"onFetchRecords",
							{
								page: page,
								pageSize: pageSize,
								sorters: data.sorters,
								sortField: data.sortField,
								sortDirection: data.sortDirection,
								filterParams: data.filterParams
							},
							instance
						);
						promises.push(Promise.resolve(result));
					}
				}

				_this7.loading = true;

				Promise.all(promises)
					.then(function(pageRecords) {
						_this7.loading = false;
						var records = [];
						var totalRecordCount = void 0;
						var lastPage = void 0;

						pageRecords.forEach(function(page) {
							if (Array.isArray(page)) {
								records.push.apply(records, page);
							} else {
								if (!Array.isArray(page.records))
									throw new Error(
										"onFetchRecords should return an array of records or an object with results inside records property."
									);
								totalRecordCount = page.totalRecordCount;
								lastPage = page.lastPage;
								records.push.apply(records, page.records);
							}
						});

						var data = _this7.props.data;

						if (!isNumber(totalRecordCount)) {
							totalRecordCount = (startPage - 1) * pageSize + records.length;
							if (!lastPage && records.length == (endPage - startPage + 1) * pageSize) totalRecordCount++;
							if (data.totalRecordCount > totalRecordCount) totalRecordCount = data.totalRecordCount;
						}

						instance.buffer.totalRecordCount = data.totalRecordCount = totalRecordCount;
						instance.buffer.records = data.records = records;
						instance.buffer.page = data.page = startPage;
						data.offset = (startPage - 1) * pageSize;

						instance.store.silently(function() {
							instance.set("records", records);
							instance.set("page", startPage);
							instance.set("totalRecordCount", totalRecordCount);
						});

						var stateChanges = {
							startPage: startPage,
							endPage: endPage
						};

						if (_this7.state.end == 0) stateChanges.end = Math.min(widget.bufferSize, totalRecordCount);

						_this7.setState(stateChanges, function() {
							_this7.loadingStartPage = startPage;
							_this7.loadingEndPage = endPage;
							_this7.onScroll();
						});
					})
					.catch(function(error) {
						_this7.loading = false;
						if (widget.onLoadingError) instance.invoke(error, "onLoadingError", instance);
					});
			}, 30);

		if (startPage < this.loadingStartPage || endPage > this.loadingEndPage) {
			this.loadingStartPage = startPage;
			this.loadingEndPage = endPage;
			this.loadPageRange(startPage, endPage);
		}
	};

	GridComponent.prototype.onScroll = function onScroll() {
		var _this8 = this;

		if (this.dom.fixedHeader) {
			this.dom.fixedHeader.scrollLeft = this.dom.scroller.scrollLeft;
		}

		var _props3 = this.props,
			instance = _props3.instance,
			data = _props3.data;
		var widget = instance.widget;

		if (widget.buffered && !this.pending) {
			var start = 0;
			if (this.rowHeight > 0) {
				start = Math.round(this.dom.scroller.scrollTop / this.rowHeight - widget.bufferStep);
				start = Math.round(start / widget.bufferStep) * widget.bufferStep;
				start = Math.max(0, Math.min(start, data.totalRecordCount - widget.bufferSize));
			}
			var end = Math.min(data.totalRecordCount, start + widget.bufferSize);

			if (widget.infinite) {
				this.ensureData(start, end);
			}

			if (this.syncBuffering) {
				this.start = start;
				this.end = end;
			} else if (this.state.end != end) {
				this.pending = true;
				this.setState({ start: start, end: end }, function() {
					_this8.pending = false;
					setTimeout(_this8.onScroll.bind(_this8), 0);
				});
			}
		}
	};

	GridComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
		return props.shouldUpdate !== false || state !== this.state;
	};

	GridComponent.prototype.componentDidMount = function componentDidMount() {
		this.componentDidUpdate();
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.scrollable) this.offResize = ResizeManager.subscribe(this.componentDidUpdate.bind(this));
		if (widget.pipeKeyDown) instance.invoke("pipeKeyDown", this.handleKeyDown.bind(this), instance);
		this.unregisterDropZone = registerDropZone(this);
		if (widget.infinite) this.ensureData(0, 0);
	};

	GridComponent.prototype.onDragStart = function onDragStart(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onDragStart) instance.invoke("onDragStart", e, instance);
	};

	GridComponent.prototype.onDrop = function onDrop(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onDrop) {
			e.target = {
				insertionIndex: this.state.dragInsertionIndex
			};
			instance.invoke("onDrop", e, instance);
		}
	};

	GridComponent.prototype.onDropTest = function onDropTest(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onDropTest) return instance.invoke("onDropTest", e, instance);
		return true;
	};

	GridComponent.prototype.onDragEnd = function onDragEnd(e) {
		this.setState({
			dragInsertionIndex: null,
			lastDragInsertionIndex: null
		});
		var instance = this.props.instance;
		var widget = instance.widget;

		if (widget.onDragEnd) instance.invoke("onDragEnd", e, instance);
	};

	GridComponent.prototype.onDragMeasure = function onDragMeasure(e) {
		var r = this.dom.scroller.getBoundingClientRect();
		var _e$cursor = e.cursor,
			clientX = _e$cursor.clientX,
			clientY = _e$cursor.clientY;

		if (clientX < r.left || clientX >= r.right || clientY < r.top || clientY >= r.bottom) return false;

		return {
			over: 1000
		};
	};

	GridComponent.prototype.onDragOver = function onDragOver(ev) {
		var _props$instance$widge = this.props.instance.widget,
			CSS = _props$instance$widge.CSS,
			baseClass = _props$instance$widge.baseClass;

		var rowClass = CSS.element(baseClass, "data");
		var nodes = Array.from(this.dom.scroller.firstChild.childNodes).filter(function(node) {
			return node.className && node.className.indexOf(rowClass) != -1;
		});

		var cy = ev.cursor.clientY;
		var s = 0,
			e = nodes.length,
			m = void 0,
			b = void 0;

		while (s < e) {
			m = Math.floor((s + e) / 2);
			b = nodes[m].getBoundingClientRect();

			//dragged items might be invisible and have no client bounds
			if (b.top == 0 && b.bottom == 0) {
				if (m > s) m--;
				else if (m + 1 < e) m = m + 1;
				else {
					s = e = m;
					break;
				}
				b = nodes[m].getBoundingClientRect();
			}

			if (cy < b.top) e = m;
			else if (cy > b.bottom) s = m + 1;
			else {
				if (cy > (b.bottom + b.top) / 2) s = e = m + 1;
				else {
					s = e = m;
				}
			}
		}

		if (s != this.state.dragInsertionIndex) {
			this.setState({
				dragInsertionIndex: s,
				dragItemHeight: ev.source.height - 1
			});
		}
	};

	GridComponent.prototype.onDragLeave = function onDragLeave(e) {
		this.setState({
			dragInsertionIndex: null
		});
	};

	GridComponent.prototype.onGetHScrollParent = function onGetHScrollParent() {
		var widget = this.props.instance.widget;

		if (widget.scrollable) return this.dom.scroller;
		return findScrollableParent(this.el, true);
	};

	GridComponent.prototype.onGetVScrollParent = function onGetVScrollParent() {
		var widget = this.props.instance.widget;

		if (widget.scrollable) return this.dom.scroller;
		return findScrollableParent(this.el);
	};

	GridComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
		var _props$instance = props.instance,
			data = _props$instance.data,
			widget = _props$instance.widget;

		if (!props.header) this.headerHeight = 0;
		this.setState({
			cursor: Math.max(
				Math.min(this.state.cursor, data.totalRecordCount - 1),
				widget.selectable && this.state.focused ? 0 : -1
			)
		});
	};

	GridComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (this.offResize) this.offResize();

		offFocusOut(this);

		if (this.unregisterDropZone) this.unregisterDropZone();

		if (widget.pipeKeyDown) instance.invoke("pipeKeyDown", null, instance);
	};

	GridComponent.prototype.componentDidUpdate = function componentDidUpdate() {
		var _props4 = this.props,
			headerRefs = _props4.headerRefs,
			fixedHeaderRefs = _props4.fixedHeaderRefs,
			instance = _props4.instance,
			data = _props4.data;
		var widget = instance.widget;

		if (
			widget.lockColumnWidths &&
			headerRefs &&
			isArray(data.records) &&
			data.records.length >= widget.lockColumnWidthsRequiredRowCount
		) {
			for (var k in headerRefs) {
				var c = headerRefs[k];
				c.style.width = c.offsetWidth + "px";
			}
		}

		if (widget.scrollable) {
			this.scrollWidth = this.dom.scroller.offsetWidth - this.dom.scroller.clientWidth;

			var resized = false,
				headerHeight = 0,
				rowHeight = 0;

			if (headerRefs) {
				for (var _k in headerRefs) {
					headerHeight = headerRefs[_k].offsetHeight;
					break;
				}
			}

			if (this.dom.fixedHeader) {
				for (var _k2 in headerRefs) {
					var _c2 = headerRefs[_k2];
					var fhe = fixedHeaderRefs[_k2];
					if (fhe) {
						var w = _c2.offsetWidth + "px";
						if (w !== fhe.style.width) {
							fhe.style.width = fhe.style.minWidth = fhe.style.maxWidth = w;
							resized = true;
						}
					}
				}
				this.dom.fixedHeader.style.display = "block";
				if (fixedHeaderRefs.last)
					fixedHeaderRefs.last.style.width = fixedHeaderRefs.last.style.minWidth = this.scrollWidth + "px";
			}

			this.dom.scroller.style.marginTop = headerHeight + "px";

			if (widget.buffered) {
				var _state2 = this.state,
					start = _state2.start,
					end = _state2.end;

				if (this.syncBuffering) {
					start = this.start;
					end = this.end;
				}
				var remaining = 0,
					count = Math.min(data.totalRecordCount, end - start);
				if (count > 0) {
					rowHeight = Math.round((this.dom.table.offsetHeight - headerHeight) / count);
					// if (this.rowHeight && this.rowHeight != rowHeight) {
					//    console.warn("ROW-HEIGHT-CHANGE", this.rowHeight, rowHeight);
					// }
					remaining = Math.max(0, data.totalRecordCount - end);
				}
				this.dom.table.style.marginTop = (-headerHeight + start * rowHeight).toFixed(0) + "px";
				this.dom.table.style.marginBottom = (remaining * this.headerHeight).toFixed(0) + "px";
			} else {
				this.dom.table.style.marginTop = -headerHeight + "px";
			}

			this.headerHeight = headerHeight;
			this.rowHeight = rowHeight;

			var sortersChanged = widget.infinite && !shallowEquals(data.sorters, this.lastSorters);

			if (data.totalRecordCount == 0 || sortersChanged || data.filterParams !== this.lastScrollFilterParams) {
				this.dom.scroller.scrollTop = 0;
				this.lastScrollFilterParams = data.filterParams;
				this.lastSorters = data.sorters;
				if (widget.infinite) {
					this.loadingStartPage = 0;
					this.loadingEndPage = 0;
					instance.buffer.records = data.records = [];
					instance.buffer.totalRecordCount = 0;
					instance.buffer.page = 1;
				}
			}

			this.onScroll();

			if (resized) instance.fixedHeaderResizeEvent.notify();
		}
	};

	GridComponent.prototype.moveCursor = function moveCursor(index, focused, scrollIntoView) {
		var _this9 = this;

		var widget = this.props.instance.widget;

		if (!widget.selectable) return;

		if (focused != null && this.state.focused != focused)
			this.setState({
				focused: focused || widget.focused
			});

		this.setState(
			{
				cursor: index
			},
			function() {
				if (scrollIntoView) {
					var start = !widget.buffered ? 0 : _this9.syncBuffering ? _this9.start : _this9.state.start;
					var item = _this9.dom.scroller.firstChild.children[index + 1 - start];
					if (item) scrollElementIntoView(item);
				}
			}
		);
	};

	GridComponent.prototype.showCursor = function showCursor(focused) {
		var _props$instance2 = this.props.instance,
			records = _props$instance2.records,
			isSelected = _props$instance2.isSelected;

		if (this.state.cursor == -1 && records) {
			var cursor = records.findIndex(function(x) {
				return isSelected(x.data, x.index);
			});
			//if there are no selected records, find the first data record (skip group header)
			if (cursor == -1)
				cursor = records.findIndex(function(x) {
					return x.type == "data";
				});
			this.moveCursor(cursor, true, true);
		}
	};

	GridComponent.prototype.onFocus = function onFocus() {
		var _this10 = this;

		FocusManager.nudge();
		this.showCursor(true);

		var widget = this.props.instance.widget;

		if (!widget.focused)
			oneFocusOut(this, this.dom.scroller, function() {
				_this10.moveCursor(-1, false);
			});

		this.setState({
			focused: true
		});
	};

	GridComponent.prototype.onBlur = function onBlur() {
		FocusManager.nudge();
	};

	GridComponent.prototype.handleMouseLeave = function handleMouseLeave() {
		if (!this.state.focused) this.moveCursor(-1);
	};

	GridComponent.prototype.handleKeyDown = function handleKeyDown(e) {
		var _props5 = this.props,
			instance = _props5.instance,
			data = _props5.data;
		var records = instance.records,
			widget = instance.widget;

		if (this.onKeyDown && instance.invoke("onKeyDown", e, instance) === false) return;

		switch (e.keyCode) {
			case KeyCode.enter:
				var record = void 0;

				if (records) record = records[this.state.cursor];
				else {
					var r = data.records[this.state.cursor - data.offset];
					if (r)
						record = widget.mapRecord(
							null,
							instance,
							r,
							widget.infinite ? this.state.cursor - data.offset : this.state.cursor
						);
				}
				if (record)
					widget.selection.select(instance.store, record.data, record.index, {
						toggle: e.ctrlKey
					});
				break;

			case KeyCode.down:
				if (this.state.cursor + 1 < data.totalRecordCount) {
					this.moveCursor(this.state.cursor + 1, true, true);
					e.stopPropagation();
					e.preventDefault();
				}
				break;

			case KeyCode.up:
				if (this.state.cursor > 0) {
					this.moveCursor(this.state.cursor - 1, true, true);
					e.stopPropagation();
					e.preventDefault();
				}
				break;
		}
	};

	GridComponent.prototype.beginDragDrop = function beginDragDrop(e, record) {
		var _this11 = this;

		var _props6 = this.props,
			instance = _props6.instance,
			data = _props6.data;
		var widget = instance.widget,
			store = instance.store,
			isSelected = instance.isSelected;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var selected = instance.records.filter(function(record) {
			return isSelected(record.data, record.index);
		});

		if (selected.length == 0) selected = [record];

		var contents = selected.map(function(record, i) {
			return VDOM.createElement(
				"tbody",
				{
					key: i,
					className: CSS.element(baseClass, "data", { selected: !widget.selection.isDummy })
				},
				record.vdom
			);
		});

		initiateDragDrop(
			e,
			{
				sourceEl: e.currentTarget,
				source: {
					data: data.dragSource.data,
					store: store,
					record: record,
					records: selected
				},
				clone: {
					store: record.store,
					widget: function widget(props) {
						return VDOM.createElement(
							"div",
							{ className: data.classNames },
							VDOM.createElement("table", null, contents)
						);
					}
				}
			},
			function() {
				_this11.setState({
					dragged: false
				});
			}
		);

		this.setState({
			dragged: record
		});
	};

	return GridComponent;
})(VDOM.Component);

var GridColumnHeader = (function(_PureContainer) {
	inherits(GridColumnHeader, _PureContainer);

	function GridColumnHeader() {
		classCallCheck(this, GridColumnHeader);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	GridColumnHeader.prototype.declareData = function declareData() {
		var _PureContainer$protot;

		return (_PureContainer$protot = _PureContainer.prototype.declareData).call.apply(
			_PureContainer$protot,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					format: undefined
				}
			])
		);
	};

	GridColumnHeader.prototype.init = function init() {
		if (this.header) this.header1 = this.header;

		if (this.header1 && isSelector(this.header1))
			this.header1 = {
				text: this.header1 || ""
			};

		if (this.header2 && isSelector(this.header2))
			this.header2 = {
				text: this.header2 || ""
			};

		if (this.header3 && isSelector(this.header3))
			this.header3 = {
				text: this.header3 || ""
			};

		if (!this.aggregateField && this.field) this.aggregateField = this.field;

		if (this.footer && isSelector(this.footer))
			this.footer = {
				value: this.footer,
				pad: this.pad,
				format: this.format
			};

		if (this.footer) this.footer.value = getSelector(this.footer.value);

		_PureContainer.prototype.init.call(this);
	};

	GridColumnHeader.prototype.initComponents = function initComponents() {
		return _PureContainer.prototype.initComponents.call(this, {
			header1: this.header1 && GridHeaderCell.create(this.header1),
			header2: this.header2 && GridHeaderCell.create(this.header2),
			header3: this.header3 && GridHeaderCell.create(this.header3)
		});
	};

	return GridColumnHeader;
})(PureContainer);

var GridHeaderCell = (function(_PureContainer2) {
	inherits(GridHeaderCell, _PureContainer2);

	function GridHeaderCell() {
		classCallCheck(this, GridHeaderCell);
		return possibleConstructorReturn(this, _PureContainer2.apply(this, arguments));
	}

	GridHeaderCell.prototype.declareData = function declareData() {
		var _PureContainer2$proto;

		return (_PureContainer2$proto = _PureContainer2.prototype.declareData).call.apply(
			_PureContainer2$proto,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					text: undefined,
					colSpan: undefined,
					rowSpan: undefined
				}
			])
		);
	};

	GridHeaderCell.prototype.initComponents = function initComponents() {
		var _PureContainer2$proto2;

		return (_PureContainer2$proto2 = _PureContainer2.prototype.initComponents).call.apply(
			_PureContainer2$proto2,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					tool: this.tool && Widget.create(this.tool)
				}
			])
		);
	};

	GridHeaderCell.prototype.render = function render(context, instance, key) {
		var data = instance.data;

		return data.text || _PureContainer2.prototype.render.call(this, context, instance, key);
	};

	return GridHeaderCell;
})(PureContainer);

GridHeaderCell.prototype.colSpan = 1;
GridHeaderCell.prototype.rowSpan = 1;
GridHeaderCell.prototype.allowSorting = true;
GridHeaderCell.prototype.styled = true;

function initGrouping(grouping) {
	grouping.forEach(function(g) {
		if (g.caption) g.caption = getSelector(g.caption);
	});
}

var TreeNode = (function(_Widget) {
	inherits(TreeNode, _Widget);

	function TreeNode() {
		classCallCheck(this, TreeNode);
		return possibleConstructorReturn(this, _Widget.apply(this, arguments));
	}

	TreeNode.prototype.declareData = function declareData() {
		var _Widget$prototype$dec;

		(_Widget$prototype$dec = _Widget.prototype.declareData).call.apply(
			_Widget$prototype$dec,
			[
				this,
				{
					level: undefined,
					expanded: undefined,
					leaf: undefined,
					text: undefined,
					loading: undefined,
					icon: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	TreeNode.prototype.prepareData = function prepareData(context, instance) {
		var data = instance.data;

		data.stateMods = {
			expanded: data.expanded,
			loading: data.loading,
			leaf: data.leaf,
			folder: !data.leaf
		};
		data.stateMods["level-" + data.level] = true;
		_Widget.prototype.prepareData.call(this, context, instance);
	};

	TreeNode.prototype.render = function render(context, instance, key) {
		var _this2 = this;

		var data = instance.data,
			widget = instance.widget;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		var icon = data.icon;

		if (!data.icon) {
			if (data.leaf) icon = this.itemIcon;
			else {
				if (data.loading) icon = this.loadingIcon;
				else if (data.expanded) icon = this.openFolderIcon || this.folderIcon;
				else icon = this.folderIcon;
			}
		}

		return VDOM.createElement(
			"div",
			{ key: key, className: data.classNames, style: data.style },
			VDOM.createElement(
				"div",
				{
					className: CSS.element(baseClass, "handle"),
					onClick: function onClick(e) {
						return _this2.toggle(e, instance);
					}
				},
				!data.leaf && VDOM.createElement(DropdownIcon, { className: CSS.element(baseClass, "arrow") }),
				Icon.render(icon, {
					className: CSS.element(baseClass, "icon")
				})
			),
			VDOM.createElement("div", null, data.text)
		);
	};

	TreeNode.prototype.toggle = function toggle(e, instance) {
		var data = instance.data;

		if (!data.leaf) instance.set("expanded", !data.expanded);
		e.preventDefault();
		e.stopPropagation();
	};

	return TreeNode;
})(Widget);

TreeNode.prototype.baseClass = "treenode";
TreeNode.prototype.itemIcon = "file";
TreeNode.prototype.loadingIcon = "loading";
TreeNode.prototype.folderIcon = "folder";
TreeNode.prototype.openFolderIcon = "folder-open";
TreeNode.prototype.styled = true;

Widget.alias("treenode", TreeNode);

var Pagination = (function(_Widget) {
	inherits(Pagination, _Widget);

	function Pagination() {
		classCallCheck(this, Pagination);
		return possibleConstructorReturn(this, _Widget.apply(this, arguments));
	}

	Pagination.prototype.declareData = function declareData() {
		var _Widget$prototype$dec;

		(_Widget$prototype$dec = _Widget.prototype.declareData).call.apply(
			_Widget$prototype$dec,
			[
				this,
				{
					page: undefined,
					length: undefined,
					pageCount: undefined
				}
			].concat(Array.prototype.slice.call(arguments))
		);
	};

	Pagination.prototype.render = function render(context, instance, key) {
		var _this2 = this;

		var data = instance.data,
			widget = instance.widget;
		var page = data.page,
			pageCount = data.pageCount,
			length = data.length;
		var CSS = widget.CSS,
			baseClass = widget.baseClass;

		if (!pageCount) pageCount = 1;

		var minPage = Math.max(1, page - Math.floor(length / 2));
		var maxPage = minPage + length - 1;

		if (maxPage > pageCount) {
			maxPage = Math.max(pageCount, length);
			minPage = maxPage - length + 1;
		}

		var nextPageIcon = VDOM.createElement(ForwardIcon, { className: CSS.element(baseClass, "icon-next-page") });
		var prevPageIcon = VDOM.createElement(ForwardIcon, { className: CSS.element(baseClass, "icon-prev-page") });

		var pageBtns = [];

		var _loop = function _loop(p) {
			pageBtns.push(
				VDOM.createElement(
					"li",
					{
						key: p < minPage ? "-1" : p > maxPage ? "-2" : p,
						className: CSS.element(baseClass, "page", {
							active: page == p,
							disabled: p > pageCount || (p < page && page == 1)
						}),
						onMouseDown: function onMouseDown(e) {
							e.stopPropagation();
							preventFocusOnTouch(e);
						},
						onClick: function onClick(e) {
							_this2.setPage(e, instance, p < minPage ? page - 1 : p > maxPage ? page + 1 : p);
						}
					},
					p < minPage ? prevPageIcon : p > maxPage ? nextPageIcon : p
				)
			);
		};

		for (var p = minPage - 1; p <= maxPage + 1; p++) {
			_loop(p);
		}

		return VDOM.createElement(
			"ul",
			{
				key: key,
				className: data.classNames,
				style: data.style,
				tabIndex: 0,
				onKeyDown: function onKeyDown(e) {
					_this2.onKeyDown(e, instance);
				}
			},
			pageBtns
		);
	};

	Pagination.prototype.onKeyDown = function onKeyDown(e, instance) {
		var data = instance.data;

		switch (e.keyCode) {
			case KeyCode.left:
				this.setPage(e, instance, data.page - 1);
				break;

			case KeyCode.right:
				this.setPage(e, instance, data.page + 1);
				break;
		}
	};

	Pagination.prototype.setPage = function setPage(e, instance, page) {
		e.preventDefault();
		e.stopPropagation();
		var data = instance.data;
		var pageCount = data.pageCount;

		if (page <= pageCount && page > 0) instance.set("page", page);
	};

	return Pagination;
})(Widget);

Pagination.prototype.baseClass = "pagination";
Pagination.prototype.length = 5;
Pagination.prototype.styled = true;

Widget.alias("pagination", Pagination);

var DragSource = (function(_PureContainer) {
	inherits(DragSource, _PureContainer);

	function DragSource() {
		classCallCheck(this, DragSource);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	DragSource.prototype.declareData = function declareData() {
		var _PureContainer$protot;

		(_PureContainer$protot = _PureContainer.prototype.declareData).call.apply(
			_PureContainer$protot,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					data: { structured: true }
				}
			])
		);
	};

	DragSource.prototype.explore = function explore(context, instance) {
		context.push("dragHandles", (instance.dragHandles = []));
		_PureContainer.prototype.explore.call(this, context, instance);
	};

	DragSource.prototype.exploreCleanup = function exploreCleanup(context, instance) {
		context.pop("dragHandles");
	};

	DragSource.prototype.render = function render(context, instance, key) {
		return VDOM.createElement(
			DragSourceComponent,
			{ key: key, instance: instance, handled: this.handled || instance.dragHandles.length > 0 },
			this.renderChildren(context, instance)
		);
	};

	return DragSource;
})(PureContainer);

DragSource.prototype.styled = true;
DragSource.prototype.baseClass = "dragsource";
DragSource.prototype.hideOnDrag = false;
DragSource.prototype.handled = false;
DragSource.prototype.isPureContainer = false;

Widget.alias("dragsource", DragSource);

var DragSourceComponent = (function(_VDOM$Component) {
	inherits(DragSourceComponent, _VDOM$Component);

	function DragSourceComponent(props) {
		classCallCheck(this, DragSourceComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.state = { dragged: false };

		_this2.beginDragDrop = _this2.beginDragDrop.bind(_this2);
		_this2.onMouseMove = _this2.onMouseMove.bind(_this2);
		_this2.onMouseDown = _this2.onMouseDown.bind(_this2);
		_this2.setRef = function(el) {
			_this2.el = el;
		};
		return _this2;
	}

	DragSourceComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
		return nextProps.instance.shouldUpdate || nextState != this.state;
	};

	DragSourceComponent.prototype.render = function render() {
		var _props = this.props,
			instance = _props.instance,
			children = _props.children,
			handled = _props.handled;
		var data = instance.data,
			widget = instance.widget;
		var CSS = widget.CSS;

		if (this.state.dragged && widget.hideOnDrag) return null;

		var classes = [
			data.classNames,
			CSS.state({
				dragged: this.state.dragged,
				draggable: !handled
			})
		];

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(classes),
				style: data.style,
				onTouchStart: this.onMouseDown,
				onMouseDown: this.onMouseDown,
				onTouchMove: this.onMouseMove,
				onMouseMove: this.onMouseMove,
				onTouchEnd: ddMouseUp,
				onMouseUp: ddMouseUp,
				ref: this.setRef
			},
			children
		);
	};

	DragSourceComponent.prototype.onMouseDown = function onMouseDown(e) {
		ddMouseDown(e);
		if (isDragHandleEvent(e) || !this.props.handled) e.preventDefault();
	};

	DragSourceComponent.prototype.onMouseMove = function onMouseMove(e) {
		if (ddDetect(e)) {
			if (isDragHandleEvent(e) || !this.props.handled) {
				this.beginDragDrop(e);
			}
		}
	};

	DragSourceComponent.prototype.beginDragDrop = function beginDragDrop(e) {
		var _this3 = this;

		var instance = this.props.instance;
		var data = instance.data,
			widget = instance.widget,
			store = instance.store;

		if (widget.onDragStart && instance.invoke("onDragStart", e, instance) === false) return;

		initiateDragDrop(
			e,
			{
				sourceEl: this.el,
				source: {
					store: store,
					data: data.data
				},
				clone: {
					widget: widget,
					store: store
				}
			},
			function(e) {
				_this3.setState({
					dragged: false
				});
				if (widget.onDragEnd) instance.invoke("onDragEnd", e, instance);
			}
		);

		this.setState({
			dragged: true
		});
	};

	return DragSourceComponent;
})(VDOM.Component);

var DragHandle = (function(_PureContainer) {
	inherits(DragHandle, _PureContainer);

	function DragHandle() {
		classCallCheck(this, DragHandle);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	DragHandle.prototype.explore = function explore(context, instance) {
		if (isArray(context.dragHandles)) context.dragHandles.push(instance);
		_PureContainer.prototype.explore.call(this, context, instance);
	};

	DragHandle.prototype.render = function render(context, instance, key) {
		var data = instance.data;

		return VDOM.createElement(
			"div",
			{
				key: key,
				className: data.classNames,
				style: data.style,
				onTouchStart: ddHandle,
				onMouseDown: ddHandle,
				onTouchMove: ddHandle,
				onMouseMove: ddHandle,
				onTouchEnd: ddHandle,
				onMouseUp: ddHandle
			},
			this.renderChildren(context, instance)
		);
	};

	return DragHandle;
})(PureContainer);

DragHandle.prototype.styled = true;
DragHandle.prototype.baseClass = "draghandle";

Widget.alias("draghandle", DragHandle);

var DropZone = (function(_PureContainer) {
	inherits(DropZone, _PureContainer);

	function DropZone() {
		classCallCheck(this, DropZone);
		return possibleConstructorReturn(this, _PureContainer.apply(this, arguments));
	}

	DropZone.prototype.init = function init() {
		this.overStyle = parseStyle(this.overStyle);
		this.nearStyle = parseStyle(this.nearStyle);
		this.farStyle = parseStyle(this.farStyle);

		if (isNumber(this.inflate)) {
			this.hinflate = this.inflate;
			this.vinflate = this.inflate;
		}

		_PureContainer.prototype.init.call(this);
	};

	DropZone.prototype.declareData = function declareData() {
		var _PureContainer$protot;

		return (_PureContainer$protot = _PureContainer.prototype.declareData).call.apply(
			_PureContainer$protot,
			[this].concat(Array.prototype.slice.call(arguments), [
				{
					overClass: { structured: true },
					nearClass: { structured: true },
					farClass: { structured: true },
					overStyle: { structured: true },
					nearStyle: { structured: true },
					farStyle: { structured: true }
				}
			])
		);
	};

	DropZone.prototype.render = function render(context, instance, key) {
		return VDOM.createElement(
			DropZoneComponent,
			{ key: key, instance: instance },
			this.renderChildren(context, instance)
		);
	};

	return DropZone;
})(PureContainer);

DropZone.prototype.styled = true;
DropZone.prototype.nearDistance = 0;
DropZone.prototype.hinflate = 0;
DropZone.prototype.vinflate = 0;
DropZone.prototype.baseClass = "dropzone";

Widget.alias("dropzone", DropZone);

var DropZoneComponent = (function(_VDOM$Component) {
	inherits(DropZoneComponent, _VDOM$Component);

	function DropZoneComponent(props) {
		classCallCheck(this, DropZoneComponent);

		var _this2 = possibleConstructorReturn(this, _VDOM$Component.call(this, props));

		_this2.state = {
			state: false
		};
		return _this2;
	}

	DropZoneComponent.prototype.render = function render() {
		var _this3 = this;

		var _props = this.props,
			instance = _props.instance,
			children = _props.children;
		var data = instance.data,
			widget = instance.widget;
		var CSS = widget.CSS;

		var classes = [data.classNames, CSS.state(this.state.state)];

		var stateStyle = void 0;

		switch (this.state.state) {
			case "over":
				classes.push(data.overClass);
				stateStyle = parseStyle(data.overStyle);
				break;
			case "near":
				classes.push(data.nearClass);
				stateStyle = parseStyle(data.nearStyle);
				break;
			case "far":
				classes.push(data.farClass);
				stateStyle = parseStyle(data.farStyle);
				break;
		}

		return VDOM.createElement(
			"div",
			{
				className: CSS.expand(classes),
				style: _extends({}, data.style, this.state.style, stateStyle),
				ref: function ref(el) {
					_this3.el = el;
				}
			},
			children
		);
	};

	DropZoneComponent.prototype.componentDidMount = function componentDidMount() {
		this.unregister = registerDropZone(this);
	};

	DropZoneComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		this.unregister();
	};

	DropZoneComponent.prototype.onDropTest = function onDropTest(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		return !widget.onDropTest || instance.invoke("onDropTest", e, instance);
	};

	DropZoneComponent.prototype.onDragStart = function onDragStart(e) {
		this.initialWidth = this.el.offsetWidth;
		this.initialHeight = this.el.offsetHeight;
		this.setState({
			state: "far"
		});
	};

	DropZoneComponent.prototype.onDragNear = function onDragNear(e) {
		this.setState({
			state: "near"
		});
	};

	DropZoneComponent.prototype.onDragAway = function onDragAway(e) {
		this.setState({
			state: "far"
		});
	};

	DropZoneComponent.prototype.onDragLeave = function onDragLeave(e) {
		var nearDistance = this.props.instance.widget.nearDistance;

		this.setState({
			state: nearDistance ? "near" : "far",
			style: null
		});
	};

	DropZoneComponent.prototype.onDragMeasure = function onDragMeasure(e) {
		var r = this.el.getBoundingClientRect();
		var rect = {
			left: r.left,
			right: r.right,
			top: r.top,
			bottom: r.bottom
		};

		var instance = this.props.instance;
		var widget = instance.widget;
		var _e$cursor = e.cursor,
			clientX = _e$cursor.clientX,
			clientY = _e$cursor.clientY;

		var distance =
			Math.max(0, rect.left - clientX, clientX - rect.right) + Math.max(0, rect.top - clientY, clientY - rect.bottom);

		if (widget.hinflate > 0) {
			rect.left -= widget.hinflate;
			rect.right += widget.hinflate;
		}

		if (widget.vinflate > 0) {
			rect.top -= widget.vinflate;
			rect.bottom += widget.vinflate;
		}

		var nearDistance = widget.nearDistance;

		var over = rect.left <= clientX && clientX < rect.right && rect.top <= clientY && clientY < rect.bottom;

		return {
			over: over && distance,
			near: nearDistance && (over || distance < nearDistance)
		};
	};

	DropZoneComponent.prototype.onDragEnter = function onDragEnter(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		var style = {};

		if (widget.matchWidth) style.width = e.source.width + "px";

		if (widget.matchHeight) style.height = e.source.height + "px";

		if (widget.matchMargin) style.margin = e.source.margin.join(" ");

		if (this.state != "over")
			this.setState({
				state: "over",
				style: style
			});
	};

	DropZoneComponent.prototype.onDragOver = function onDragOver(e) {};

	DropZoneComponent.prototype.onGetHScrollParent = function onGetHScrollParent() {
		return findScrollableParent(this.el, true);
	};

	DropZoneComponent.prototype.onGetVScrollParent = function onGetVScrollParent() {
		return findScrollableParent(this.el);
	};

	DropZoneComponent.prototype.onDrop = function onDrop(e) {
		var instance = this.props.instance;
		var widget = instance.widget;

		if (this.state.state == "over" && widget.onDrop) instance.invoke("onDrop", e, instance);
	};

	DropZoneComponent.prototype.onDragEnd = function onDragEnd(e) {
		this.setState({
			state: false,
			style: null
		});
	};

	return DropZoneComponent;
})(VDOM.Component);

function enableAllInternalDependencies() {
	enableTooltips();
	enableMsgBoxAlerts();
	enableCultureSensitiveFormatting();
	enableFatArrowExpansion();
}

export {
	cx,
	react,
	urlAttributes,
	HtmlElement,
	Button,
	DocumentTitle,
	List,
	Sandbox,
	CxCredit,
	Heading,
	Section,
	FlexBox,
	FlexRow,
	FlexCol,
	Icon,
	ProgressBar,
	Overlay,
	OverlayComponent,
	Dropdown,
	tooltipMouseMove,
	tooltipMouseLeave,
	tooltipParentDidMount,
	tooltipParentWillReceiveProps,
	tooltipParentWillUnmount,
	wireTooltipOps,
	Tooltip,
	getTooltipInstance,
	enableTooltips,
	Window,
	MsgBox,
	enableMsgBoxAlerts,
	Toast,
	captureMouse,
	captureMouseOrTouch,
	getCursorPos,
	ContextMenu,
	openContextMenu,
	Route,
	RedirectRoute,
	Tab,
	Link,
	LinkButton,
	Menu,
	MenuItem,
	Submenu,
	HScroller,
	HScrollerComponent,
	Field,
	getFieldTooltip,
	autoFocus,
	TextField,
	Checkbox,
	Radio,
	Select,
	Option,
	Calendar,
	CalendarCmp,
	LookupField,
	NumberField,
	TextArea,
	LabeledContainer,
	ValidationError,
	ValidationGroup,
	FieldGroup,
	MonthPicker,
	MonthPickerComponent,
	ColorPicker,
	MonthField,
	ColorField,
	UploadButton,
	Slider,
	Switch,
	HelpText,
	Wheel,
	WheelComponent,
	DateTimePicker,
	DateTimeField,
	DateField,
	TimeField,
	Validator,
	Grid,
	TreeNode,
	Pagination,
	DragSource,
	DragHandle,
	DropZone,
	registerDropZone,
	initiateDragDrop,
	ddMouseDown,
	ddMouseUp,
	ddDetect,
	ddHandle,
	isDragHandleEvent,
	enableAllInternalDependencies
};
export {
	Widget,
	StaticText,
	Text,
	PureContainer,
	Content,
	ContentPlaceholder,
	ContentResolver,
	Rescope,
	Repeater,
	IsolatedScope,
	DetachedScope,
	DataAdapter,
	ArrayAdapter,
	GroupAdapter,
	TreeAdapter
} from "./ui";
